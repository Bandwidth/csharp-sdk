/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.WebRtc.Models
{
    public class Subscriptions 
    {
        public Subscriptions() { }

        public Subscriptions(string sessionId,
            List<Models.ParticipantSubscription> participants = null)
        {
            SessionId = sessionId;
            Participants = participants;
        }

        /// <summary>
        /// Session the subscriptions are associated with
        /// If this is the only field, the subscriber will be subscribed to all participants in the session (including any participants that are later added to the session)
        /// </summary>
        [JsonProperty("sessionId")]
        public string SessionId { get; set; }

        /// <summary>
        /// Subset of participants to subscribe to in the session. Optional.
        /// </summary>
        [JsonProperty("participants", NullValueHandling = NullValueHandling.Ignore)]
        public List<Models.ParticipantSubscription> Participants { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"Subscriptions : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"SessionId = {(SessionId == null ? "null" : SessionId == string.Empty ? "" : SessionId)}");
            toStringOutput.Add($"Participants = {(Participants == null ? "null" : $"[{ string.Join(", ", Participants)} ]")}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is Subscriptions other &&
                ((SessionId == null && other.SessionId == null) || (SessionId?.Equals(other.SessionId) == true)) &&
                ((Participants == null && other.Participants == null) || (Participants?.Equals(other.Participants) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -1970062954;

            if (SessionId != null)
            {
               hashCode += SessionId.GetHashCode();
            }

            if (Participants != null)
            {
               hashCode += Participants.GetHashCode();
            }

            return hashCode;
        }

    }
}