/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.WebRtc.Models
{
    public class Error 
    {
        public Error() { }

        public Error(int code,
            string message)
        {
            Code = code;
            Message = message;
        }

        /// <summary>
        /// Getter for code
        /// </summary>
        [JsonProperty("code")]
        public int Code { get; set; }

        /// <summary>
        /// Getter for message
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"Error : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Code = {Code}");
            toStringOutput.Add($"Message = {(Message == null ? "null" : Message == string.Empty ? "" : Message)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is Error other &&
                Code.Equals(other.Code) &&
                ((Message == null && other.Message == null) || (Message?.Equals(other.Message) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -760548828;
            hashCode += Code.GetHashCode();

            if (Message != null)
            {
               hashCode += Message.GetHashCode();
            }

            return hashCode;
        }

    }
}