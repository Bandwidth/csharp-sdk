/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;
using Bandwidth.Standard.Http.Request;
using Bandwidth.Standard.Http.Response;
using Bandwidth.Standard.Http.Client;
using Bandwidth.Standard.Authentication;
using Bandwidth.Standard.WebRtc.Exceptions;
using Bandwidth.Standard.Exceptions;

namespace Bandwidth.Standard.WebRtc.Controllers
{
    public class APIController : BaseController
    {
        internal APIController(IConfiguration config, IHttpClient httpClient, IDictionary<string, IAuthManager> authManagers, HttpCallBack httpCallBack = null) :
            base(config, httpClient, authManagers, httpCallBack)
        { }

        /// <summary>
        /// Create a new participant under this account
        /// Participants are idempotent, so relevant parameters must be set in this function if desired
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="body">Optional parameter: Participant parameters</param>
        /// <return>Returns the ApiResponse<Models.AccountsParticipantsResponse> response from the API call</return>
        public ApiResponse<Models.AccountsParticipantsResponse> CreateParticipant(string accountId, Models.Participant body = null)
        {
            Task<ApiResponse<Models.AccountsParticipantsResponse>> t = CreateParticipantAsync(accountId, body);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a new participant under this account
        /// Participants are idempotent, so relevant parameters must be set in this function if desired
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="body">Optional parameter: Participant parameters</param>
        /// <return>Returns the ApiResponse<Models.AccountsParticipantsResponse> response from the API call</return>
        public async Task<ApiResponse<Models.AccountsParticipantsResponse>> CreateParticipantAsync(string accountId, Models.Participant body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/participants");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiException("Bad Request", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.AccountsParticipantsResponse>(_response.Body);
            ApiResponse<Models.AccountsParticipantsResponse> apiResponse = new ApiResponse<Models.AccountsParticipantsResponse>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Get participant by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <return>Returns the ApiResponse<Models.Participant> response from the API call</return>
        public ApiResponse<Models.Participant> GetParticipant(string accountId, string participantId)
        {
            Task<ApiResponse<Models.Participant>> t = GetParticipantAsync(accountId, participantId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get participant by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <return>Returns the ApiResponse<Models.Participant> response from the API call</return>
        public async Task<ApiResponse<Models.Participant>> GetParticipantAsync(string accountId, string participantId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/participants/{participantId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "participantId", participantId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.Participant>(_response.Body);
            ApiResponse<Models.Participant> apiResponse = new ApiResponse<Models.Participant>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Delete participant by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteParticipant(string accountId, string participantId)
        {
            Task t = DeleteParticipantAsync(accountId, participantId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete participant by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteParticipantAsync(string accountId, string participantId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/participants/{participantId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "participantId", participantId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Create a new session
        /// Sessions are idempotent, so relevant parameters must be set in this function if desired
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="body">Optional parameter: Session parameters</param>
        /// <return>Returns the ApiResponse<Models.Session> response from the API call</return>
        public ApiResponse<Models.Session> CreateSession(string accountId, Models.Session body = null)
        {
            Task<ApiResponse<Models.Session>> t = CreateSessionAsync(accountId, body);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a new session
        /// Sessions are idempotent, so relevant parameters must be set in this function if desired
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="body">Optional parameter: Session parameters</param>
        /// <return>Returns the ApiResponse<Models.Session> response from the API call</return>
        public async Task<ApiResponse<Models.Session>> CreateSessionAsync(string accountId, Models.Session body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiException("Bad Request", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.Session>(_response.Body);
            ApiResponse<Models.Session> apiResponse = new ApiResponse<Models.Session>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Get session by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the ApiResponse<Models.Session> response from the API call</return>
        public ApiResponse<Models.Session> GetSession(string accountId, string sessionId)
        {
            Task<ApiResponse<Models.Session>> t = GetSessionAsync(accountId, sessionId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get session by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the ApiResponse<Models.Session> response from the API call</return>
        public async Task<ApiResponse<Models.Session>> GetSessionAsync(string accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "sessionId", sessionId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.Session>(_response.Body);
            ApiResponse<Models.Session> apiResponse = new ApiResponse<Models.Session>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Delete session by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteSession(string accountId, string sessionId)
        {
            Task t = DeleteSessionAsync(accountId, sessionId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete session by ID
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteSessionAsync(string accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "sessionId", sessionId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// List participants in a session
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the ApiResponse<List<Models.Participant>> response from the API call</return>
        public ApiResponse<List<Models.Participant>> ListSessionParticipants(string accountId, string sessionId)
        {
            Task<ApiResponse<List<Models.Participant>>> t = ListSessionParticipantsAsync(accountId, sessionId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// List participants in a session
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the ApiResponse<List<Models.Participant>> response from the API call</return>
        public async Task<ApiResponse<List<Models.Participant>>> ListSessionParticipantsAsync(string accountId, string sessionId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}/participants");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "sessionId", sessionId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<List<Models.Participant>>(_response.Body);
            ApiResponse<List<Models.Participant>> apiResponse = new ApiResponse<List<Models.Participant>>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Add a participant to a session
        /// Subscriptions can optionally be provided as part of this call
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="body">Optional parameter: Subscriptions the participant should be created with</param>
        /// <return>Returns the void response from the API call</return>
        public void AddParticipantToSession(
                string accountId,
                string sessionId,
                string participantId,
                Models.Subscriptions body = null)
        {
            Task t = AddParticipantToSessionAsync(accountId, sessionId, participantId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Add a participant to a session
        /// Subscriptions can optionally be provided as part of this call
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="body">Optional parameter: Subscriptions the participant should be created with</param>
        /// <return>Returns the void response from the API call</return>
        public async Task AddParticipantToSessionAsync(
                string accountId,
                string sessionId,
                string participantId,
                Models.Subscriptions body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "sessionId", sessionId },
                { "participantId", participantId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PutBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Remove a participant from a session
        /// This will automatically remove any subscriptions the participant has associated with this session
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the void response from the API call</return>
        public void RemoveParticipantFromSession(string accountId, string participantId, string sessionId)
        {
            Task t = RemoveParticipantFromSessionAsync(accountId, participantId, sessionId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Remove a participant from a session
        /// This will automatically remove any subscriptions the participant has associated with this session
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the void response from the API call</return>
        public async Task RemoveParticipantFromSessionAsync(string accountId, string participantId, string sessionId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "participantId", participantId },
                { "sessionId", sessionId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Get a participant's subscriptions
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the ApiResponse<Models.Subscriptions> response from the API call</return>
        public ApiResponse<Models.Subscriptions> GetParticipantSubscriptions(string accountId, string participantId, string sessionId)
        {
            Task<ApiResponse<Models.Subscriptions>> t = GetParticipantSubscriptionsAsync(accountId, participantId, sessionId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a participant's subscriptions
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <return>Returns the ApiResponse<Models.Subscriptions> response from the API call</return>
        public async Task<ApiResponse<Models.Subscriptions>> GetParticipantSubscriptionsAsync(string accountId, string participantId, string sessionId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "participantId", participantId },
                { "sessionId", sessionId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.Subscriptions>(_response.Body);
            ApiResponse<Models.Subscriptions> apiResponse = new ApiResponse<Models.Subscriptions>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Update a participant's subscriptions
        /// This is a full update that will replace the participant's subscriptions. First call `getParticipantSubscriptions` if you need the current subscriptions. Call this function with no `Subscriptions` object to remove all subscriptions
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <param name="body">Optional parameter: Initial state</param>
        /// <return>Returns the void response from the API call</return>
        public void UpdateParticipantSubscriptions(
                string accountId,
                string participantId,
                string sessionId,
                Models.Subscriptions body = null)
        {
            Task t = UpdateParticipantSubscriptionsAsync(accountId, participantId, sessionId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Update a participant's subscriptions
        /// This is a full update that will replace the participant's subscriptions. First call `getParticipantSubscriptions` if you need the current subscriptions. Call this function with no `Subscriptions` object to remove all subscriptions
        /// </summary>
        /// <param name="accountId">Required parameter: Account ID</param>
        /// <param name="participantId">Required parameter: Participant ID</param>
        /// <param name="sessionId">Required parameter: Session ID</param>
        /// <param name="body">Optional parameter: Initial state</param>
        /// <return>Returns the void response from the API call</return>
        public async Task UpdateParticipantSubscriptionsAsync(
                string accountId,
                string participantId,
                string sessionId,
                Models.Subscriptions body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.WebRtcDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "participantId", participantId },
                { "sessionId", sessionId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PutBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["webRtc"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiException("Bad Request", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Unauthorized", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiException("Access Denied", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiException("Not Found", _context);
            }

            if ((_response.StatusCode < 200) || (_response.StatusCode > 208)) //[200,208] = HTTP OK
            {
                throw new ErrorException("Unexpected Error", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
}