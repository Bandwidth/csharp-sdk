/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard.Http.Client;

using Bandwidth.Standard.Messaging.Models;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;


namespace Bandwidth.Standard.Messaging.Exceptions
{
    public class GenericClientException : ApiException 
    {
        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("description")]
        public string Description { get; set; }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("fieldErrors")]
        public List<Models.FieldError> FieldErrors { get; set; }

        /// <summary>
        /// Base class constructor
        /// </summary>
        /// <param name="reason"> The reason for throwing exception </param>
        /// <param name="context"> The HTTP context that encapsulates request and response objects </param>
        public GenericClientException(string reason, HttpContext context)
            : base(reason, context) { }

        /// <summary>
        /// Initialization constructor
        /// </summary>
        /// <param name="reason"> The reason for throwing exception </param>
        /// <param name="context"> The HTTP context that encapsulates request and response objects </param>
        public GenericClientException(string reason, HttpContext context, string type,
            string description,
            List<Models.FieldError> fieldErrors = null): base(reason, context)
        {
            this.Type = type;
            this.Description = description;
            this.FieldErrors = fieldErrors;
        }
    }
} 