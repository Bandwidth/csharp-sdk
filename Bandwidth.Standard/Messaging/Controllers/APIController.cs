/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;
using Bandwidth.Standard.Http.Request;
using Bandwidth.Standard.Http.Response;
using Bandwidth.Standard.Http.Client;
using Bandwidth.Standard.Authentication;
using Bandwidth.Standard.Messaging.Exceptions;

namespace Bandwidth.Standard.Messaging.Controllers
{
    public class APIController : BaseController
    {
        internal APIController(IConfiguration config, IHttpClient httpClient, IDictionary<string, IAuthManager> authManagers, HttpCallBack httpCallBack = null) :
            base(config, httpClient, authManagers, httpCallBack)
        { }

        /// <summary>
        /// listMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="continuationToken">Optional parameter: Continuation token used to retrieve subsequent media.</param>
        /// <return>Returns the ApiResponse<List<Models.Media>> response from the API call</return>
        public ApiResponse<List<Models.Media>> ListMedia(string accountId, string continuationToken = null)
        {
            Task<ApiResponse<List<Models.Media>>> t = ListMediaAsync(accountId, continuationToken);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// listMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="continuationToken">Optional parameter: Continuation token used to retrieve subsequent media.</param>
        /// <return>Returns the ApiResponse<List<Models.Media>> response from the API call</return>
        public async Task<ApiResponse<List<Models.Media>>> ListMediaAsync(string accountId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.MessagingDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{accountId}/media");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" },
                { "Continuation-Token", continuationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["messaging"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new MessagingExceptionErrorException("400 Request is malformed or invalid", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new MessagingExceptionErrorException("401 The specified user does not have access to the account", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new MessagingExceptionErrorException("403 The user does not have access to this API", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new MessagingExceptionErrorException("404 Path not found", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new MessagingExceptionErrorException("415 The content-type of the request is incorrect", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new MessagingExceptionErrorException("429 The rate limit has been reached", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<List<Models.Media>>(_response.Body);
            ApiResponse<List<Models.Media>> apiResponse = new ApiResponse<List<Models.Media>>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// getMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="mediaId">Required parameter: Media ID to retrieve</param>
        /// <return>Returns the ApiResponse<Stream> response from the API call</return>
        public ApiResponse<Stream> GetMedia(string accountId, string mediaId)
        {
            Task<ApiResponse<Stream>> t = GetMediaAsync(accountId, mediaId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// getMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="mediaId">Required parameter: Media ID to retrieve</param>
        /// <return>Returns the ApiResponse<Stream> response from the API call</return>
        public async Task<ApiResponse<Stream>> GetMediaAsync(string accountId, string mediaId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.MessagingDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{accountId}/media/{mediaId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "mediaId", mediaId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["messaging"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpResponse _response = await GetClientInstance().ExecuteAsBinaryAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new MessagingExceptionErrorException("400 Request is malformed or invalid", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new MessagingExceptionErrorException("401 The specified user does not have access to the account", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new MessagingExceptionErrorException("403 The user does not have access to this API", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new MessagingExceptionErrorException("404 Path not found", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new MessagingExceptionErrorException("415 The content-type of the request is incorrect", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new MessagingExceptionErrorException("429 The rate limit has been reached", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

                var _result = _response.RawBody;
            ApiResponse<Stream> apiResponse = new ApiResponse<Stream>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// uploadMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="mediaId">Required parameter: The user supplied custom media ID</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="contentType">Optional parameter: The media type of the entity-body</param>
        /// <param name="cacheControl">Optional parameter: General-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.</param>
        /// <return>Returns the void response from the API call</return>
        public void UploadMedia(
                string accountId,
                string mediaId,
                FileStreamInfo body,
                string contentType = "application/octet-stream",
                string cacheControl = null)
        {
            Task t = UploadMediaAsync(accountId, mediaId, body, contentType, cacheControl);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// uploadMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="mediaId">Required parameter: The user supplied custom media ID</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="contentType">Optional parameter: The media type of the entity-body</param>
        /// <param name="cacheControl">Optional parameter: General-header field is used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task UploadMediaAsync(
                string accountId,
                string mediaId,
                FileStreamInfo body,
                string contentType = "application/octet-stream",
                string cacheControl = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.MessagingDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{accountId}/media/{mediaId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "mediaId", mediaId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "Content-Type", (null != contentType) ? contentType : "application/octet-stream" },
                { "Cache-Control", cacheControl }
            };

            //append body params
             var _body = body;

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PutBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["messaging"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new MessagingExceptionErrorException("400 Request is malformed or invalid", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new MessagingExceptionErrorException("401 The specified user does not have access to the account", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new MessagingExceptionErrorException("403 The user does not have access to this API", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new MessagingExceptionErrorException("404 Path not found", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new MessagingExceptionErrorException("415 The content-type of the request is incorrect", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new MessagingExceptionErrorException("429 The rate limit has been reached", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// deleteMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="mediaId">Required parameter: The media ID to delete</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteMedia(string accountId, string mediaId)
        {
            Task t = DeleteMediaAsync(accountId, mediaId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// deleteMedia
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="mediaId">Required parameter: The media ID to delete</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteMediaAsync(string accountId, string mediaId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.MessagingDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{accountId}/media/{mediaId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "mediaId", mediaId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["messaging"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new MessagingExceptionErrorException("400 Request is malformed or invalid", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new MessagingExceptionErrorException("401 The specified user does not have access to the account", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new MessagingExceptionErrorException("403 The user does not have access to this API", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new MessagingExceptionErrorException("404 Path not found", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new MessagingExceptionErrorException("415 The content-type of the request is incorrect", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new MessagingExceptionErrorException("429 The rate limit has been reached", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// getMessages
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="messageId">Optional parameter: The ID of the message to search for. Special characters need to be encoded using URL encoding</param>
        /// <param name="sourceTn">Optional parameter: The phone number that sent the message</param>
        /// <param name="destinationTn">Optional parameter: The phone number that received the message</param>
        /// <param name="messageStatus">Optional parameter: The status of the message. One of RECEIVED, QUEUED, SENDING, SENT, FAILED, DELIVERED, ACCEPTED, UNDELIVERED</param>
        /// <param name="errorCode">Optional parameter: The error code of the message</param>
        /// <param name="fromDateTime">Optional parameter: The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.</param>
        /// <param name="toDateTime">Optional parameter: The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.</param>
        /// <param name="pageToken">Optional parameter: A base64 encoded value used for pagination of results</param>
        /// <param name="limit">Optional parameter: The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000</param>
        /// <return>Returns the ApiResponse<Models.BandwidthMessagesList> response from the API call</return>
        public ApiResponse<Models.BandwidthMessagesList> GetMessages(
                string accountId,
                string messageId = null,
                string sourceTn = null,
                string destinationTn = null,
                string messageStatus = null,
                int? errorCode = null,
                string fromDateTime = null,
                string toDateTime = null,
                string pageToken = null,
                int? limit = null)
        {
            Task<ApiResponse<Models.BandwidthMessagesList>> t = GetMessagesAsync(accountId, messageId, sourceTn, destinationTn, messageStatus, errorCode, fromDateTime, toDateTime, pageToken, limit);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// getMessages
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="messageId">Optional parameter: The ID of the message to search for. Special characters need to be encoded using URL encoding</param>
        /// <param name="sourceTn">Optional parameter: The phone number that sent the message</param>
        /// <param name="destinationTn">Optional parameter: The phone number that received the message</param>
        /// <param name="messageStatus">Optional parameter: The status of the message. One of RECEIVED, QUEUED, SENDING, SENT, FAILED, DELIVERED, ACCEPTED, UNDELIVERED</param>
        /// <param name="errorCode">Optional parameter: The error code of the message</param>
        /// <param name="fromDateTime">Optional parameter: The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.</param>
        /// <param name="toDateTime">Optional parameter: The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days.</param>
        /// <param name="pageToken">Optional parameter: A base64 encoded value used for pagination of results</param>
        /// <param name="limit">Optional parameter: The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000</param>
        /// <return>Returns the ApiResponse<Models.BandwidthMessagesList> response from the API call</return>
        public async Task<ApiResponse<Models.BandwidthMessagesList>> GetMessagesAsync(
                string accountId,
                string messageId = null,
                string sourceTn = null,
                string destinationTn = null,
                string messageStatus = null,
                int? errorCode = null,
                string fromDateTime = null,
                string toDateTime = null,
                string pageToken = null,
                int? limit = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.MessagingDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{accountId}/messages");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //prepare specfied query parameters
            var _queryParameters = new Dictionary<string, object>()
            {
                { "messageId", messageId },
                { "sourceTn", sourceTn },
                { "destinationTn", destinationTn },
                { "messageStatus", messageStatus },
                { "errorCode", errorCode },
                { "fromDateTime", fromDateTime },
                { "toDateTime", toDateTime },
                { "pageToken", pageToken },
                { "limit", limit }
            };

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers, queryParameters: _queryParameters);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["messaging"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new MessagingExceptionErrorException("400 Request is malformed or invalid", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new MessagingExceptionErrorException("401 The specified user does not have access to the account", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new MessagingExceptionErrorException("403 The user does not have access to this API", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new MessagingExceptionErrorException("404 Path not found", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new MessagingExceptionErrorException("415 The content-type of the request is incorrect", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new MessagingExceptionErrorException("429 The rate limit has been reached", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.BandwidthMessagesList>(_response.Body);
            ApiResponse<Models.BandwidthMessagesList> apiResponse = new ApiResponse<Models.BandwidthMessagesList>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// createMessage
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.BandwidthMessage> response from the API call</return>
        public ApiResponse<Models.BandwidthMessage> CreateMessage(string accountId, Models.MessageRequest body)
        {
            Task<ApiResponse<Models.BandwidthMessage>> t = CreateMessageAsync(accountId, body);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// createMessage
        /// </summary>
        /// <param name="accountId">Required parameter: User's account ID</param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.BandwidthMessage> response from the API call</return>
        public async Task<ApiResponse<Models.BandwidthMessage>> CreateMessageAsync(string accountId, Models.MessageRequest body, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.MessagingDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/users/{accountId}/messages");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["messaging"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new MessagingExceptionErrorException("400 Request is malformed or invalid", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new MessagingExceptionErrorException("401 The specified user does not have access to the account", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new MessagingExceptionErrorException("403 The user does not have access to this API", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new MessagingExceptionErrorException("404 Path not found", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new MessagingExceptionErrorException("415 The content-type of the request is incorrect", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new MessagingExceptionErrorException("429 The rate limit has been reached", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.BandwidthMessage>(_response.Body);
            ApiResponse<Models.BandwidthMessage> apiResponse = new ApiResponse<Models.BandwidthMessage>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

    }
}