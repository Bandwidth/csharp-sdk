/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Messaging.Models
{
    public class DeferredResult 
    {
        public DeferredResult() { }

        public DeferredResult(object result = null,
            bool? setOrExpired = null)
        {
            Result = result;
            SetOrExpired = setOrExpired;
        }

        /// <summary>
        /// Getter for result
        /// </summary>
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public object Result { get; set; }

        /// <summary>
        /// Getter for setOrExpired
        /// </summary>
        [JsonProperty("setOrExpired", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SetOrExpired { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"DeferredResult : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Result = {(Result == null ? "null" : Result.ToString())}");
            toStringOutput.Add($"SetOrExpired = {(SetOrExpired == null ? "null" : SetOrExpired.ToString())}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is DeferredResult other &&
                ((Result == null && other.Result == null) || (Result?.Equals(other.Result) == true)) &&
                ((SetOrExpired == null && other.SetOrExpired == null) || (SetOrExpired?.Equals(other.SetOrExpired) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -1571367651;

            if (Result != null)
            {
               hashCode += Result.GetHashCode();
            }

            if (SetOrExpired != null)
            {
               hashCode += SetOrExpired.GetHashCode();
            }

            return hashCode;
        }

    }
}