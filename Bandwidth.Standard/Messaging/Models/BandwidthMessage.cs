/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Messaging.Models
{
    public class BandwidthMessage 
    {
        public BandwidthMessage() { }

        public BandwidthMessage(string id = null,
            string owner = null,
            string applicationId = null,
            string time = null,
            int? segmentCount = null,
            string direction = null,
            List<string> to = null,
            string from = null,
            List<string> media = null,
            string text = null,
            string tag = null,
            string priority = null)
        {
            Id = id;
            Owner = owner;
            ApplicationId = applicationId;
            Time = time;
            SegmentCount = segmentCount;
            Direction = direction;
            To = to;
            From = from;
            Media = media;
            Text = text;
            Tag = tag;
            Priority = priority;
        }

        /// <summary>
        /// The id of the message
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The Bandwidth phone number associated with the message
        /// </summary>
        [JsonProperty("owner", NullValueHandling = NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// The application ID associated with the message
        /// </summary>
        [JsonProperty("applicationId", NullValueHandling = NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The datetime stamp of the message in ISO 8601
        /// </summary>
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// The number of segments the original message from the user is broken into before sending over to carrier networks
        /// </summary>
        [JsonProperty("segmentCount", NullValueHandling = NullValueHandling.Ignore)]
        public int? SegmentCount { get; set; }

        /// <summary>
        /// The direction of the message relative to Bandwidth. Can be in or out
        /// </summary>
        [JsonProperty("direction", NullValueHandling = NullValueHandling.Ignore)]
        public string Direction { get; set; }

        /// <summary>
        /// The phone number recipients of the message
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> To { get; set; }

        /// <summary>
        /// The phone number the message was sent from
        /// </summary>
        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The list of media URLs sent in the message
        /// </summary>
        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Media { get; set; }

        /// <summary>
        /// The contents of the message
        /// </summary>
        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// The custom string set by the user
        /// </summary>
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// The priority specified by the user
        /// </summary>
        [JsonProperty("priority", NullValueHandling = NullValueHandling.Ignore)]
        public string Priority { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"BandwidthMessage : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Id = {(Id == null ? "null" : Id == string.Empty ? "" : Id)}");
            toStringOutput.Add($"Owner = {(Owner == null ? "null" : Owner == string.Empty ? "" : Owner)}");
            toStringOutput.Add($"ApplicationId = {(ApplicationId == null ? "null" : ApplicationId == string.Empty ? "" : ApplicationId)}");
            toStringOutput.Add($"Time = {(Time == null ? "null" : Time == string.Empty ? "" : Time)}");
            toStringOutput.Add($"SegmentCount = {(SegmentCount == null ? "null" : SegmentCount.ToString())}");
            toStringOutput.Add($"Direction = {(Direction == null ? "null" : Direction == string.Empty ? "" : Direction)}");
            toStringOutput.Add($"To = {(To == null ? "null" : $"[{ string.Join(", ", To)} ]")}");
            toStringOutput.Add($"From = {(From == null ? "null" : From == string.Empty ? "" : From)}");
            toStringOutput.Add($"Media = {(Media == null ? "null" : $"[{ string.Join(", ", Media)} ]")}");
            toStringOutput.Add($"Text = {(Text == null ? "null" : Text == string.Empty ? "" : Text)}");
            toStringOutput.Add($"Tag = {(Tag == null ? "null" : Tag == string.Empty ? "" : Tag)}");
            toStringOutput.Add($"Priority = {(Priority == null ? "null" : Priority == string.Empty ? "" : Priority)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is BandwidthMessage other &&
                ((Id == null && other.Id == null) || (Id?.Equals(other.Id) == true)) &&
                ((Owner == null && other.Owner == null) || (Owner?.Equals(other.Owner) == true)) &&
                ((ApplicationId == null && other.ApplicationId == null) || (ApplicationId?.Equals(other.ApplicationId) == true)) &&
                ((Time == null && other.Time == null) || (Time?.Equals(other.Time) == true)) &&
                ((SegmentCount == null && other.SegmentCount == null) || (SegmentCount?.Equals(other.SegmentCount) == true)) &&
                ((Direction == null && other.Direction == null) || (Direction?.Equals(other.Direction) == true)) &&
                ((To == null && other.To == null) || (To?.Equals(other.To) == true)) &&
                ((From == null && other.From == null) || (From?.Equals(other.From) == true)) &&
                ((Media == null && other.Media == null) || (Media?.Equals(other.Media) == true)) &&
                ((Text == null && other.Text == null) || (Text?.Equals(other.Text) == true)) &&
                ((Tag == null && other.Tag == null) || (Tag?.Equals(other.Tag) == true)) &&
                ((Priority == null && other.Priority == null) || (Priority?.Equals(other.Priority) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 1547980768;

            if (Id != null)
            {
               hashCode += Id.GetHashCode();
            }

            if (Owner != null)
            {
               hashCode += Owner.GetHashCode();
            }

            if (ApplicationId != null)
            {
               hashCode += ApplicationId.GetHashCode();
            }

            if (Time != null)
            {
               hashCode += Time.GetHashCode();
            }

            if (SegmentCount != null)
            {
               hashCode += SegmentCount.GetHashCode();
            }

            if (Direction != null)
            {
               hashCode += Direction.GetHashCode();
            }

            if (To != null)
            {
               hashCode += To.GetHashCode();
            }

            if (From != null)
            {
               hashCode += From.GetHashCode();
            }

            if (Media != null)
            {
               hashCode += Media.GetHashCode();
            }

            if (Text != null)
            {
               hashCode += Text.GetHashCode();
            }

            if (Tag != null)
            {
               hashCode += Tag.GetHashCode();
            }

            if (Priority != null)
            {
               hashCode += Priority.GetHashCode();
            }

            return hashCode;
        }

    }
}