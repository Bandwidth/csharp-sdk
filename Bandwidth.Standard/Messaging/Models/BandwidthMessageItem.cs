/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Messaging.Models
{
    public class BandwidthMessageItem 
    {
        public BandwidthMessageItem() { }

        public BandwidthMessageItem(string messageId = null,
            string accountId = null,
            string sourceTn = null,
            string destinationTn = null,
            string messageStatus = null,
            string messageDirection = null,
            string messageType = null,
            int? segmentCount = null,
            int? errorCode = null,
            string receiveTime = null,
            string carrierName = null)
        {
            MessageId = messageId;
            AccountId = accountId;
            SourceTn = sourceTn;
            DestinationTn = destinationTn;
            MessageStatus = messageStatus;
            MessageDirection = messageDirection;
            MessageType = messageType;
            SegmentCount = segmentCount;
            ErrorCode = errorCode;
            ReceiveTime = receiveTime;
            CarrierName = carrierName;
        }

        /// <summary>
        /// The message id
        /// </summary>
        [JsonProperty("messageId", NullValueHandling = NullValueHandling.Ignore)]
        public string MessageId { get; set; }

        /// <summary>
        /// The account id of the message
        /// </summary>
        [JsonProperty("accountId", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The source phone number of the message
        /// </summary>
        [JsonProperty("sourceTn", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceTn { get; set; }

        /// <summary>
        /// The recipient phone number of the message
        /// </summary>
        [JsonProperty("destinationTn", NullValueHandling = NullValueHandling.Ignore)]
        public string DestinationTn { get; set; }

        /// <summary>
        /// The status of the message
        /// </summary>
        [JsonProperty("messageStatus", NullValueHandling = NullValueHandling.Ignore)]
        public string MessageStatus { get; set; }

        /// <summary>
        /// The direction of the message relative to Bandwidth. INBOUND or OUTBOUND
        /// </summary>
        [JsonProperty("messageDirection", NullValueHandling = NullValueHandling.Ignore)]
        public string MessageDirection { get; set; }

        /// <summary>
        /// The type of message. sms or mms
        /// </summary>
        [JsonProperty("messageType", NullValueHandling = NullValueHandling.Ignore)]
        public string MessageType { get; set; }

        /// <summary>
        /// The number of segments the message was sent as
        /// </summary>
        [JsonProperty("segmentCount", NullValueHandling = NullValueHandling.Ignore)]
        public int? SegmentCount { get; set; }

        /// <summary>
        /// The numeric error code of the message
        /// </summary>
        [JsonProperty("errorCode", NullValueHandling = NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// The ISO 8601 datetime of the message
        /// </summary>
        [JsonProperty("receiveTime", NullValueHandling = NullValueHandling.Ignore)]
        public string ReceiveTime { get; set; }

        /// <summary>
        /// The name of the carrier. Not currently supported for MMS, coming soon
        /// </summary>
        [JsonProperty("carrierName", NullValueHandling = NullValueHandling.Ignore)]
        public string CarrierName { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"BandwidthMessageItem : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"MessageId = {(MessageId == null ? "null" : MessageId == string.Empty ? "" : MessageId)}");
            toStringOutput.Add($"AccountId = {(AccountId == null ? "null" : AccountId == string.Empty ? "" : AccountId)}");
            toStringOutput.Add($"SourceTn = {(SourceTn == null ? "null" : SourceTn == string.Empty ? "" : SourceTn)}");
            toStringOutput.Add($"DestinationTn = {(DestinationTn == null ? "null" : DestinationTn == string.Empty ? "" : DestinationTn)}");
            toStringOutput.Add($"MessageStatus = {(MessageStatus == null ? "null" : MessageStatus == string.Empty ? "" : MessageStatus)}");
            toStringOutput.Add($"MessageDirection = {(MessageDirection == null ? "null" : MessageDirection == string.Empty ? "" : MessageDirection)}");
            toStringOutput.Add($"MessageType = {(MessageType == null ? "null" : MessageType == string.Empty ? "" : MessageType)}");
            toStringOutput.Add($"SegmentCount = {(SegmentCount == null ? "null" : SegmentCount.ToString())}");
            toStringOutput.Add($"ErrorCode = {(ErrorCode == null ? "null" : ErrorCode.ToString())}");
            toStringOutput.Add($"ReceiveTime = {(ReceiveTime == null ? "null" : ReceiveTime == string.Empty ? "" : ReceiveTime)}");
            toStringOutput.Add($"CarrierName = {(CarrierName == null ? "null" : CarrierName == string.Empty ? "" : CarrierName)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is BandwidthMessageItem other &&
                ((MessageId == null && other.MessageId == null) || (MessageId?.Equals(other.MessageId) == true)) &&
                ((AccountId == null && other.AccountId == null) || (AccountId?.Equals(other.AccountId) == true)) &&
                ((SourceTn == null && other.SourceTn == null) || (SourceTn?.Equals(other.SourceTn) == true)) &&
                ((DestinationTn == null && other.DestinationTn == null) || (DestinationTn?.Equals(other.DestinationTn) == true)) &&
                ((MessageStatus == null && other.MessageStatus == null) || (MessageStatus?.Equals(other.MessageStatus) == true)) &&
                ((MessageDirection == null && other.MessageDirection == null) || (MessageDirection?.Equals(other.MessageDirection) == true)) &&
                ((MessageType == null && other.MessageType == null) || (MessageType?.Equals(other.MessageType) == true)) &&
                ((SegmentCount == null && other.SegmentCount == null) || (SegmentCount?.Equals(other.SegmentCount) == true)) &&
                ((ErrorCode == null && other.ErrorCode == null) || (ErrorCode?.Equals(other.ErrorCode) == true)) &&
                ((ReceiveTime == null && other.ReceiveTime == null) || (ReceiveTime?.Equals(other.ReceiveTime) == true)) &&
                ((CarrierName == null && other.CarrierName == null) || (CarrierName?.Equals(other.CarrierName) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 498628859;

            if (MessageId != null)
            {
               hashCode += MessageId.GetHashCode();
            }

            if (AccountId != null)
            {
               hashCode += AccountId.GetHashCode();
            }

            if (SourceTn != null)
            {
               hashCode += SourceTn.GetHashCode();
            }

            if (DestinationTn != null)
            {
               hashCode += DestinationTn.GetHashCode();
            }

            if (MessageStatus != null)
            {
               hashCode += MessageStatus.GetHashCode();
            }

            if (MessageDirection != null)
            {
               hashCode += MessageDirection.GetHashCode();
            }

            if (MessageType != null)
            {
               hashCode += MessageType.GetHashCode();
            }

            if (SegmentCount != null)
            {
               hashCode += SegmentCount.GetHashCode();
            }

            if (ErrorCode != null)
            {
               hashCode += ErrorCode.GetHashCode();
            }

            if (ReceiveTime != null)
            {
               hashCode += ReceiveTime.GetHashCode();
            }

            if (CarrierName != null)
            {
               hashCode += CarrierName.GetHashCode();
            }

            return hashCode;
        }

    }
}