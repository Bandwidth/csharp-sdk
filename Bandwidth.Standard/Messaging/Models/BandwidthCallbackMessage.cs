/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Messaging.Models
{
    public class BandwidthCallbackMessage 
    {
        public BandwidthCallbackMessage() { }

        public BandwidthCallbackMessage(string time = null,
            string type = null,
            string to = null,
            string errorCode = null,
            string description = null,
            Models.BandwidthMessage message = null)
        {
            Time = time;
            Type = type;
            To = to;
            ErrorCode = errorCode;
            Description = description;
            Message = message;
        }

        /// <summary>
        /// Getter for time
        /// </summary>
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        /// <summary>
        /// Getter for type
        /// </summary>
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Getter for to
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public string To { get; set; }

        /// <summary>
        /// Getter for errorCode
        /// </summary>
        [JsonProperty("errorCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Getter for description
        /// </summary>
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Getter for message
        /// </summary>
        [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
        public Models.BandwidthMessage Message { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"BandwidthCallbackMessage : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Time = {(Time == null ? "null" : Time == string.Empty ? "" : Time)}");
            toStringOutput.Add($"Type = {(Type == null ? "null" : Type == string.Empty ? "" : Type)}");
            toStringOutput.Add($"To = {(To == null ? "null" : To == string.Empty ? "" : To)}");
            toStringOutput.Add($"ErrorCode = {(ErrorCode == null ? "null" : ErrorCode == string.Empty ? "" : ErrorCode)}");
            toStringOutput.Add($"Description = {(Description == null ? "null" : Description == string.Empty ? "" : Description)}");
            toStringOutput.Add($"Message = {(Message == null ? "null" : Message.ToString())}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is BandwidthCallbackMessage other &&
                ((Time == null && other.Time == null) || (Time?.Equals(other.Time) == true)) &&
                ((Type == null && other.Type == null) || (Type?.Equals(other.Type) == true)) &&
                ((To == null && other.To == null) || (To?.Equals(other.To) == true)) &&
                ((ErrorCode == null && other.ErrorCode == null) || (ErrorCode?.Equals(other.ErrorCode) == true)) &&
                ((Description == null && other.Description == null) || (Description?.Equals(other.Description) == true)) &&
                ((Message == null && other.Message == null) || (Message?.Equals(other.Message) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -419618432;

            if (Time != null)
            {
               hashCode += Time.GetHashCode();
            }

            if (Type != null)
            {
               hashCode += Type.GetHashCode();
            }

            if (To != null)
            {
               hashCode += To.GetHashCode();
            }

            if (ErrorCode != null)
            {
               hashCode += ErrorCode.GetHashCode();
            }

            if (Description != null)
            {
               hashCode += Description.GetHashCode();
            }

            if (Message != null)
            {
               hashCode += Message.GetHashCode();
            }

            return hashCode;
        }

    }
}