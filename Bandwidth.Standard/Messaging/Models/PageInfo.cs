/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Messaging.Models
{
    public class PageInfo 
    {
        public PageInfo() { }

        public PageInfo(string prevPage = null,
            string nextPage = null,
            string prevPageToken = null,
            string nextPageToken = null)
        {
            PrevPage = prevPage;
            NextPage = nextPage;
            PrevPageToken = prevPageToken;
            NextPageToken = nextPageToken;
        }

        /// <summary>
        /// The link to the previous page for pagination
        /// </summary>
        [JsonProperty("prevPage", NullValueHandling = NullValueHandling.Ignore)]
        public string PrevPage { get; set; }

        /// <summary>
        /// The link to the next page for pagination
        /// </summary>
        [JsonProperty("nextPage", NullValueHandling = NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// The isolated pagination token for the previous page
        /// </summary>
        [JsonProperty("prevPageToken", NullValueHandling = NullValueHandling.Ignore)]
        public string PrevPageToken { get; set; }

        /// <summary>
        /// The isolated pagination token for the next page
        /// </summary>
        [JsonProperty("nextPageToken", NullValueHandling = NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"PageInfo : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"PrevPage = {(PrevPage == null ? "null" : PrevPage == string.Empty ? "" : PrevPage)}");
            toStringOutput.Add($"NextPage = {(NextPage == null ? "null" : NextPage == string.Empty ? "" : NextPage)}");
            toStringOutput.Add($"PrevPageToken = {(PrevPageToken == null ? "null" : PrevPageToken == string.Empty ? "" : PrevPageToken)}");
            toStringOutput.Add($"NextPageToken = {(NextPageToken == null ? "null" : NextPageToken == string.Empty ? "" : NextPageToken)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is PageInfo other &&
                ((PrevPage == null && other.PrevPage == null) || (PrevPage?.Equals(other.PrevPage) == true)) &&
                ((NextPage == null && other.NextPage == null) || (NextPage?.Equals(other.NextPage) == true)) &&
                ((PrevPageToken == null && other.PrevPageToken == null) || (PrevPageToken?.Equals(other.PrevPageToken) == true)) &&
                ((NextPageToken == null && other.NextPageToken == null) || (NextPageToken?.Equals(other.NextPageToken) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -1830408517;

            if (PrevPage != null)
            {
               hashCode += PrevPage.GetHashCode();
            }

            if (NextPage != null)
            {
               hashCode += NextPage.GetHashCode();
            }

            if (PrevPageToken != null)
            {
               hashCode += PrevPageToken.GetHashCode();
            }

            if (NextPageToken != null)
            {
               hashCode += NextPageToken.GetHashCode();
            }

            return hashCode;
        }

    }
}