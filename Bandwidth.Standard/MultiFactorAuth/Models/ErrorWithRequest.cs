/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.MultiFactorAuth.Models
{
    public class ErrorWithRequest 
    {
        public ErrorWithRequest() { }

        public ErrorWithRequest(string error = null,
            string requestId = null)
        {
            Error = error;
            RequestId = requestId;
        }

        /// <summary>
        /// An error message pertaining to what the issue could be
        /// </summary>
        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public string Error { get; set; }

        /// <summary>
        /// The associated requestId from AWS
        /// </summary>
        [JsonProperty("requestId", NullValueHandling = NullValueHandling.Ignore)]
        public string RequestId { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ErrorWithRequest : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Error = {(Error == null ? "null" : Error == string.Empty ? "" : Error)}");
            toStringOutput.Add($"RequestId = {(RequestId == null ? "null" : RequestId == string.Empty ? "" : RequestId)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ErrorWithRequest other &&
                ((Error == null && other.Error == null) || (Error?.Equals(other.Error) == true)) &&
                ((RequestId == null && other.RequestId == null) || (RequestId?.Equals(other.RequestId) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -1751201851;

            if (Error != null)
            {
               hashCode += Error.GetHashCode();
            }

            if (RequestId != null)
            {
               hashCode += RequestId.GetHashCode();
            }

            return hashCode;
        }

    }
}