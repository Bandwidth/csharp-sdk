/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.MultiFactorAuth.Models
{
    public class TwoFactorVerifyRequestSchema 
    {
        public TwoFactorVerifyRequestSchema() { }

        public TwoFactorVerifyRequestSchema(string to,
            string applicationId,
            double expirationTimeInMinutes,
            string code,
            string scope = null)
        {
            To = to;
            ApplicationId = applicationId;
            Scope = scope;
            ExpirationTimeInMinutes = expirationTimeInMinutes;
            Code = code;
        }

        /// <summary>
        /// The phone number to send the 2fa code to.
        /// </summary>
        [JsonProperty("to")]
        public string To { get; set; }

        /// <summary>
        /// The application unique ID, obtained from Bandwidth.
        /// </summary>
        [JsonProperty("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// An optional field to denote what scope or action the 2fa code is addressing.  If not supplied, defaults to "2FA".
        /// </summary>
        [JsonProperty("scope", NullValueHandling = NullValueHandling.Ignore)]
        public string Scope { get; set; }

        /// <summary>
        /// The time period, in minutes, to validate the 2fa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.
        /// </summary>
        [JsonProperty("expirationTimeInMinutes")]
        public double ExpirationTimeInMinutes { get; set; }

        /// <summary>
        /// The generated 2fa code to check if valid
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"TwoFactorVerifyRequestSchema : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"To = {(To == null ? "null" : To == string.Empty ? "" : To)}");
            toStringOutput.Add($"ApplicationId = {(ApplicationId == null ? "null" : ApplicationId == string.Empty ? "" : ApplicationId)}");
            toStringOutput.Add($"Scope = {(Scope == null ? "null" : Scope == string.Empty ? "" : Scope)}");
            toStringOutput.Add($"ExpirationTimeInMinutes = {ExpirationTimeInMinutes}");
            toStringOutput.Add($"Code = {(Code == null ? "null" : Code == string.Empty ? "" : Code)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is TwoFactorVerifyRequestSchema other &&
                ((To == null && other.To == null) || (To?.Equals(other.To) == true)) &&
                ((ApplicationId == null && other.ApplicationId == null) || (ApplicationId?.Equals(other.ApplicationId) == true)) &&
                ((Scope == null && other.Scope == null) || (Scope?.Equals(other.Scope) == true)) &&
                ExpirationTimeInMinutes.Equals(other.ExpirationTimeInMinutes) &&
                ((Code == null && other.Code == null) || (Code?.Equals(other.Code) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -2106512680;

            if (To != null)
            {
               hashCode += To.GetHashCode();
            }

            if (ApplicationId != null)
            {
               hashCode += ApplicationId.GetHashCode();
            }

            if (Scope != null)
            {
               hashCode += Scope.GetHashCode();
            }
            hashCode += ExpirationTimeInMinutes.GetHashCode();

            if (Code != null)
            {
               hashCode += Code.GetHashCode();
            }

            return hashCode;
        }

    }
}