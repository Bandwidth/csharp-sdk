/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;
using Bandwidth.Standard.Http.Request;
using Bandwidth.Standard.Http.Response;
using Bandwidth.Standard.Http.Client;
using Bandwidth.Standard.Authentication;
using Bandwidth.Standard.Voice.Exceptions;
using Bandwidth.Standard.Exceptions;

namespace Bandwidth.Standard.Voice.Controllers
{
    public class APIController : BaseController
    {
        internal APIController(IConfiguration config, IHttpClient httpClient, IDictionary<string, IAuthManager> authManagers, HttpCallBack httpCallBack = null) :
            base(config, httpClient, authManagers, httpCallBack)
        { }

        /// <summary>
        /// Creates an outbound call
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ApiCallResponse> response from the API call</return>
        public ApiResponse<Models.ApiCallResponse> CreateCall(string accountId, Models.ApiCreateCallRequest body = null)
        {
            Task<ApiResponse<Models.ApiCallResponse>> t = CreateCallAsync(accountId, body);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates an outbound call
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ApiCallResponse> response from the API call</return>
        public async Task<ApiResponse<Models.ApiCallResponse>> CreateCallAsync(string accountId, Models.ApiCreateCallRequest body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.ApiCallResponse>(_response.Body);
            ApiResponse<Models.ApiCallResponse> apiResponse = new ApiResponse<Models.ApiCallResponse>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Returns near-realtime metadata about the specified call
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ApiCallStateResponse> response from the API call</return>
        public ApiResponse<Models.ApiCallStateResponse> GetCallState(string accountId, string callId)
        {
            Task<ApiResponse<Models.ApiCallStateResponse>> t = GetCallStateAsync(accountId, callId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns near-realtime metadata about the specified call
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ApiCallStateResponse> response from the API call</return>
        public async Task<ApiResponse<Models.ApiCallStateResponse>> GetCallStateAsync(string accountId, string callId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.ApiCallStateResponse>(_response.Body);
            ApiResponse<Models.ApiCallStateResponse> apiResponse = new ApiResponse<Models.ApiCallStateResponse>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Interrupts and replaces an active call's BXML document
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void ModifyCall(string accountId, string callId, Models.ApiModifyCallRequest body = null)
        {
            Task t = ModifyCallAsync(accountId, callId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Interrupts and replaces an active call's BXML document
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task ModifyCallAsync(string accountId, string callId, Models.ApiModifyCallRequest body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Pauses or resumes a recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void ModifyCallRecordingState(string accountId, string callId, Models.ModifyCallRecordingState body = null)
        {
            Task t = ModifyCallRecordingStateAsync(accountId, callId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Pauses or resumes a recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task ModifyCallRecordingStateAsync(string accountId, string callId, Models.ModifyCallRecordingState body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recording");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PutBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.RecordingMetadataResponse>> response from the API call</return>
        public ApiResponse<List<Models.RecordingMetadataResponse>> GetQueryMetadataForAccountAndCall(string accountId, string callId)
        {
            Task<ApiResponse<List<Models.RecordingMetadataResponse>>> t = GetQueryMetadataForAccountAndCallAsync(accountId, callId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.RecordingMetadataResponse>> response from the API call</return>
        public async Task<ApiResponse<List<Models.RecordingMetadataResponse>>> GetQueryMetadataForAccountAndCallAsync(string accountId, string callId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<List<Models.RecordingMetadataResponse>>(_response.Body);
            ApiResponse<List<Models.RecordingMetadataResponse>> apiResponse = new ApiResponse<List<Models.RecordingMetadataResponse>>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Returns metadata for the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.RecordingMetadataResponse> response from the API call</return>
        public ApiResponse<Models.RecordingMetadataResponse> GetMetadataForRecording(string accountId, string callId, string recordingId)
        {
            Task<ApiResponse<Models.RecordingMetadataResponse>> t = GetMetadataForRecordingAsync(accountId, callId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns metadata for the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.RecordingMetadataResponse> response from the API call</return>
        public async Task<ApiResponse<Models.RecordingMetadataResponse>> GetMetadataForRecordingAsync(string accountId, string callId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.RecordingMetadataResponse>(_response.Body);
            ApiResponse<Models.RecordingMetadataResponse> apiResponse = new ApiResponse<Models.RecordingMetadataResponse>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Deletes the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteRecording(string accountId, string callId, string recordingId)
        {
            Task t = DeleteRecordingAsync(accountId, callId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteRecordingAsync(string accountId, string callId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Downloads the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Stream> response from the API call</return>
        public ApiResponse<Stream> GetStreamRecordingMedia(string accountId, string callId, string recordingId)
        {
            Task<ApiResponse<Stream>> t = GetStreamRecordingMediaAsync(accountId, callId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Downloads the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Stream> response from the API call</return>
        public async Task<ApiResponse<Stream>> GetStreamRecordingMediaAsync(string accountId, string callId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpResponse _response = await GetClientInstance().ExecuteAsBinaryAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

                var _result = _response.RawBody;
            ApiResponse<Stream> apiResponse = new ApiResponse<Stream>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Deletes the specified recording's media
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteRecordingMedia(string accountId, string callId, string recordingId)
        {
            Task t = DeleteRecordingMediaAsync(accountId, callId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes the specified recording's media
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteRecordingMediaAsync(string accountId, string callId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Downloads the specified transcription
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.TranscriptionResponse> response from the API call</return>
        public ApiResponse<Models.TranscriptionResponse> GetRecordingTranscription(string accountId, string callId, string recordingId)
        {
            Task<ApiResponse<Models.TranscriptionResponse>> t = GetRecordingTranscriptionAsync(accountId, callId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Downloads the specified transcription
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.TranscriptionResponse> response from the API call</return>
        public async Task<ApiResponse<Models.TranscriptionResponse>> GetRecordingTranscriptionAsync(string accountId, string callId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.TranscriptionResponse>(_response.Body);
            ApiResponse<Models.TranscriptionResponse> apiResponse = new ApiResponse<Models.TranscriptionResponse>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Requests that the specified recording be transcribed
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateTranscribeRecording(
                string accountId,
                string callId,
                string recordingId,
                Models.ApiTranscribeRecordingRequest body = null)
        {
            Task t = CreateTranscribeRecordingAsync(accountId, callId, recordingId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Requests that the specified recording be transcribed
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateTranscribeRecordingAsync(
                string accountId,
                string callId,
                string recordingId,
                Models.ApiTranscribeRecordingRequest body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 410)
            {
                throw new ApiErrorResponseErrorException("The media for this recording has been deleted, so we can't transcribe it", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Deletes the specified recording's transcription
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteRecordingTranscription(string accountId, string callId, string recordingId)
        {
            Task t = DeleteRecordingTranscriptionAsync(accountId, callId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes the specified recording's transcription
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteRecordingTranscriptionAsync(string accountId, string callId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "callId", callId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Delete(_queryBuilder.ToString(), _headers, null);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns information about the conferences in the account
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="pageSize">Optional parameter: Example: 1000</param>
        /// <param name="pageToken">Optional parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="minCreatedTime">Optional parameter: Example: </param>
        /// <param name="maxCreatedTime">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.ConferenceDetail>> response from the API call</return>
        public ApiResponse<List<Models.ConferenceDetail>> GetConferencesByAccount(
                string accountId,
                int? pageSize = 1000,
                string pageToken = null,
                string name = null,
                string minCreatedTime = null,
                string maxCreatedTime = null)
        {
            Task<ApiResponse<List<Models.ConferenceDetail>>> t = GetConferencesByAccountAsync(accountId, pageSize, pageToken, name, minCreatedTime, maxCreatedTime);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns information about the conferences in the account
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="pageSize">Optional parameter: Example: 1000</param>
        /// <param name="pageToken">Optional parameter: Example: </param>
        /// <param name="name">Optional parameter: Example: </param>
        /// <param name="minCreatedTime">Optional parameter: Example: </param>
        /// <param name="maxCreatedTime">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.ConferenceDetail>> response from the API call</return>
        public async Task<ApiResponse<List<Models.ConferenceDetail>>> GetConferencesByAccountAsync(
                string accountId,
                int? pageSize = 1000,
                string pageToken = null,
                string name = null,
                string minCreatedTime = null,
                string maxCreatedTime = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //prepare specfied query parameters
            var _queryParameters = new Dictionary<string, object>()
            {
                { "pageSize", (null != pageSize) ? pageSize : 1000 },
                { "pageToken", pageToken },
                { "name", name },
                { "minCreatedTime", minCreatedTime },
                { "maxCreatedTime", maxCreatedTime }
            };

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers, queryParameters: _queryParameters);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<List<Models.ConferenceDetail>>(_response.Body);
            ApiResponse<List<Models.ConferenceDetail>> apiResponse = new ApiResponse<List<Models.ConferenceDetail>>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Returns information about the specified conference
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ConferenceDetail> response from the API call</return>
        public ApiResponse<Models.ConferenceDetail> GetConferenceById(string accountId, string conferenceId)
        {
            Task<ApiResponse<Models.ConferenceDetail>> t = GetConferenceByIdAsync(accountId, conferenceId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns information about the specified conference
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ConferenceDetail> response from the API call</return>
        public async Task<ApiResponse<Models.ConferenceDetail>> GetConferenceByIdAsync(string accountId, string conferenceId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.ConferenceDetail>(_response.Body);
            ApiResponse<Models.ConferenceDetail> apiResponse = new ApiResponse<Models.ConferenceDetail>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Modify the conference state
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void ModifyConference(string accountId, string conferenceId, Models.ApiModifyConferenceRequest body = null)
        {
            Task t = ModifyConferenceAsync(accountId, conferenceId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Modify the conference state
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task ModifyConferenceAsync(string accountId, string conferenceId, Models.ApiModifyConferenceRequest body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PostBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Updates settings for a particular conference member
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void ModifyConferenceMember(
                string accountId,
                string conferenceId,
                string callId,
                Models.ConferenceMemberDetail body = null)
        {
            Task t = ModifyConferenceMemberAsync(accountId, conferenceId, callId, body);
            ApiHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Updates settings for a particular conference member
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="callId">Required parameter: Example: </param>
        /// <param name="body">Optional parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task ModifyConferenceMemberAsync(
                string accountId,
                string conferenceId,
                string callId,
                Models.ConferenceMemberDetail body = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{callId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId },
                { "callId", callId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = ApiHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().PutBody(_queryBuilder.ToString(), _headers, _body);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns information about the specified conference member
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="memberId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ConferenceMemberDetail> response from the API call</return>
        public ApiResponse<Models.ConferenceMemberDetail> GetConferenceMember(string accountId, string conferenceId, string memberId)
        {
            Task<ApiResponse<Models.ConferenceMemberDetail>> t = GetConferenceMemberAsync(accountId, conferenceId, memberId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns information about the specified conference member
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="memberId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.ConferenceMemberDetail> response from the API call</return>
        public async Task<ApiResponse<Models.ConferenceMemberDetail>> GetConferenceMemberAsync(string accountId, string conferenceId, string memberId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId },
                { "memberId", memberId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.ConferenceMemberDetail>(_response.Body);
            ApiResponse<Models.ConferenceMemberDetail> apiResponse = new ApiResponse<Models.ConferenceMemberDetail>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.ConferenceRecordingMetadataResponse>> response from the API call</return>
        public ApiResponse<List<Models.ConferenceRecordingMetadataResponse>> GetQueryMetadataForAccountAndConference(string accountId, string conferenceId)
        {
            Task<ApiResponse<List<Models.ConferenceRecordingMetadataResponse>>> t = GetQueryMetadataForAccountAndConferenceAsync(accountId, conferenceId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.ConferenceRecordingMetadataResponse>> response from the API call</return>
        public async Task<ApiResponse<List<Models.ConferenceRecordingMetadataResponse>>> GetQueryMetadataForAccountAndConferenceAsync(string accountId, string conferenceId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<List<Models.ConferenceRecordingMetadataResponse>>(_response.Body);
            ApiResponse<List<Models.ConferenceRecordingMetadataResponse>> apiResponse = new ApiResponse<List<Models.ConferenceRecordingMetadataResponse>>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Returns metadata for the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.RecordingMetadataResponse> response from the API call</return>
        public ApiResponse<Models.RecordingMetadataResponse> GetMetadataForConferenceRecording(string accountId, string conferenceId, string recordingId)
        {
            Task<ApiResponse<Models.RecordingMetadataResponse>> t = GetMetadataForConferenceRecordingAsync(accountId, conferenceId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns metadata for the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Models.RecordingMetadataResponse> response from the API call</return>
        public async Task<ApiResponse<Models.RecordingMetadataResponse>> GetMetadataForConferenceRecordingAsync(string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<Models.RecordingMetadataResponse>(_response.Body);
            ApiResponse<Models.RecordingMetadataResponse> apiResponse = new ApiResponse<Models.RecordingMetadataResponse>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Downloads the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Stream> response from the API call</return>
        public ApiResponse<Stream> GetStreamConferenceRecordingMedia(string accountId, string conferenceId, string recordingId)
        {
            Task<ApiResponse<Stream>> t = GetStreamConferenceRecordingMediaAsync(accountId, conferenceId, recordingId);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Downloads the specified recording
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="conferenceId">Required parameter: Example: </param>
        /// <param name="recordingId">Required parameter: Example: </param>
        /// <return>Returns the ApiResponse<Stream> response from the API call</return>
        public async Task<ApiResponse<Stream>> GetStreamConferenceRecordingMediaAsync(string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId },
                { "conferenceId", conferenceId },
                { "recordingId", recordingId }
            });

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpResponse _response = await GetClientInstance().ExecuteAsBinaryAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

                var _result = _response.RawBody;
            ApiResponse<Stream> apiResponse = new ApiResponse<Stream>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

        /// <summary>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="from">Optional parameter: Example: </param>
        /// <param name="to">Optional parameter: Example: </param>
        /// <param name="minStartTime">Optional parameter: Example: </param>
        /// <param name="maxStartTime">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.RecordingMetadataResponse>> response from the API call</return>
        public ApiResponse<List<Models.RecordingMetadataResponse>> GetQueryMetadataForAccount(
                string accountId,
                string from = null,
                string to = null,
                string minStartTime = null,
                string maxStartTime = null)
        {
            Task<ApiResponse<List<Models.RecordingMetadataResponse>>> t = GetQueryMetadataForAccountAsync(accountId, from, to, minStartTime, maxStartTime);
            ApiHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <param name="accountId">Required parameter: Example: </param>
        /// <param name="from">Optional parameter: Example: </param>
        /// <param name="to">Optional parameter: Example: </param>
        /// <param name="minStartTime">Optional parameter: Example: </param>
        /// <param name="maxStartTime">Optional parameter: Example: </param>
        /// <return>Returns the ApiResponse<List<Models.RecordingMetadataResponse>> response from the API call</return>
        public async Task<ApiResponse<List<Models.RecordingMetadataResponse>>> GetQueryMetadataForAccountAsync(
                string accountId,
                string from = null,
                string to = null,
                string minStartTime = null,
                string maxStartTime = null, CancellationToken cancellationToken = default)
        {
            //the base uri for api requests
            string _baseUri = config.GetBaseUri(Server.VoiceDefault);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/v2/accounts/{accountId}/recordings");

            //process optional template parameters
            ApiHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "accountId", accountId }
            });

            //prepare specfied query parameters
            var _queryParameters = new Dictionary<string, object>()
            {
                { "from", from },
                { "to", to },
                { "minStartTime", minStartTime },
                { "maxStartTime", maxStartTime }
            };

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string, string>()
            {
                { "user-agent", userAgent },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = GetClientInstance().Get(_queryBuilder.ToString(), _headers, queryParameters: _queryParameters);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnBeforeHttpRequestEventHandler(GetClientInstance(), _request);
            }

            _request = await authManagers["voice"].ApplyAsync(_request).ConfigureAwait(false);

            //invoke request and get response
            HttpStringResponse _response = await GetClientInstance().ExecuteAsStringAsync(_request, cancellationToken).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request, _response);
            if (HttpCallBack != null)
            {
                HttpCallBack.OnAfterHttpResponseEventHandler(GetClientInstance(), _response);
            }


            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
            {
                throw new ApiErrorResponseErrorException("Something's not quite right... Your request is invalid. Please fix it before trying again.", _context);
            }

            if (_response.StatusCode == 401)
            {
                throw new ApiException("Your credentials are invalid. Please use your Bandwidth dashboard credentials to authenticate to the API.", _context);
            }

            if (_response.StatusCode == 403)
            {
                throw new ApiErrorResponseErrorException("User unauthorized to perform this action.", _context);
            }

            if (_response.StatusCode == 404)
            {
                throw new ApiErrorResponseErrorException("The resource specified cannot be found or does not belong to you.", _context);
            }

            if (_response.StatusCode == 415)
            {
                throw new ApiErrorResponseErrorException("We don't support that media type. If a request body is required, please send it to us as `application/json`.", _context);
            }

            if (_response.StatusCode == 429)
            {
                throw new ApiErrorResponseErrorException("You're sending requests to this endpoint too frequently. Please slow your request rate down and try again.", _context);
            }

            if (_response.StatusCode == 500)
            {
                throw new ApiErrorResponseErrorException("Something unexpected happened. Please try again.", _context);
            }

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            var _result = ApiHelper.JsonDeserialize<List<Models.RecordingMetadataResponse>>(_response.Body);
            ApiResponse<List<Models.RecordingMetadataResponse>> apiResponse = new ApiResponse<List<Models.RecordingMetadataResponse>>(_response.StatusCode, _response.Headers, _result);
            return apiResponse;
        }

    }
}