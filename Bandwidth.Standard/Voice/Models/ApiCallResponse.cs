/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ApiCallResponse 
    {
        public ApiCallResponse() { }

        public ApiCallResponse(string accountId,
            string callId,
            string applicationId,
            string to,
            string from,
            string callUrl,
            string answerUrl,
            Models.AnswerMethodEnum answerMethod,
            Models.DisconnectMethodEnum disconnectMethod,
            DateTime? startTime = null,
            double? callTimeout = null,
            double? callbackTimeout = null,
            string answerFallbackUrl = null,
            Models.AnswerFallbackMethodEnum? answerFallbackMethod = null,
            string disconnectUrl = null,
            string username = null,
            string password = null,
            string fallbackUsername = null,
            string fallbackPassword = null,
            string tag = null)
        {
            AccountId = accountId;
            CallId = callId;
            ApplicationId = applicationId;
            To = to;
            From = from;
            StartTime = startTime;
            CallUrl = callUrl;
            CallTimeout = callTimeout;
            CallbackTimeout = callbackTimeout;
            AnswerUrl = answerUrl;
            AnswerMethod = answerMethod;
            AnswerFallbackUrl = answerFallbackUrl;
            AnswerFallbackMethod = answerFallbackMethod;
            DisconnectUrl = disconnectUrl;
            DisconnectMethod = disconnectMethod;
            Username = username;
            Password = password;
            FallbackUsername = fallbackUsername;
            FallbackPassword = fallbackPassword;
            Tag = tag;
        }

        /// <summary>
        /// Getter for accountId
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// Getter for callId
        /// </summary>
        [JsonProperty("callId")]
        public string CallId { get; set; }

        /// <summary>
        /// Getter for applicationId
        /// </summary>
        [JsonProperty("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Getter for to
        /// </summary>
        [JsonProperty("to")]
        public string To { get; set; }

        /// <summary>
        /// Getter for from
        /// </summary>
        [JsonProperty("from")]
        public string From { get; set; }

        /// <summary>
        /// Getter for startTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Getter for callUrl
        /// </summary>
        [JsonProperty("callUrl")]
        public string CallUrl { get; set; }

        /// <summary>
        /// Getter for callTimeout
        /// </summary>
        [JsonProperty("callTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallTimeout { get; set; }

        /// <summary>
        /// Getter for callbackTimeout
        /// </summary>
        [JsonProperty("callbackTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallbackTimeout { get; set; }

        /// <summary>
        /// Getter for answerUrl
        /// </summary>
        [JsonProperty("answerUrl")]
        public string AnswerUrl { get; set; }

        /// <summary>
        /// Getter for answerMethod
        /// </summary>
        [JsonProperty("answerMethod", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.AnswerMethodEnum AnswerMethod { get; set; }

        /// <summary>
        /// Getter for answerFallbackUrl
        /// </summary>
        [JsonProperty("answerFallbackUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string AnswerFallbackUrl { get; set; }

        /// <summary>
        /// Getter for answerFallbackMethod
        /// </summary>
        [JsonProperty("answerFallbackMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.AnswerFallbackMethodEnum? AnswerFallbackMethod { get; set; }

        /// <summary>
        /// Getter for disconnectUrl
        /// </summary>
        [JsonProperty("disconnectUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DisconnectUrl { get; set; }

        /// <summary>
        /// Getter for disconnectMethod
        /// </summary>
        [JsonProperty("disconnectMethod", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.DisconnectMethodEnum DisconnectMethod { get; set; }

        /// <summary>
        /// Getter for username
        /// </summary>
        [JsonProperty("username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// Getter for password
        /// </summary>
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Getter for fallbackUsername
        /// </summary>
        [JsonProperty("fallbackUsername", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackUsername { get; set; }

        /// <summary>
        /// Getter for fallbackPassword
        /// </summary>
        [JsonProperty("fallbackPassword", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackPassword { get; set; }

        /// <summary>
        /// Getter for tag
        /// </summary>
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ApiCallResponse : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"AccountId = {(AccountId == null ? "null" : AccountId == string.Empty ? "" : AccountId)}");
            toStringOutput.Add($"CallId = {(CallId == null ? "null" : CallId == string.Empty ? "" : CallId)}");
            toStringOutput.Add($"ApplicationId = {(ApplicationId == null ? "null" : ApplicationId == string.Empty ? "" : ApplicationId)}");
            toStringOutput.Add($"To = {(To == null ? "null" : To == string.Empty ? "" : To)}");
            toStringOutput.Add($"From = {(From == null ? "null" : From == string.Empty ? "" : From)}");
            toStringOutput.Add($"StartTime = {(StartTime == null ? "null" : StartTime.ToString())}");
            toStringOutput.Add($"CallUrl = {(CallUrl == null ? "null" : CallUrl == string.Empty ? "" : CallUrl)}");
            toStringOutput.Add($"CallTimeout = {(CallTimeout == null ? "null" : CallTimeout.ToString())}");
            toStringOutput.Add($"CallbackTimeout = {(CallbackTimeout == null ? "null" : CallbackTimeout.ToString())}");
            toStringOutput.Add($"AnswerUrl = {(AnswerUrl == null ? "null" : AnswerUrl == string.Empty ? "" : AnswerUrl)}");
            toStringOutput.Add($"AnswerMethod = {AnswerMethod}");
            toStringOutput.Add($"AnswerFallbackUrl = {(AnswerFallbackUrl == null ? "null" : AnswerFallbackUrl == string.Empty ? "" : AnswerFallbackUrl)}");
            toStringOutput.Add($"AnswerFallbackMethod = {(AnswerFallbackMethod == null ? "null" : AnswerFallbackMethod.ToString())}");
            toStringOutput.Add($"DisconnectUrl = {(DisconnectUrl == null ? "null" : DisconnectUrl == string.Empty ? "" : DisconnectUrl)}");
            toStringOutput.Add($"DisconnectMethod = {DisconnectMethod}");
            toStringOutput.Add($"Username = {(Username == null ? "null" : Username == string.Empty ? "" : Username)}");
            toStringOutput.Add($"Password = {(Password == null ? "null" : Password == string.Empty ? "" : Password)}");
            toStringOutput.Add($"FallbackUsername = {(FallbackUsername == null ? "null" : FallbackUsername == string.Empty ? "" : FallbackUsername)}");
            toStringOutput.Add($"FallbackPassword = {(FallbackPassword == null ? "null" : FallbackPassword == string.Empty ? "" : FallbackPassword)}");
            toStringOutput.Add($"Tag = {(Tag == null ? "null" : Tag == string.Empty ? "" : Tag)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ApiCallResponse other &&
                ((AccountId == null && other.AccountId == null) || (AccountId?.Equals(other.AccountId) == true)) &&
                ((CallId == null && other.CallId == null) || (CallId?.Equals(other.CallId) == true)) &&
                ((ApplicationId == null && other.ApplicationId == null) || (ApplicationId?.Equals(other.ApplicationId) == true)) &&
                ((To == null && other.To == null) || (To?.Equals(other.To) == true)) &&
                ((From == null && other.From == null) || (From?.Equals(other.From) == true)) &&
                ((StartTime == null && other.StartTime == null) || (StartTime?.Equals(other.StartTime) == true)) &&
                ((CallUrl == null && other.CallUrl == null) || (CallUrl?.Equals(other.CallUrl) == true)) &&
                ((CallTimeout == null && other.CallTimeout == null) || (CallTimeout?.Equals(other.CallTimeout) == true)) &&
                ((CallbackTimeout == null && other.CallbackTimeout == null) || (CallbackTimeout?.Equals(other.CallbackTimeout) == true)) &&
                ((AnswerUrl == null && other.AnswerUrl == null) || (AnswerUrl?.Equals(other.AnswerUrl) == true)) &&
                AnswerMethod.Equals(other.AnswerMethod) &&
                ((AnswerFallbackUrl == null && other.AnswerFallbackUrl == null) || (AnswerFallbackUrl?.Equals(other.AnswerFallbackUrl) == true)) &&
                ((AnswerFallbackMethod == null && other.AnswerFallbackMethod == null) || (AnswerFallbackMethod?.Equals(other.AnswerFallbackMethod) == true)) &&
                ((DisconnectUrl == null && other.DisconnectUrl == null) || (DisconnectUrl?.Equals(other.DisconnectUrl) == true)) &&
                DisconnectMethod.Equals(other.DisconnectMethod) &&
                ((Username == null && other.Username == null) || (Username?.Equals(other.Username) == true)) &&
                ((Password == null && other.Password == null) || (Password?.Equals(other.Password) == true)) &&
                ((FallbackUsername == null && other.FallbackUsername == null) || (FallbackUsername?.Equals(other.FallbackUsername) == true)) &&
                ((FallbackPassword == null && other.FallbackPassword == null) || (FallbackPassword?.Equals(other.FallbackPassword) == true)) &&
                ((Tag == null && other.Tag == null) || (Tag?.Equals(other.Tag) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 1215759600;

            if (AccountId != null)
            {
               hashCode += AccountId.GetHashCode();
            }

            if (CallId != null)
            {
               hashCode += CallId.GetHashCode();
            }

            if (ApplicationId != null)
            {
               hashCode += ApplicationId.GetHashCode();
            }

            if (To != null)
            {
               hashCode += To.GetHashCode();
            }

            if (From != null)
            {
               hashCode += From.GetHashCode();
            }

            if (StartTime != null)
            {
               hashCode += StartTime.GetHashCode();
            }

            if (CallUrl != null)
            {
               hashCode += CallUrl.GetHashCode();
            }

            if (CallTimeout != null)
            {
               hashCode += CallTimeout.GetHashCode();
            }

            if (CallbackTimeout != null)
            {
               hashCode += CallbackTimeout.GetHashCode();
            }

            if (AnswerUrl != null)
            {
               hashCode += AnswerUrl.GetHashCode();
            }
            hashCode += AnswerMethod.GetHashCode();

            if (AnswerFallbackUrl != null)
            {
               hashCode += AnswerFallbackUrl.GetHashCode();
            }

            if (AnswerFallbackMethod != null)
            {
               hashCode += AnswerFallbackMethod.GetHashCode();
            }

            if (DisconnectUrl != null)
            {
               hashCode += DisconnectUrl.GetHashCode();
            }
            hashCode += DisconnectMethod.GetHashCode();

            if (Username != null)
            {
               hashCode += Username.GetHashCode();
            }

            if (Password != null)
            {
               hashCode += Password.GetHashCode();
            }

            if (FallbackUsername != null)
            {
               hashCode += FallbackUsername.GetHashCode();
            }

            if (FallbackPassword != null)
            {
               hashCode += FallbackPassword.GetHashCode();
            }

            if (Tag != null)
            {
               hashCode += Tag.GetHashCode();
            }

            return hashCode;
        }

    }
}