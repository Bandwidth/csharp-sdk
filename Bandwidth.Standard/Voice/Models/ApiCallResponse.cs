/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ApiCallResponse 
    {
        public ApiCallResponse() { }

        public ApiCallResponse(string accountId,
            string callId,
            string applicationId,
            string to,
            string from,
            string callUrl,
            string answerUrl,
            Models.AnswerMethodEnum answerMethod,
            Models.DisconnectMethodEnum disconnectMethod,
            DateTime? startTime = null,
            double? callTimeout = null,
            double? callbackTimeout = null,
            string answerFallbackUrl = null,
            Models.AnswerFallbackMethodEnum? answerFallbackMethod = null,
            string disconnectUrl = null,
            string username = null,
            string password = null,
            string fallbackUsername = null,
            string fallbackPassword = null,
            string tag = null)
        {
            AccountId = accountId;
            CallId = callId;
            ApplicationId = applicationId;
            To = to;
            From = from;
            StartTime = startTime;
            CallUrl = callUrl;
            CallTimeout = callTimeout;
            CallbackTimeout = callbackTimeout;
            AnswerUrl = answerUrl;
            AnswerMethod = answerMethod;
            AnswerFallbackUrl = answerFallbackUrl;
            AnswerFallbackMethod = answerFallbackMethod;
            DisconnectUrl = disconnectUrl;
            DisconnectMethod = disconnectMethod;
            Username = username;
            Password = password;
            FallbackUsername = fallbackUsername;
            FallbackPassword = fallbackPassword;
            Tag = tag;
        }

        /// <summary>
        /// Getter for accountId
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// Getter for callId
        /// </summary>
        [JsonProperty("callId")]
        public string CallId { get; set; }

        /// <summary>
        /// Getter for applicationId
        /// </summary>
        [JsonProperty("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Getter for to
        /// </summary>
        [JsonProperty("to")]
        public string To { get; set; }

        /// <summary>
        /// Getter for from
        /// </summary>
        [JsonProperty("from")]
        public string From { get; set; }

        /// <summary>
        /// Getter for startTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Getter for callUrl
        /// </summary>
        [JsonProperty("callUrl")]
        public string CallUrl { get; set; }

        /// <summary>
        /// Getter for callTimeout
        /// </summary>
        [JsonProperty("callTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallTimeout { get; set; }

        /// <summary>
        /// Getter for callbackTimeout
        /// </summary>
        [JsonProperty("callbackTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallbackTimeout { get; set; }

        /// <summary>
        /// Getter for answerUrl
        /// </summary>
        [JsonProperty("answerUrl")]
        public string AnswerUrl { get; set; }

        /// <summary>
        /// Getter for answerMethod
        /// </summary>
        [JsonProperty("answerMethod", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.AnswerMethodEnum AnswerMethod { get; set; }

        /// <summary>
        /// Getter for answerFallbackUrl
        /// </summary>
        [JsonProperty("answerFallbackUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string AnswerFallbackUrl { get; set; }

        /// <summary>
        /// Getter for answerFallbackMethod
        /// </summary>
        [JsonProperty("answerFallbackMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.AnswerFallbackMethodEnum? AnswerFallbackMethod { get; set; }

        /// <summary>
        /// Getter for disconnectUrl
        /// </summary>
        [JsonProperty("disconnectUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DisconnectUrl { get; set; }

        /// <summary>
        /// Getter for disconnectMethod
        /// </summary>
        [JsonProperty("disconnectMethod", ItemConverterType = typeof(StringValuedEnumConverter))]
        public Models.DisconnectMethodEnum DisconnectMethod { get; set; }

        /// <summary>
        /// Getter for username
        /// </summary>
        [JsonProperty("username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// Getter for password
        /// </summary>
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Getter for fallbackUsername
        /// </summary>
        [JsonProperty("fallbackUsername", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackUsername { get; set; }

        /// <summary>
        /// Getter for fallbackPassword
        /// </summary>
        [JsonProperty("fallbackPassword", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackPassword { get; set; }

        /// <summary>
        /// Getter for tag
        /// </summary>
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

    }
}