/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ApiCallStateResponse 
    {
        public ApiCallStateResponse() { }

        public ApiCallStateResponse(string callId = null,
            string parentCallId = null,
            string applicationId = null,
            string accountId = null,
            string to = null,
            string from = null,
            string direction = null,
            Models.StateEnum? state = null,
            string identity = null,
            Dictionary<string, string> pai = null,
            DateTime? startTime = null,
            DateTime? answerTime = null,
            DateTime? endTime = null,
            Models.DisconnectCauseEnum? disconnectCause = null,
            string errorMessage = null,
            string errorId = null,
            DateTime? lastUpdate = null)
        {
            CallId = callId;
            ParentCallId = parentCallId;
            ApplicationId = applicationId;
            AccountId = accountId;
            To = to;
            From = from;
            Direction = direction;
            State = state;
            Identity = identity;
            Pai = pai;
            StartTime = startTime;
            AnswerTime = answerTime;
            EndTime = endTime;
            DisconnectCause = disconnectCause;
            ErrorMessage = errorMessage;
            ErrorId = errorId;
            LastUpdate = lastUpdate;
        }

        /// <summary>
        /// Getter for callId
        /// </summary>
        [JsonProperty("callId", NullValueHandling = NullValueHandling.Ignore)]
        public string CallId { get; set; }

        /// <summary>
        /// Getter for parentCallId
        /// </summary>
        [JsonProperty("parentCallId", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentCallId { get; set; }

        /// <summary>
        /// Getter for applicationId
        /// </summary>
        [JsonProperty("applicationId", NullValueHandling = NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Getter for accountId
        /// </summary>
        [JsonProperty("accountId", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Getter for to
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public string To { get; set; }

        /// <summary>
        /// Getter for from
        /// </summary>
        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// Getter for direction
        /// </summary>
        [JsonProperty("direction", NullValueHandling = NullValueHandling.Ignore)]
        public string Direction { get; set; }

        /// <summary>
        /// Getter for state
        /// </summary>
        [JsonProperty("state", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.StateEnum? State { get; set; }

        /// <summary>
        /// Getter for identity
        /// </summary>
        [JsonProperty("identity", NullValueHandling = NullValueHandling.Ignore)]
        public string Identity { get; set; }

        /// <summary>
        /// Getter for pai
        /// </summary>
        [JsonProperty("pai", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string> Pai { get; set; }

        /// <summary>
        /// Getter for startTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Getter for answerTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("answerTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? AnswerTime { get; set; }

        /// <summary>
        /// Getter for endTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("endTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Getter for disconnectCause
        /// </summary>
        [JsonProperty("disconnectCause", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.DisconnectCauseEnum? DisconnectCause { get; set; }

        /// <summary>
        /// Getter for errorMessage
        /// </summary>
        [JsonProperty("errorMessage", NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Getter for errorId
        /// </summary>
        [JsonProperty("errorId", NullValueHandling = NullValueHandling.Ignore)]
        public string ErrorId { get; set; }

        /// <summary>
        /// Getter for lastUpdate
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("lastUpdate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? LastUpdate { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ApiCallStateResponse : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"CallId = {(CallId == null ? "null" : CallId == string.Empty ? "" : CallId)}");
            toStringOutput.Add($"ParentCallId = {(ParentCallId == null ? "null" : ParentCallId == string.Empty ? "" : ParentCallId)}");
            toStringOutput.Add($"ApplicationId = {(ApplicationId == null ? "null" : ApplicationId == string.Empty ? "" : ApplicationId)}");
            toStringOutput.Add($"AccountId = {(AccountId == null ? "null" : AccountId == string.Empty ? "" : AccountId)}");
            toStringOutput.Add($"To = {(To == null ? "null" : To == string.Empty ? "" : To)}");
            toStringOutput.Add($"From = {(From == null ? "null" : From == string.Empty ? "" : From)}");
            toStringOutput.Add($"Direction = {(Direction == null ? "null" : Direction == string.Empty ? "" : Direction)}");
            toStringOutput.Add($"State = {(State == null ? "null" : State.ToString())}");
            toStringOutput.Add($"Identity = {(Identity == null ? "null" : Identity == string.Empty ? "" : Identity)}");
            toStringOutput.Add($"Pai = {(Pai == null ? "null" : Pai.ToString())}");
            toStringOutput.Add($"StartTime = {(StartTime == null ? "null" : StartTime.ToString())}");
            toStringOutput.Add($"AnswerTime = {(AnswerTime == null ? "null" : AnswerTime.ToString())}");
            toStringOutput.Add($"EndTime = {(EndTime == null ? "null" : EndTime.ToString())}");
            toStringOutput.Add($"DisconnectCause = {(DisconnectCause == null ? "null" : DisconnectCause.ToString())}");
            toStringOutput.Add($"ErrorMessage = {(ErrorMessage == null ? "null" : ErrorMessage == string.Empty ? "" : ErrorMessage)}");
            toStringOutput.Add($"ErrorId = {(ErrorId == null ? "null" : ErrorId == string.Empty ? "" : ErrorId)}");
            toStringOutput.Add($"LastUpdate = {(LastUpdate == null ? "null" : LastUpdate.ToString())}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ApiCallStateResponse other &&
                ((CallId == null && other.CallId == null) || (CallId?.Equals(other.CallId) == true)) &&
                ((ParentCallId == null && other.ParentCallId == null) || (ParentCallId?.Equals(other.ParentCallId) == true)) &&
                ((ApplicationId == null && other.ApplicationId == null) || (ApplicationId?.Equals(other.ApplicationId) == true)) &&
                ((AccountId == null && other.AccountId == null) || (AccountId?.Equals(other.AccountId) == true)) &&
                ((To == null && other.To == null) || (To?.Equals(other.To) == true)) &&
                ((From == null && other.From == null) || (From?.Equals(other.From) == true)) &&
                ((Direction == null && other.Direction == null) || (Direction?.Equals(other.Direction) == true)) &&
                ((State == null && other.State == null) || (State?.Equals(other.State) == true)) &&
                ((Identity == null && other.Identity == null) || (Identity?.Equals(other.Identity) == true)) &&
                ((Pai == null && other.Pai == null) || (Pai?.Equals(other.Pai) == true)) &&
                ((StartTime == null && other.StartTime == null) || (StartTime?.Equals(other.StartTime) == true)) &&
                ((AnswerTime == null && other.AnswerTime == null) || (AnswerTime?.Equals(other.AnswerTime) == true)) &&
                ((EndTime == null && other.EndTime == null) || (EndTime?.Equals(other.EndTime) == true)) &&
                ((DisconnectCause == null && other.DisconnectCause == null) || (DisconnectCause?.Equals(other.DisconnectCause) == true)) &&
                ((ErrorMessage == null && other.ErrorMessage == null) || (ErrorMessage?.Equals(other.ErrorMessage) == true)) &&
                ((ErrorId == null && other.ErrorId == null) || (ErrorId?.Equals(other.ErrorId) == true)) &&
                ((LastUpdate == null && other.LastUpdate == null) || (LastUpdate?.Equals(other.LastUpdate) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -1002659328;

            if (CallId != null)
            {
               hashCode += CallId.GetHashCode();
            }

            if (ParentCallId != null)
            {
               hashCode += ParentCallId.GetHashCode();
            }

            if (ApplicationId != null)
            {
               hashCode += ApplicationId.GetHashCode();
            }

            if (AccountId != null)
            {
               hashCode += AccountId.GetHashCode();
            }

            if (To != null)
            {
               hashCode += To.GetHashCode();
            }

            if (From != null)
            {
               hashCode += From.GetHashCode();
            }

            if (Direction != null)
            {
               hashCode += Direction.GetHashCode();
            }

            if (State != null)
            {
               hashCode += State.GetHashCode();
            }

            if (Identity != null)
            {
               hashCode += Identity.GetHashCode();
            }

            if (Pai != null)
            {
               hashCode += Pai.GetHashCode();
            }

            if (StartTime != null)
            {
               hashCode += StartTime.GetHashCode();
            }

            if (AnswerTime != null)
            {
               hashCode += AnswerTime.GetHashCode();
            }

            if (EndTime != null)
            {
               hashCode += EndTime.GetHashCode();
            }

            if (DisconnectCause != null)
            {
               hashCode += DisconnectCause.GetHashCode();
            }

            if (ErrorMessage != null)
            {
               hashCode += ErrorMessage.GetHashCode();
            }

            if (ErrorId != null)
            {
               hashCode += ErrorId.GetHashCode();
            }

            if (LastUpdate != null)
            {
               hashCode += LastUpdate.GetHashCode();
            }

            return hashCode;
        }

    }
}