/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ApiModifyConferenceRequest 
    {
        public ApiModifyConferenceRequest() { }

        public ApiModifyConferenceRequest(Models.StatusEnum? status = null,
            string redirectUrl = null,
            string redirectFallbackUrl = null,
            Models.RedirectMethodEnum? redirectMethod = null,
            Models.RedirectFallbackMethodEnum? redirectFallbackMethod = null,
            string username = null,
            string password = null,
            string fallbackUsername = null,
            string fallbackPassword = null)
        {
            Status = status;
            RedirectUrl = redirectUrl;
            RedirectFallbackUrl = redirectFallbackUrl;
            RedirectMethod = redirectMethod;
            RedirectFallbackMethod = redirectFallbackMethod;
            Username = username;
            Password = password;
            FallbackUsername = fallbackUsername;
            FallbackPassword = fallbackPassword;
        }

        /// <summary>
        /// Getter for status
        /// </summary>
        [JsonProperty("status", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.StatusEnum? Status { get; set; }

        /// <summary>
        /// Getter for redirectUrl
        /// </summary>
        [JsonProperty("redirectUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Getter for redirectFallbackUrl
        /// </summary>
        [JsonProperty("redirectFallbackUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string RedirectFallbackUrl { get; set; }

        /// <summary>
        /// Getter for redirectMethod
        /// </summary>
        [JsonProperty("redirectMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.RedirectMethodEnum? RedirectMethod { get; set; }

        /// <summary>
        /// Getter for redirectFallbackMethod
        /// </summary>
        [JsonProperty("redirectFallbackMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.RedirectFallbackMethodEnum? RedirectFallbackMethod { get; set; }

        /// <summary>
        /// Getter for username
        /// </summary>
        [JsonProperty("username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// Getter for password
        /// </summary>
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Getter for fallbackUsername
        /// </summary>
        [JsonProperty("fallbackUsername", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackUsername { get; set; }

        /// <summary>
        /// Getter for fallbackPassword
        /// </summary>
        [JsonProperty("fallbackPassword", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackPassword { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ApiModifyConferenceRequest : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Status = {(Status == null ? "null" : Status.ToString())}");
            toStringOutput.Add($"RedirectUrl = {(RedirectUrl == null ? "null" : RedirectUrl == string.Empty ? "" : RedirectUrl)}");
            toStringOutput.Add($"RedirectFallbackUrl = {(RedirectFallbackUrl == null ? "null" : RedirectFallbackUrl == string.Empty ? "" : RedirectFallbackUrl)}");
            toStringOutput.Add($"RedirectMethod = {(RedirectMethod == null ? "null" : RedirectMethod.ToString())}");
            toStringOutput.Add($"RedirectFallbackMethod = {(RedirectFallbackMethod == null ? "null" : RedirectFallbackMethod.ToString())}");
            toStringOutput.Add($"Username = {(Username == null ? "null" : Username == string.Empty ? "" : Username)}");
            toStringOutput.Add($"Password = {(Password == null ? "null" : Password == string.Empty ? "" : Password)}");
            toStringOutput.Add($"FallbackUsername = {(FallbackUsername == null ? "null" : FallbackUsername == string.Empty ? "" : FallbackUsername)}");
            toStringOutput.Add($"FallbackPassword = {(FallbackPassword == null ? "null" : FallbackPassword == string.Empty ? "" : FallbackPassword)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ApiModifyConferenceRequest other &&
                ((Status == null && other.Status == null) || (Status?.Equals(other.Status) == true)) &&
                ((RedirectUrl == null && other.RedirectUrl == null) || (RedirectUrl?.Equals(other.RedirectUrl) == true)) &&
                ((RedirectFallbackUrl == null && other.RedirectFallbackUrl == null) || (RedirectFallbackUrl?.Equals(other.RedirectFallbackUrl) == true)) &&
                ((RedirectMethod == null && other.RedirectMethod == null) || (RedirectMethod?.Equals(other.RedirectMethod) == true)) &&
                ((RedirectFallbackMethod == null && other.RedirectFallbackMethod == null) || (RedirectFallbackMethod?.Equals(other.RedirectFallbackMethod) == true)) &&
                ((Username == null && other.Username == null) || (Username?.Equals(other.Username) == true)) &&
                ((Password == null && other.Password == null) || (Password?.Equals(other.Password) == true)) &&
                ((FallbackUsername == null && other.FallbackUsername == null) || (FallbackUsername?.Equals(other.FallbackUsername) == true)) &&
                ((FallbackPassword == null && other.FallbackPassword == null) || (FallbackPassword?.Equals(other.FallbackPassword) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -276202593;

            if (Status != null)
            {
               hashCode += Status.GetHashCode();
            }

            if (RedirectUrl != null)
            {
               hashCode += RedirectUrl.GetHashCode();
            }

            if (RedirectFallbackUrl != null)
            {
               hashCode += RedirectFallbackUrl.GetHashCode();
            }

            if (RedirectMethod != null)
            {
               hashCode += RedirectMethod.GetHashCode();
            }

            if (RedirectFallbackMethod != null)
            {
               hashCode += RedirectFallbackMethod.GetHashCode();
            }

            if (Username != null)
            {
               hashCode += Username.GetHashCode();
            }

            if (Password != null)
            {
               hashCode += Password.GetHashCode();
            }

            if (FallbackUsername != null)
            {
               hashCode += FallbackUsername.GetHashCode();
            }

            if (FallbackPassword != null)
            {
               hashCode += FallbackPassword.GetHashCode();
            }

            return hashCode;
        }

    }
}