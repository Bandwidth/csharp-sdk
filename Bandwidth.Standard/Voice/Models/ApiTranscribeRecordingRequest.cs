/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ApiTranscribeRecordingRequest 
    {
        public ApiTranscribeRecordingRequest() { }

        public ApiTranscribeRecordingRequest(string callbackUrl = null,
            Models.CallbackMethodEnum? callbackMethod = null,
            string username = null,
            string password = null,
            string tag = null,
            double? callbackTimeout = null)
        {
            CallbackUrl = callbackUrl;
            CallbackMethod = callbackMethod;
            Username = username;
            Password = password;
            Tag = tag;
            CallbackTimeout = callbackTimeout;
        }

        /// <summary>
        /// Getter for callbackUrl
        /// </summary>
        [JsonProperty("callbackUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Getter for callbackMethod
        /// </summary>
        [JsonProperty("callbackMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.CallbackMethodEnum? CallbackMethod { get; set; }

        /// <summary>
        /// Getter for username
        /// </summary>
        [JsonProperty("username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// Getter for password
        /// </summary>
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Getter for tag
        /// </summary>
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// Getter for callbackTimeout
        /// </summary>
        [JsonProperty("callbackTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallbackTimeout { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ApiTranscribeRecordingRequest : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"CallbackUrl = {(CallbackUrl == null ? "null" : CallbackUrl == string.Empty ? "" : CallbackUrl)}");
            toStringOutput.Add($"CallbackMethod = {(CallbackMethod == null ? "null" : CallbackMethod.ToString())}");
            toStringOutput.Add($"Username = {(Username == null ? "null" : Username == string.Empty ? "" : Username)}");
            toStringOutput.Add($"Password = {(Password == null ? "null" : Password == string.Empty ? "" : Password)}");
            toStringOutput.Add($"Tag = {(Tag == null ? "null" : Tag == string.Empty ? "" : Tag)}");
            toStringOutput.Add($"CallbackTimeout = {(CallbackTimeout == null ? "null" : CallbackTimeout.ToString())}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ApiTranscribeRecordingRequest other &&
                ((CallbackUrl == null && other.CallbackUrl == null) || (CallbackUrl?.Equals(other.CallbackUrl) == true)) &&
                ((CallbackMethod == null && other.CallbackMethod == null) || (CallbackMethod?.Equals(other.CallbackMethod) == true)) &&
                ((Username == null && other.Username == null) || (Username?.Equals(other.Username) == true)) &&
                ((Password == null && other.Password == null) || (Password?.Equals(other.Password) == true)) &&
                ((Tag == null && other.Tag == null) || (Tag?.Equals(other.Tag) == true)) &&
                ((CallbackTimeout == null && other.CallbackTimeout == null) || (CallbackTimeout?.Equals(other.CallbackTimeout) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 1283937202;

            if (CallbackUrl != null)
            {
               hashCode += CallbackUrl.GetHashCode();
            }

            if (CallbackMethod != null)
            {
               hashCode += CallbackMethod.GetHashCode();
            }

            if (Username != null)
            {
               hashCode += Username.GetHashCode();
            }

            if (Password != null)
            {
               hashCode += Password.GetHashCode();
            }

            if (Tag != null)
            {
               hashCode += Tag.GetHashCode();
            }

            if (CallbackTimeout != null)
            {
               hashCode += CallbackTimeout.GetHashCode();
            }

            return hashCode;
        }

    }
}