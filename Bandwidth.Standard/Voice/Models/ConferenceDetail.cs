/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ConferenceDetail 
    {
        public ConferenceDetail() { }

        public ConferenceDetail(string id = null,
            string name = null,
            DateTime? createdTime = null,
            DateTime? completedTime = null,
            string conferenceEventUrl = null,
            Models.ConferenceEventMethodEnum? conferenceEventMethod = null,
            string tag = null,
            List<Models.ConferenceMemberDetail> activeMembers = null)
        {
            Id = id;
            Name = name;
            CreatedTime = createdTime;
            CompletedTime = completedTime;
            ConferenceEventUrl = conferenceEventUrl;
            ConferenceEventMethod = conferenceEventMethod;
            Tag = tag;
            ActiveMembers = activeMembers;
        }

        /// <summary>
        /// Getter for id
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Getter for name
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Getter for createdTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("createdTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Getter for completedTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("completedTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CompletedTime { get; set; }

        /// <summary>
        /// Getter for conferenceEventUrl
        /// </summary>
        [JsonProperty("conferenceEventUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string ConferenceEventUrl { get; set; }

        /// <summary>
        /// Getter for conferenceEventMethod
        /// </summary>
        [JsonProperty("conferenceEventMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.ConferenceEventMethodEnum? ConferenceEventMethod { get; set; }

        /// <summary>
        /// Getter for tag
        /// </summary>
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// Getter for activeMembers
        /// </summary>
        [JsonProperty("activeMembers", NullValueHandling = NullValueHandling.Ignore)]
        public List<Models.ConferenceMemberDetail> ActiveMembers { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ConferenceDetail : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"Id = {(Id == null ? "null" : Id == string.Empty ? "" : Id)}");
            toStringOutput.Add($"Name = {(Name == null ? "null" : Name == string.Empty ? "" : Name)}");
            toStringOutput.Add($"CreatedTime = {(CreatedTime == null ? "null" : CreatedTime.ToString())}");
            toStringOutput.Add($"CompletedTime = {(CompletedTime == null ? "null" : CompletedTime.ToString())}");
            toStringOutput.Add($"ConferenceEventUrl = {(ConferenceEventUrl == null ? "null" : ConferenceEventUrl == string.Empty ? "" : ConferenceEventUrl)}");
            toStringOutput.Add($"ConferenceEventMethod = {(ConferenceEventMethod == null ? "null" : ConferenceEventMethod.ToString())}");
            toStringOutput.Add($"Tag = {(Tag == null ? "null" : Tag == string.Empty ? "" : Tag)}");
            toStringOutput.Add($"ActiveMembers = {(ActiveMembers == null ? "null" : $"[{ string.Join(", ", ActiveMembers)} ]")}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ConferenceDetail other &&
                ((Id == null && other.Id == null) || (Id?.Equals(other.Id) == true)) &&
                ((Name == null && other.Name == null) || (Name?.Equals(other.Name) == true)) &&
                ((CreatedTime == null && other.CreatedTime == null) || (CreatedTime?.Equals(other.CreatedTime) == true)) &&
                ((CompletedTime == null && other.CompletedTime == null) || (CompletedTime?.Equals(other.CompletedTime) == true)) &&
                ((ConferenceEventUrl == null && other.ConferenceEventUrl == null) || (ConferenceEventUrl?.Equals(other.ConferenceEventUrl) == true)) &&
                ((ConferenceEventMethod == null && other.ConferenceEventMethod == null) || (ConferenceEventMethod?.Equals(other.ConferenceEventMethod) == true)) &&
                ((Tag == null && other.Tag == null) || (Tag?.Equals(other.Tag) == true)) &&
                ((ActiveMembers == null && other.ActiveMembers == null) || (ActiveMembers?.Equals(other.ActiveMembers) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 957632881;

            if (Id != null)
            {
               hashCode += Id.GetHashCode();
            }

            if (Name != null)
            {
               hashCode += Name.GetHashCode();
            }

            if (CreatedTime != null)
            {
               hashCode += CreatedTime.GetHashCode();
            }

            if (CompletedTime != null)
            {
               hashCode += CompletedTime.GetHashCode();
            }

            if (ConferenceEventUrl != null)
            {
               hashCode += ConferenceEventUrl.GetHashCode();
            }

            if (ConferenceEventMethod != null)
            {
               hashCode += ConferenceEventMethod.GetHashCode();
            }

            if (Tag != null)
            {
               hashCode += Tag.GetHashCode();
            }

            if (ActiveMembers != null)
            {
               hashCode += ActiveMembers.GetHashCode();
            }

            return hashCode;
        }

    }
}