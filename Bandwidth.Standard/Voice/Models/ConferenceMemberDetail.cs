/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ConferenceMemberDetail 
    {
        public ConferenceMemberDetail() { }

        public ConferenceMemberDetail(string callId = null,
            string conferenceId = null,
            string memberUrl = null,
            bool? mute = null,
            bool? hold = null,
            List<string> callIdsToCoach = null)
        {
            CallId = callId;
            ConferenceId = conferenceId;
            MemberUrl = memberUrl;
            Mute = mute;
            Hold = hold;
            CallIdsToCoach = callIdsToCoach;
        }

        /// <summary>
        /// Getter for callId
        /// </summary>
        [JsonProperty("callId", NullValueHandling = NullValueHandling.Ignore)]
        public string CallId { get; set; }

        /// <summary>
        /// Getter for conferenceId
        /// </summary>
        [JsonProperty("conferenceId", NullValueHandling = NullValueHandling.Ignore)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// Getter for memberUrl
        /// </summary>
        [JsonProperty("memberUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string MemberUrl { get; set; }

        /// <summary>
        /// Getter for mute
        /// </summary>
        [JsonProperty("mute", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Mute { get; set; }

        /// <summary>
        /// Getter for hold
        /// </summary>
        [JsonProperty("hold", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Hold { get; set; }

        /// <summary>
        /// Getter for callIdsToCoach
        /// </summary>
        [JsonProperty("callIdsToCoach", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CallIdsToCoach { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ConferenceMemberDetail : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"CallId = {(CallId == null ? "null" : CallId == string.Empty ? "" : CallId)}");
            toStringOutput.Add($"ConferenceId = {(ConferenceId == null ? "null" : ConferenceId == string.Empty ? "" : ConferenceId)}");
            toStringOutput.Add($"MemberUrl = {(MemberUrl == null ? "null" : MemberUrl == string.Empty ? "" : MemberUrl)}");
            toStringOutput.Add($"Mute = {(Mute == null ? "null" : Mute.ToString())}");
            toStringOutput.Add($"Hold = {(Hold == null ? "null" : Hold.ToString())}");
            toStringOutput.Add($"CallIdsToCoach = {(CallIdsToCoach == null ? "null" : $"[{ string.Join(", ", CallIdsToCoach)} ]")}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ConferenceMemberDetail other &&
                ((CallId == null && other.CallId == null) || (CallId?.Equals(other.CallId) == true)) &&
                ((ConferenceId == null && other.ConferenceId == null) || (ConferenceId?.Equals(other.ConferenceId) == true)) &&
                ((MemberUrl == null && other.MemberUrl == null) || (MemberUrl?.Equals(other.MemberUrl) == true)) &&
                ((Mute == null && other.Mute == null) || (Mute?.Equals(other.Mute) == true)) &&
                ((Hold == null && other.Hold == null) || (Hold?.Equals(other.Hold) == true)) &&
                ((CallIdsToCoach == null && other.CallIdsToCoach == null) || (CallIdsToCoach?.Equals(other.CallIdsToCoach) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -736159189;

            if (CallId != null)
            {
               hashCode += CallId.GetHashCode();
            }

            if (ConferenceId != null)
            {
               hashCode += ConferenceId.GetHashCode();
            }

            if (MemberUrl != null)
            {
               hashCode += MemberUrl.GetHashCode();
            }

            if (Mute != null)
            {
               hashCode += Mute.GetHashCode();
            }

            if (Hold != null)
            {
               hashCode += Hold.GetHashCode();
            }

            if (CallIdsToCoach != null)
            {
               hashCode += CallIdsToCoach.GetHashCode();
            }

            return hashCode;
        }

    }
}