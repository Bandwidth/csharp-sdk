/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class RecordingMetadataResponse 
    {
        public RecordingMetadataResponse() { }

        public RecordingMetadataResponse(string applicationId = null,
            string accountId = null,
            string callId = null,
            string parentCallId = null,
            string recordingId = null,
            string to = null,
            string from = null,
            string transferCallerId = null,
            string transferTo = null,
            string duration = null,
            Models.DirectionEnum? direction = null,
            int? channels = null,
            DateTime? startTime = null,
            DateTime? endTime = null,
            Models.FileFormatEnum? fileFormat = null,
            Models.Status1Enum? status = null,
            string mediaUrl = null,
            Models.Transcription transcription = null)
        {
            ApplicationId = applicationId;
            AccountId = accountId;
            CallId = callId;
            ParentCallId = parentCallId;
            RecordingId = recordingId;
            To = to;
            From = from;
            TransferCallerId = transferCallerId;
            TransferTo = transferTo;
            Duration = duration;
            Direction = direction;
            Channels = channels;
            StartTime = startTime;
            EndTime = endTime;
            FileFormat = fileFormat;
            Status = status;
            MediaUrl = mediaUrl;
            Transcription = transcription;
        }

        /// <summary>
        /// Getter for applicationId
        /// </summary>
        [JsonProperty("applicationId", NullValueHandling = NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Getter for accountId
        /// </summary>
        [JsonProperty("accountId", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Getter for callId
        /// </summary>
        [JsonProperty("callId", NullValueHandling = NullValueHandling.Ignore)]
        public string CallId { get; set; }

        /// <summary>
        /// Getter for parentCallId
        /// </summary>
        [JsonProperty("parentCallId", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentCallId { get; set; }

        /// <summary>
        /// Getter for recordingId
        /// </summary>
        [JsonProperty("recordingId", NullValueHandling = NullValueHandling.Ignore)]
        public string RecordingId { get; set; }

        /// <summary>
        /// Getter for to
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public string To { get; set; }

        /// <summary>
        /// Getter for from
        /// </summary>
        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// Getter for transferCallerId
        /// </summary>
        [JsonProperty("transferCallerId", NullValueHandling = NullValueHandling.Ignore)]
        public string TransferCallerId { get; set; }

        /// <summary>
        /// Getter for transferTo
        /// </summary>
        [JsonProperty("transferTo", NullValueHandling = NullValueHandling.Ignore)]
        public string TransferTo { get; set; }

        /// <summary>
        /// Format is ISO-8601
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public string Duration { get; set; }

        /// <summary>
        /// Getter for direction
        /// </summary>
        [JsonProperty("direction", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.DirectionEnum? Direction { get; set; }

        /// <summary>
        /// Getter for channels
        /// </summary>
        [JsonProperty("channels", NullValueHandling = NullValueHandling.Ignore)]
        public int? Channels { get; set; }

        /// <summary>
        /// Getter for startTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Getter for endTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("endTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Getter for fileFormat
        /// </summary>
        [JsonProperty("fileFormat", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.FileFormatEnum? FileFormat { get; set; }

        /// <summary>
        /// Getter for status
        /// </summary>
        [JsonProperty("status", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.Status1Enum? Status { get; set; }

        /// <summary>
        /// Getter for mediaUrl
        /// </summary>
        [JsonProperty("mediaUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string MediaUrl { get; set; }

        /// <summary>
        /// Getter for transcription
        /// </summary>
        [JsonProperty("transcription", NullValueHandling = NullValueHandling.Ignore)]
        public Models.Transcription Transcription { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"RecordingMetadataResponse : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"ApplicationId = {(ApplicationId == null ? "null" : ApplicationId == string.Empty ? "" : ApplicationId)}");
            toStringOutput.Add($"AccountId = {(AccountId == null ? "null" : AccountId == string.Empty ? "" : AccountId)}");
            toStringOutput.Add($"CallId = {(CallId == null ? "null" : CallId == string.Empty ? "" : CallId)}");
            toStringOutput.Add($"ParentCallId = {(ParentCallId == null ? "null" : ParentCallId == string.Empty ? "" : ParentCallId)}");
            toStringOutput.Add($"RecordingId = {(RecordingId == null ? "null" : RecordingId == string.Empty ? "" : RecordingId)}");
            toStringOutput.Add($"To = {(To == null ? "null" : To == string.Empty ? "" : To)}");
            toStringOutput.Add($"From = {(From == null ? "null" : From == string.Empty ? "" : From)}");
            toStringOutput.Add($"TransferCallerId = {(TransferCallerId == null ? "null" : TransferCallerId == string.Empty ? "" : TransferCallerId)}");
            toStringOutput.Add($"TransferTo = {(TransferTo == null ? "null" : TransferTo == string.Empty ? "" : TransferTo)}");
            toStringOutput.Add($"Duration = {(Duration == null ? "null" : Duration == string.Empty ? "" : Duration)}");
            toStringOutput.Add($"Direction = {(Direction == null ? "null" : Direction.ToString())}");
            toStringOutput.Add($"Channels = {(Channels == null ? "null" : Channels.ToString())}");
            toStringOutput.Add($"StartTime = {(StartTime == null ? "null" : StartTime.ToString())}");
            toStringOutput.Add($"EndTime = {(EndTime == null ? "null" : EndTime.ToString())}");
            toStringOutput.Add($"FileFormat = {(FileFormat == null ? "null" : FileFormat.ToString())}");
            toStringOutput.Add($"Status = {(Status == null ? "null" : Status.ToString())}");
            toStringOutput.Add($"MediaUrl = {(MediaUrl == null ? "null" : MediaUrl == string.Empty ? "" : MediaUrl)}");
            toStringOutput.Add($"Transcription = {(Transcription == null ? "null" : Transcription.ToString())}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is RecordingMetadataResponse other &&
                ((ApplicationId == null && other.ApplicationId == null) || (ApplicationId?.Equals(other.ApplicationId) == true)) &&
                ((AccountId == null && other.AccountId == null) || (AccountId?.Equals(other.AccountId) == true)) &&
                ((CallId == null && other.CallId == null) || (CallId?.Equals(other.CallId) == true)) &&
                ((ParentCallId == null && other.ParentCallId == null) || (ParentCallId?.Equals(other.ParentCallId) == true)) &&
                ((RecordingId == null && other.RecordingId == null) || (RecordingId?.Equals(other.RecordingId) == true)) &&
                ((To == null && other.To == null) || (To?.Equals(other.To) == true)) &&
                ((From == null && other.From == null) || (From?.Equals(other.From) == true)) &&
                ((TransferCallerId == null && other.TransferCallerId == null) || (TransferCallerId?.Equals(other.TransferCallerId) == true)) &&
                ((TransferTo == null && other.TransferTo == null) || (TransferTo?.Equals(other.TransferTo) == true)) &&
                ((Duration == null && other.Duration == null) || (Duration?.Equals(other.Duration) == true)) &&
                ((Direction == null && other.Direction == null) || (Direction?.Equals(other.Direction) == true)) &&
                ((Channels == null && other.Channels == null) || (Channels?.Equals(other.Channels) == true)) &&
                ((StartTime == null && other.StartTime == null) || (StartTime?.Equals(other.StartTime) == true)) &&
                ((EndTime == null && other.EndTime == null) || (EndTime?.Equals(other.EndTime) == true)) &&
                ((FileFormat == null && other.FileFormat == null) || (FileFormat?.Equals(other.FileFormat) == true)) &&
                ((Status == null && other.Status == null) || (Status?.Equals(other.Status) == true)) &&
                ((MediaUrl == null && other.MediaUrl == null) || (MediaUrl?.Equals(other.MediaUrl) == true)) &&
                ((Transcription == null && other.Transcription == null) || (Transcription?.Equals(other.Transcription) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = 1403073460;

            if (ApplicationId != null)
            {
               hashCode += ApplicationId.GetHashCode();
            }

            if (AccountId != null)
            {
               hashCode += AccountId.GetHashCode();
            }

            if (CallId != null)
            {
               hashCode += CallId.GetHashCode();
            }

            if (ParentCallId != null)
            {
               hashCode += ParentCallId.GetHashCode();
            }

            if (RecordingId != null)
            {
               hashCode += RecordingId.GetHashCode();
            }

            if (To != null)
            {
               hashCode += To.GetHashCode();
            }

            if (From != null)
            {
               hashCode += From.GetHashCode();
            }

            if (TransferCallerId != null)
            {
               hashCode += TransferCallerId.GetHashCode();
            }

            if (TransferTo != null)
            {
               hashCode += TransferTo.GetHashCode();
            }

            if (Duration != null)
            {
               hashCode += Duration.GetHashCode();
            }

            if (Direction != null)
            {
               hashCode += Direction.GetHashCode();
            }

            if (Channels != null)
            {
               hashCode += Channels.GetHashCode();
            }

            if (StartTime != null)
            {
               hashCode += StartTime.GetHashCode();
            }

            if (EndTime != null)
            {
               hashCode += EndTime.GetHashCode();
            }

            if (FileFormat != null)
            {
               hashCode += FileFormat.GetHashCode();
            }

            if (Status != null)
            {
               hashCode += Status.GetHashCode();
            }

            if (MediaUrl != null)
            {
               hashCode += MediaUrl.GetHashCode();
            }

            if (Transcription != null)
            {
               hashCode += Transcription.GetHashCode();
            }

            return hashCode;
        }

    }
}