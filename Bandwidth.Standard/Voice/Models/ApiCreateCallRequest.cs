/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ApiCreateCallRequest 
    {
        public ApiCreateCallRequest() { }

        public ApiCreateCallRequest(string from,
            string to,
            string answerUrl,
            string applicationId,
            string uui = null,
            double? callTimeout = null,
            double? callbackTimeout = null,
            string answerFallbackUrl = null,
            string username = null,
            string password = null,
            string fallbackUsername = null,
            string fallbackPassword = null,
            Models.AnswerMethodEnum? answerMethod = null,
            Models.AnswerFallbackMethodEnum? answerFallbackMethod = null,
            string disconnectUrl = null,
            Models.DisconnectMethodEnum? disconnectMethod = null,
            string tag = null,
            string obfuscatedTo = null,
            string obfuscatedFrom = null)
        {
            From = from;
            To = to;
            Uui = uui;
            CallTimeout = callTimeout;
            CallbackTimeout = callbackTimeout;
            AnswerUrl = answerUrl;
            AnswerFallbackUrl = answerFallbackUrl;
            Username = username;
            Password = password;
            FallbackUsername = fallbackUsername;
            FallbackPassword = fallbackPassword;
            AnswerMethod = answerMethod;
            AnswerFallbackMethod = answerFallbackMethod;
            DisconnectUrl = disconnectUrl;
            DisconnectMethod = disconnectMethod;
            Tag = tag;
            ApplicationId = applicationId;
            ObfuscatedTo = obfuscatedTo;
            ObfuscatedFrom = obfuscatedFrom;
        }

        /// <summary>
        /// Format is E164
        /// </summary>
        [JsonProperty("from")]
        public string From { get; set; }

        /// <summary>
        /// Format is E164 or SIP URI
        /// </summary>
        [JsonProperty("to")]
        public string To { get; set; }

        /// <summary>
        /// When calling a SIP URI, this will be sent as the 'User-To-User' header within the initial INVITE. An 'encoding' parameter must be specified as described in https://tools.ietf.org/html/rfc7433. This header cannot exceed 256 characters, including the encoding parameter.
        /// </summary>
        [JsonProperty("uui", NullValueHandling = NullValueHandling.Ignore)]
        public string Uui { get; set; }

        /// <summary>
        /// Getter for callTimeout
        /// </summary>
        [JsonProperty("callTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallTimeout { get; set; }

        /// <summary>
        /// Getter for callbackTimeout
        /// </summary>
        [JsonProperty("callbackTimeout", NullValueHandling = NullValueHandling.Ignore)]
        public double? CallbackTimeout { get; set; }

        /// <summary>
        /// Getter for answerUrl
        /// </summary>
        [JsonProperty("answerUrl")]
        public string AnswerUrl { get; set; }

        /// <summary>
        /// Getter for answerFallbackUrl
        /// </summary>
        [JsonProperty("answerFallbackUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string AnswerFallbackUrl { get; set; }

        /// <summary>
        /// Getter for username
        /// </summary>
        [JsonProperty("username", NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// Getter for password
        /// </summary>
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Getter for fallbackUsername
        /// </summary>
        [JsonProperty("fallbackUsername", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackUsername { get; set; }

        /// <summary>
        /// Getter for fallbackPassword
        /// </summary>
        [JsonProperty("fallbackPassword", NullValueHandling = NullValueHandling.Ignore)]
        public string FallbackPassword { get; set; }

        /// <summary>
        /// Getter for answerMethod
        /// </summary>
        [JsonProperty("answerMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.AnswerMethodEnum? AnswerMethod { get; set; }

        /// <summary>
        /// Getter for answerFallbackMethod
        /// </summary>
        [JsonProperty("answerFallbackMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.AnswerFallbackMethodEnum? AnswerFallbackMethod { get; set; }

        /// <summary>
        /// Getter for disconnectUrl
        /// </summary>
        [JsonProperty("disconnectUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string DisconnectUrl { get; set; }

        /// <summary>
        /// Getter for disconnectMethod
        /// </summary>
        [JsonProperty("disconnectMethod", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.DisconnectMethodEnum? DisconnectMethod { get; set; }

        /// <summary>
        /// Getter for tag
        /// </summary>
        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }

        /// <summary>
        /// Getter for applicationId
        /// </summary>
        [JsonProperty("applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Getter for obfuscatedTo
        /// </summary>
        [JsonProperty("obfuscatedTo", NullValueHandling = NullValueHandling.Ignore)]
        public string ObfuscatedTo { get; set; }

        /// <summary>
        /// Getter for obfuscatedFrom
        /// </summary>
        [JsonProperty("obfuscatedFrom", NullValueHandling = NullValueHandling.Ignore)]
        public string ObfuscatedFrom { get; set; }

    }
}