/*
 * Bandwidth.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Bandwidth.Standard;
using Bandwidth.Standard.Utilities;

namespace Bandwidth.Standard.Voice.Models
{
    public class ConferenceRecordingMetadataResponse 
    {
        public ConferenceRecordingMetadataResponse() { }

        public ConferenceRecordingMetadataResponse(string accountId = null,
            string conferenceId = null,
            string name = null,
            string recordingId = null,
            string duration = null,
            int? channels = null,
            DateTime? startTime = null,
            DateTime? endTime = null,
            Models.FileFormatEnum? fileFormat = null,
            Models.Status1Enum? status = null,
            string mediaUrl = null)
        {
            AccountId = accountId;
            ConferenceId = conferenceId;
            Name = name;
            RecordingId = recordingId;
            Duration = duration;
            Channels = channels;
            StartTime = startTime;
            EndTime = endTime;
            FileFormat = fileFormat;
            Status = status;
            MediaUrl = mediaUrl;
        }

        /// <summary>
        /// Getter for accountId
        /// </summary>
        [JsonProperty("accountId", NullValueHandling = NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Getter for conferenceId
        /// </summary>
        [JsonProperty("conferenceId", NullValueHandling = NullValueHandling.Ignore)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// Getter for name
        /// </summary>
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Getter for recordingId
        /// </summary>
        [JsonProperty("recordingId", NullValueHandling = NullValueHandling.Ignore)]
        public string RecordingId { get; set; }

        /// <summary>
        /// Format is ISO-8601
        /// </summary>
        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public string Duration { get; set; }

        /// <summary>
        /// Getter for channels
        /// </summary>
        [JsonProperty("channels", NullValueHandling = NullValueHandling.Ignore)]
        public int? Channels { get; set; }

        /// <summary>
        /// Getter for startTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("startTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Getter for endTime
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("endTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Getter for fileFormat
        /// </summary>
        [JsonProperty("fileFormat", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.FileFormatEnum? FileFormat { get; set; }

        /// <summary>
        /// Getter for status
        /// </summary>
        [JsonProperty("status", ItemConverterType = typeof(StringValuedEnumConverter), NullValueHandling = NullValueHandling.Ignore)]
        public Models.Status1Enum? Status { get; set; }

        /// <summary>
        /// Getter for mediaUrl
        /// </summary>
        [JsonProperty("mediaUrl", NullValueHandling = NullValueHandling.Ignore)]
        public string MediaUrl { get; set; }

        public override string ToString()
        {
            var toStringOutput = new List<string>();

            this.ToString(toStringOutput);

            return $"ConferenceRecordingMetadataResponse : ({string.Join(", ", toStringOutput)})";
        }

        protected void ToString(List<string> toStringOutput)
        {
            toStringOutput.Add($"AccountId = {(AccountId == null ? "null" : AccountId == string.Empty ? "" : AccountId)}");
            toStringOutput.Add($"ConferenceId = {(ConferenceId == null ? "null" : ConferenceId == string.Empty ? "" : ConferenceId)}");
            toStringOutput.Add($"Name = {(Name == null ? "null" : Name == string.Empty ? "" : Name)}");
            toStringOutput.Add($"RecordingId = {(RecordingId == null ? "null" : RecordingId == string.Empty ? "" : RecordingId)}");
            toStringOutput.Add($"Duration = {(Duration == null ? "null" : Duration == string.Empty ? "" : Duration)}");
            toStringOutput.Add($"Channels = {(Channels == null ? "null" : Channels.ToString())}");
            toStringOutput.Add($"StartTime = {(StartTime == null ? "null" : StartTime.ToString())}");
            toStringOutput.Add($"EndTime = {(EndTime == null ? "null" : EndTime.ToString())}");
            toStringOutput.Add($"FileFormat = {(FileFormat == null ? "null" : FileFormat.ToString())}");
            toStringOutput.Add($"Status = {(Status == null ? "null" : Status.ToString())}");
            toStringOutput.Add($"MediaUrl = {(MediaUrl == null ? "null" : MediaUrl == string.Empty ? "" : MediaUrl)}");
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj == this)
            {
                return true;
            }

            return obj is ConferenceRecordingMetadataResponse other &&
                ((AccountId == null && other.AccountId == null) || (AccountId?.Equals(other.AccountId) == true)) &&
                ((ConferenceId == null && other.ConferenceId == null) || (ConferenceId?.Equals(other.ConferenceId) == true)) &&
                ((Name == null && other.Name == null) || (Name?.Equals(other.Name) == true)) &&
                ((RecordingId == null && other.RecordingId == null) || (RecordingId?.Equals(other.RecordingId) == true)) &&
                ((Duration == null && other.Duration == null) || (Duration?.Equals(other.Duration) == true)) &&
                ((Channels == null && other.Channels == null) || (Channels?.Equals(other.Channels) == true)) &&
                ((StartTime == null && other.StartTime == null) || (StartTime?.Equals(other.StartTime) == true)) &&
                ((EndTime == null && other.EndTime == null) || (EndTime?.Equals(other.EndTime) == true)) &&
                ((FileFormat == null && other.FileFormat == null) || (FileFormat?.Equals(other.FileFormat) == true)) &&
                ((Status == null && other.Status == null) || (Status?.Equals(other.Status) == true)) &&
                ((MediaUrl == null && other.MediaUrl == null) || (MediaUrl?.Equals(other.MediaUrl) == true));
        }

        public override int GetHashCode()
        {
            int hashCode = -898132204;

            if (AccountId != null)
            {
               hashCode += AccountId.GetHashCode();
            }

            if (ConferenceId != null)
            {
               hashCode += ConferenceId.GetHashCode();
            }

            if (Name != null)
            {
               hashCode += Name.GetHashCode();
            }

            if (RecordingId != null)
            {
               hashCode += RecordingId.GetHashCode();
            }

            if (Duration != null)
            {
               hashCode += Duration.GetHashCode();
            }

            if (Channels != null)
            {
               hashCode += Channels.GetHashCode();
            }

            if (StartTime != null)
            {
               hashCode += StartTime.GetHashCode();
            }

            if (EndTime != null)
            {
               hashCode += EndTime.GetHashCode();
            }

            if (FileFormat != null)
            {
               hashCode += FileFormat.GetHashCode();
            }

            if (Status != null)
            {
               hashCode += Status.GetHashCode();
            }

            if (MediaUrl != null)
            {
               hashCode += MediaUrl.GetHashCode();
            }

            return hashCode;
        }

    }
}