/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConferencesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadConferenceRecording (string accountId, string conferenceId, string recordingId);

        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadConferenceRecordingWithHttpInfo (string accountId, string conferenceId, string recordingId);
        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>Conference</returns>
        Conference GetConference (string accountId, string conferenceId);

        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>ApiResponse of Conference</returns>
        ApiResponse<Conference> GetConferenceWithHttpInfo (string accountId, string conferenceId);
        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <returns>ConferenceMember</returns>
        ConferenceMember GetConferenceMember (string accountId, string conferenceId, string memberId);

        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <returns>ApiResponse of ConferenceMember</returns>
        ApiResponse<ConferenceMember> GetConferenceMemberWithHttpInfo (string accountId, string conferenceId, string memberId);
        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ConferenceRecordingMetadata</returns>
        ConferenceRecordingMetadata GetConferenceRecording (string accountId, string conferenceId, string recordingId);

        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of ConferenceRecordingMetadata</returns>
        ApiResponse<ConferenceRecordingMetadata> GetConferenceRecordingWithHttpInfo (string accountId, string conferenceId, string recordingId);
        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>List<ConferenceRecordingMetadata></returns>
        List<ConferenceRecordingMetadata> ListConferenceRecordings (string accountId, string conferenceId);

        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>ApiResponse of List<ConferenceRecordingMetadata></returns>
        ApiResponse<List<ConferenceRecordingMetadata>> ListConferenceRecordingsWithHttpInfo (string accountId, string conferenceId);
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <returns>List<Conference></returns>
        List<Conference> ListConferences (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string));

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <returns>ApiResponse of List<Conference></returns>
        ApiResponse<List<Conference>> ListConferencesWithHttpInfo (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string));
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <returns></returns>
        void UpdateConference (string accountId, string conferenceId, UpdateConference updateConference);

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConferenceWithHttpInfo (string accountId, string conferenceId, UpdateConference updateConference);
        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <returns></returns>
        void UpdateConferenceBxml (string accountId, string conferenceId, string body);

        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConferenceBxmlWithHttpInfo (string accountId, string conferenceId, string body);
        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <returns></returns>
        void UpdateConferenceMember (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember);

        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConferenceMemberWithHttpInfo (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadConferenceRecordingAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadConferenceRecordingWithHttpInfoAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Conference</returns>
        System.Threading.Tasks.Task<Conference> GetConferenceAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Conference)</returns>
        System.Threading.Tasks.Task<ApiResponse<Conference>> GetConferenceWithHttpInfoAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ConferenceMember</returns>
        System.Threading.Tasks.Task<ConferenceMember> GetConferenceMemberAsync (string accountId, string conferenceId, string memberId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ConferenceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceMember>> GetConferenceMemberWithHttpInfoAsync (string accountId, string conferenceId, string memberId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ConferenceRecordingMetadata</returns>
        System.Threading.Tasks.Task<ConferenceRecordingMetadata> GetConferenceRecordingAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ConferenceRecordingMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceRecordingMetadata>> GetConferenceRecordingWithHttpInfoAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ConferenceRecordingMetadata></returns>
        System.Threading.Tasks.Task<List<ConferenceRecordingMetadata>> ListConferenceRecordingsAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ConferenceRecordingMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConferenceRecordingMetadata>>> ListConferenceRecordingsWithHttpInfoAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Conference></returns>
        System.Threading.Tasks.Task<List<Conference>> ListConferencesAsync (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Conference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Conference>>> ListConferencesWithHttpInfoAsync (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConferenceAsync (string accountId, string conferenceId, UpdateConference updateConference, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceWithHttpInfoAsync (string accountId, string conferenceId, UpdateConference updateConference, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConferenceBxmlAsync (string accountId, string conferenceId, string body, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceBxmlWithHttpInfoAsync (string accountId, string conferenceId, string body, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConferenceMemberAsync (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceMemberWithHttpInfoAsync (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConferencesApi : IConferencesApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConferencesApi(String basePath)
        {
            this.Configuration = new Bandwidth.Standard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ConferencesApi()
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.Default;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConferencesApi(Bandwidth.Standard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bandwidth.Standard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadConferenceRecording (string accountId, string conferenceId, string recordingId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DownloadConferenceRecordingWithHttpInfo(accountId, conferenceId, recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DownloadConferenceRecordingWithHttpInfo (string accountId, string conferenceId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->DownloadConferenceRecording");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->DownloadConferenceRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->DownloadConferenceRecording");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadConferenceRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadConferenceRecordingAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DownloadConferenceRecordingWithHttpInfoAsync(accountId, conferenceId, recordingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadConferenceRecordingWithHttpInfoAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->DownloadConferenceRecording");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->DownloadConferenceRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->DownloadConferenceRecording");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadConferenceRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>Conference</returns>
        public Conference GetConference (string accountId, string conferenceId)
        {
             ApiResponse<Conference> localVarResponse = GetConferenceWithHttpInfo(accountId, conferenceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>ApiResponse of Conference</returns>
        public ApiResponse<Conference> GetConferenceWithHttpInfo (string accountId, string conferenceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConference");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConference");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Conference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Conference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Conference)));
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Conference</returns>
        public async System.Threading.Tasks.Task<Conference> GetConferenceAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Conference> localVarResponse = await GetConferenceWithHttpInfoAsync(accountId, conferenceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Conference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Conference>> GetConferenceWithHttpInfoAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConference");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConference");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Conference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Conference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Conference)));
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <returns>ConferenceMember</returns>
        public ConferenceMember GetConferenceMember (string accountId, string conferenceId, string memberId)
        {
             ApiResponse<ConferenceMember> localVarResponse = GetConferenceMemberWithHttpInfo(accountId, conferenceId, memberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <returns>ApiResponse of ConferenceMember</returns>
        public ApiResponse<ConferenceMember> GetConferenceMemberWithHttpInfo (string accountId, string conferenceId, string memberId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceMember");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceMember");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->GetConferenceMember");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConferenceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConferenceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConferenceMember)));
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ConferenceMember</returns>
        public async System.Threading.Tasks.Task<ConferenceMember> GetConferenceMemberAsync (string accountId, string conferenceId, string memberId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ConferenceMember> localVarResponse = await GetConferenceMemberWithHttpInfoAsync(accountId, conferenceId, memberId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ConferenceMember)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConferenceMember>> GetConferenceMemberWithHttpInfoAsync (string accountId, string conferenceId, string memberId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceMember");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceMember");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->GetConferenceMember");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConferenceMember>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConferenceMember) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConferenceMember)));
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ConferenceRecordingMetadata</returns>
        public ConferenceRecordingMetadata GetConferenceRecording (string accountId, string conferenceId, string recordingId)
        {
             ApiResponse<ConferenceRecordingMetadata> localVarResponse = GetConferenceRecordingWithHttpInfo(accountId, conferenceId, recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of ConferenceRecordingMetadata</returns>
        public ApiResponse<ConferenceRecordingMetadata> GetConferenceRecordingWithHttpInfo (string accountId, string conferenceId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceRecording");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->GetConferenceRecording");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConferenceRecordingMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConferenceRecordingMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConferenceRecordingMetadata)));
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ConferenceRecordingMetadata</returns>
        public async System.Threading.Tasks.Task<ConferenceRecordingMetadata> GetConferenceRecordingAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ConferenceRecordingMetadata> localVarResponse = await GetConferenceRecordingWithHttpInfoAsync(accountId, conferenceId, recordingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ConferenceRecordingMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConferenceRecordingMetadata>> GetConferenceRecordingWithHttpInfoAsync (string accountId, string conferenceId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceRecording");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->GetConferenceRecording");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConferenceRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConferenceRecordingMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ConferenceRecordingMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConferenceRecordingMetadata)));
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>List<ConferenceRecordingMetadata></returns>
        public List<ConferenceRecordingMetadata> ListConferenceRecordings (string accountId, string conferenceId)
        {
             ApiResponse<List<ConferenceRecordingMetadata>> localVarResponse = ListConferenceRecordingsWithHttpInfo(accountId, conferenceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <returns>ApiResponse of List<ConferenceRecordingMetadata></returns>
        public ApiResponse<List<ConferenceRecordingMetadata>> ListConferenceRecordingsWithHttpInfo (string accountId, string conferenceId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferenceRecordings");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->ListConferenceRecordings");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConferenceRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConferenceRecordingMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ConferenceRecordingMetadata>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConferenceRecordingMetadata>)));
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<ConferenceRecordingMetadata></returns>
        public async System.Threading.Tasks.Task<List<ConferenceRecordingMetadata>> ListConferenceRecordingsAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<ConferenceRecordingMetadata>> localVarResponse = await ListConferenceRecordingsWithHttpInfoAsync(accountId, conferenceId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ConferenceRecordingMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConferenceRecordingMetadata>>> ListConferenceRecordingsWithHttpInfoAsync (string accountId, string conferenceId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferenceRecordings");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->ListConferenceRecordings");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConferenceRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConferenceRecordingMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ConferenceRecordingMetadata>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConferenceRecordingMetadata>)));
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <returns>List<Conference></returns>
        public List<Conference> ListConferences (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string))
        {
             ApiResponse<List<Conference>> localVarResponse = ListConferencesWithHttpInfo(accountId, name, minCreatedTime, maxCreatedTime, pageSize, pageToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <returns>ApiResponse of List<Conference></returns>
        public ApiResponse<List<Conference>> ListConferencesWithHttpInfo (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferences");

            var localVarPath = "/accounts/{accountId}/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (minCreatedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minCreatedTime", minCreatedTime)); // query parameter
            if (maxCreatedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCreatedTime", maxCreatedTime)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Conference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Conference>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Conference>)));
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<Conference></returns>
        public async System.Threading.Tasks.Task<List<Conference>> ListConferencesAsync (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Conference>> localVarResponse = await ListConferencesWithHttpInfoAsync(accountId, name, minCreatedTime, maxCreatedTime, pageSize, pageToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by `createdTime` from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than `pageSize`, a `Link` header (with format `<{url}>; rel=\"next\"`) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Conference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Conference>>> ListConferencesWithHttpInfoAsync (string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferences");

            var localVarPath = "/accounts/{accountId}/conferences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (minCreatedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minCreatedTime", minCreatedTime)); // query parameter
            if (maxCreatedTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCreatedTime", maxCreatedTime)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Conference>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Conference>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Conference>)));
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <returns></returns>
        public void UpdateConference (string accountId, string conferenceId, UpdateConference updateConference)
        {
             UpdateConferenceWithHttpInfo(accountId, conferenceId, updateConference);
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateConferenceWithHttpInfo (string accountId, string conferenceId, UpdateConference updateConference)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConference");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConference");
            // verify the required parameter 'updateConference' is set
            if (updateConference == null)
                throw new ApiException(400, "Missing required parameter 'updateConference' when calling ConferencesApi->UpdateConference");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (updateConference != null && updateConference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateConference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateConference; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConferenceAsync (string accountId, string conferenceId, UpdateConference updateConference, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateConferenceWithHttpInfoAsync(accountId, conferenceId, updateConference, cancellationToken);

        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="updateConference"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceWithHttpInfoAsync (string accountId, string conferenceId, UpdateConference updateConference, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConference");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConference");
            // verify the required parameter 'updateConference' is set
            if (updateConference == null)
                throw new ApiException(400, "Missing required parameter 'updateConference' when calling ConferencesApi->UpdateConference");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (updateConference != null && updateConference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateConference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateConference; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <returns></returns>
        public void UpdateConferenceBxml (string accountId, string conferenceId, string body)
        {
             UpdateConferenceBxmlWithHttpInfo(accountId, conferenceId, body);
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateConferenceBxmlWithHttpInfo (string accountId, string conferenceId, string body)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceBxml");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceBxml");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConferencesApi->UpdateConferenceBxml");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/bxml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConferenceBxml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConferenceBxmlAsync (string accountId, string conferenceId, string body, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateConferenceBxmlWithHttpInfoAsync(accountId, conferenceId, body, cancellationToken);

        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceBxmlWithHttpInfoAsync (string accountId, string conferenceId, string body, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceBxml");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceBxml");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ConferencesApi->UpdateConferenceBxml");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/bxml";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConferenceBxml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <returns></returns>
        public void UpdateConferenceMember (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember)
        {
             UpdateConferenceMemberWithHttpInfo(accountId, conferenceId, memberId, updateConferenceMember);
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateConferenceMemberWithHttpInfo (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceMember");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceMember");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->UpdateConferenceMember");
            // verify the required parameter 'updateConferenceMember' is set
            if (updateConferenceMember == null)
                throw new ApiException(400, "Missing required parameter 'updateConferenceMember' when calling ConferencesApi->UpdateConferenceMember");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (updateConferenceMember != null && updateConferenceMember.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateConferenceMember); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateConferenceMember; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConferenceMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConferenceMemberAsync (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateConferenceMemberWithHttpInfoAsync(accountId, conferenceId, memberId, updateConferenceMember, cancellationToken);

        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID.</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID.</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceMemberWithHttpInfoAsync (string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceMember");
            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
                throw new ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceMember");
            // verify the required parameter 'memberId' is set
            if (memberId == null)
                throw new ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->UpdateConferenceMember");
            // verify the required parameter 'updateConferenceMember' is set
            if (updateConferenceMember == null)
                throw new ApiException(400, "Missing required parameter 'updateConferenceMember' when calling ConferencesApi->UpdateConferenceMember");

            var localVarPath = "/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (conferenceId != null) localVarPathParams.Add("conferenceId", this.Configuration.ApiClient.ParameterToString(conferenceId)); // path parameter
            if (memberId != null) localVarPathParams.Add("memberId", this.Configuration.ApiClient.ParameterToString(memberId)); // path parameter
            if (updateConferenceMember != null && updateConferenceMember.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateConferenceMember); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateConferenceMember; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateConferenceMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
