/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConferencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadConferenceRecording(string accountId, string conferenceId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadConferenceRecordingWithHttpInfo(string accountId, string conferenceId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Conference</returns>
        Conference GetConference(string accountId, string conferenceId, int operationIndex = 0);

        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Conference</returns>
        ApiResponse<Conference> GetConferenceWithHttpInfo(string accountId, string conferenceId, int operationIndex = 0);
        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConferenceMember</returns>
        ConferenceMember GetConferenceMember(string accountId, string conferenceId, string memberId, int operationIndex = 0);

        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConferenceMember</returns>
        ApiResponse<ConferenceMember> GetConferenceMemberWithHttpInfo(string accountId, string conferenceId, string memberId, int operationIndex = 0);
        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConferenceRecordingMetadata</returns>
        ConferenceRecordingMetadata GetConferenceRecording(string accountId, string conferenceId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConferenceRecordingMetadata</returns>
        ApiResponse<ConferenceRecordingMetadata> GetConferenceRecordingWithHttpInfo(string accountId, string conferenceId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConferenceRecordingMetadata&gt;</returns>
        List<ConferenceRecordingMetadata> ListConferenceRecordings(string accountId, string conferenceId, int operationIndex = 0);

        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConferenceRecordingMetadata&gt;</returns>
        ApiResponse<List<ConferenceRecordingMetadata>> ListConferenceRecordingsWithHttpInfo(string accountId, string conferenceId, int operationIndex = 0);
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Conference&gt;</returns>
        List<Conference> ListConferences(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Conference&gt;</returns>
        ApiResponse<List<Conference>> ListConferencesWithHttpInfo(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateConference(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0);

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConferenceWithHttpInfo(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0);
        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateConferenceBxml(string accountId, string conferenceId, string body, int operationIndex = 0);

        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConferenceBxmlWithHttpInfo(string accountId, string conferenceId, string body, int operationIndex = 0);
        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateConferenceMember(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0);

        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateConferenceMemberWithHttpInfo(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConferencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadConferenceRecordingAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Conference Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording file.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadConferenceRecordingWithHttpInfoAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Conference</returns>
        System.Threading.Tasks.Task<Conference> GetConferenceAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Conference Information
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Conference)</returns>
        System.Threading.Tasks.Task<ApiResponse<Conference>> GetConferenceWithHttpInfoAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceMember</returns>
        System.Threading.Tasks.Task<ConferenceMember> GetConferenceMemberAsync(string accountId, string conferenceId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Conference Member
        /// </summary>
        /// <remarks>
        /// Returns information about the specified conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceMember>> GetConferenceMemberWithHttpInfoAsync(string accountId, string conferenceId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceRecordingMetadata</returns>
        System.Threading.Tasks.Task<ConferenceRecordingMetadata> GetConferenceRecordingAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Conference Recording Information
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceRecordingMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConferenceRecordingMetadata>> GetConferenceRecordingWithHttpInfoAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConferenceRecordingMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<ConferenceRecordingMetadata>> ListConferenceRecordingsAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Conference Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConferenceRecordingMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConferenceRecordingMetadata>>> ListConferenceRecordingsWithHttpInfoAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Conference&gt;</returns>
        System.Threading.Tasks.Task<List<Conference>> ListConferencesAsync(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Conferences
        /// </summary>
        /// <remarks>
        /// Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Conference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Conference>>> ListConferencesWithHttpInfoAsync(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConferenceAsync(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Conference
        /// </summary>
        /// <remarks>
        /// Update the conference state.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceWithHttpInfoAsync(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConferenceBxmlAsync(string accountId, string conferenceId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Conference BXML
        /// </summary>
        /// <remarks>
        /// Update the conference BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceBxmlWithHttpInfoAsync(string accountId, string conferenceId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateConferenceMemberAsync(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Conference Member
        /// </summary>
        /// <remarks>
        /// Updates settings for a particular conference member.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateConferenceMemberWithHttpInfoAsync(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConferencesApi : IConferencesApiSync, IConferencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConferencesApi : IConferencesApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConferencesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConferencesApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConferencesApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConferencesApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadConferenceRecording(string accountId, string conferenceId, string recordingId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadConferenceRecordingWithHttpInfo(accountId, conferenceId, recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Bandwidth.Standard.Client.ApiResponse<System.IO.Stream> DownloadConferenceRecordingWithHttpInfo(string accountId, string conferenceId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->DownloadConferenceRecording");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->DownloadConferenceRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->DownloadConferenceRecording");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.DownloadConferenceRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadConferenceRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadConferenceRecordingAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadConferenceRecordingWithHttpInfoAsync(accountId, conferenceId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Conference Recording Downloads the specified recording file.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<System.IO.Stream>> DownloadConferenceRecordingWithHttpInfoAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->DownloadConferenceRecording");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->DownloadConferenceRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->DownloadConferenceRecording");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.DownloadConferenceRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadConferenceRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Conference</returns>
        public Conference GetConference(string accountId, string conferenceId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<Conference> localVarResponse = GetConferenceWithHttpInfo(accountId, conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Conference</returns>
        public Bandwidth.Standard.Client.ApiResponse<Conference> GetConferenceWithHttpInfo(string accountId, string conferenceId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConference");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConference");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.GetConference";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Conference>("/accounts/{accountId}/conferences/{conferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Conference</returns>
        public async System.Threading.Tasks.Task<Conference> GetConferenceAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<Conference> localVarResponse = await GetConferenceWithHttpInfoAsync(accountId, conferenceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Information Returns information about the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Conference)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Conference>> GetConferenceWithHttpInfoAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConference");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConference");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.GetConference";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Conference>("/accounts/{accountId}/conferences/{conferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConferenceMember</returns>
        public ConferenceMember GetConferenceMember(string accountId, string conferenceId, string memberId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<ConferenceMember> localVarResponse = GetConferenceMemberWithHttpInfo(accountId, conferenceId, memberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConferenceMember</returns>
        public Bandwidth.Standard.Client.ApiResponse<ConferenceMember> GetConferenceMemberWithHttpInfo(string accountId, string conferenceId, string memberId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceMember");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceMember");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->GetConferenceMember");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.GetConferenceMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConferenceMember>("/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConferenceMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceMember</returns>
        public async System.Threading.Tasks.Task<ConferenceMember> GetConferenceMemberAsync(string accountId, string conferenceId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<ConferenceMember> localVarResponse = await GetConferenceMemberWithHttpInfoAsync(accountId, conferenceId, memberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Member Returns information about the specified conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceMember)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<ConferenceMember>> GetConferenceMemberWithHttpInfoAsync(string accountId, string conferenceId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceMember");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceMember");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->GetConferenceMember");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.GetConferenceMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConferenceMember>("/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConferenceMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConferenceRecordingMetadata</returns>
        public ConferenceRecordingMetadata GetConferenceRecording(string accountId, string conferenceId, string recordingId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<ConferenceRecordingMetadata> localVarResponse = GetConferenceRecordingWithHttpInfo(accountId, conferenceId, recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConferenceRecordingMetadata</returns>
        public Bandwidth.Standard.Client.ApiResponse<ConferenceRecordingMetadata> GetConferenceRecordingWithHttpInfo(string accountId, string conferenceId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceRecording");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->GetConferenceRecording");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.GetConferenceRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConferenceRecordingMetadata>("/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConferenceRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConferenceRecordingMetadata</returns>
        public async System.Threading.Tasks.Task<ConferenceRecordingMetadata> GetConferenceRecordingAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<ConferenceRecordingMetadata> localVarResponse = await GetConferenceRecordingWithHttpInfoAsync(accountId, conferenceId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Recording Information Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConferenceRecordingMetadata)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<ConferenceRecordingMetadata>> GetConferenceRecordingWithHttpInfoAsync(string accountId, string conferenceId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->GetConferenceRecording");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->GetConferenceRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling ConferencesApi->GetConferenceRecording");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.GetConferenceRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConferenceRecordingMetadata>("/accounts/{accountId}/conferences/{conferenceId}/recordings/{recordingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConferenceRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConferenceRecordingMetadata&gt;</returns>
        public List<ConferenceRecordingMetadata> ListConferenceRecordings(string accountId, string conferenceId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<ConferenceRecordingMetadata>> localVarResponse = ListConferenceRecordingsWithHttpInfo(accountId, conferenceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConferenceRecordingMetadata&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<ConferenceRecordingMetadata>> ListConferenceRecordingsWithHttpInfo(string accountId, string conferenceId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferenceRecordings");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->ListConferenceRecordings");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.ListConferenceRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConferenceRecordingMetadata>>("/accounts/{accountId}/conferences/{conferenceId}/recordings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConferenceRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConferenceRecordingMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConferenceRecordingMetadata>> ListConferenceRecordingsAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<ConferenceRecordingMetadata>> localVarResponse = await ListConferenceRecordingsWithHttpInfoAsync(accountId, conferenceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conference Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified conference.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConferenceRecordingMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<ConferenceRecordingMetadata>>> ListConferenceRecordingsWithHttpInfoAsync(string accountId, string conferenceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferenceRecordings");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->ListConferenceRecordings");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter

            localVarRequestOptions.Operation = "ConferencesApi.ListConferenceRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConferenceRecordingMetadata>>("/accounts/{accountId}/conferences/{conferenceId}/recordings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConferenceRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Conference&gt;</returns>
        public List<Conference> ListConferences(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<Conference>> localVarResponse = ListConferencesWithHttpInfo(accountId, name, minCreatedTime, maxCreatedTime, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Conference&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<Conference>> ListConferencesWithHttpInfo(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferences");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (minCreatedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "minCreatedTime", minCreatedTime));
            }
            if (maxCreatedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "maxCreatedTime", maxCreatedTime));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            localVarRequestOptions.Operation = "ConferencesApi.ListConferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Conference>>("/accounts/{accountId}/conferences", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Conference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Conference>> ListConferencesAsync(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<Conference>> localVarResponse = await ListConferencesWithHttpInfoAsync(accountId, name, minCreatedTime, maxCreatedTime, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Conferences Returns a max of 1000 conferences, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of conferences in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of conference records.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="name">Filter results by the &#x60;name&#x60; field. (optional)</param>
        /// <param name="minCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; after or at &#x60;minCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxCreatedTime">Filter results to conferences which have a &#x60;createdTime&#x60; before or at &#x60;maxCreatedTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="pageSize">Specifies the max number of conferences that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Conference&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<Conference>>> ListConferencesWithHttpInfoAsync(string accountId, string name = default(string), string minCreatedTime = default(string), string maxCreatedTime = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->ListConferences");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (minCreatedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "minCreatedTime", minCreatedTime));
            }
            if (maxCreatedTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "maxCreatedTime", maxCreatedTime));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            localVarRequestOptions.Operation = "ConferencesApi.ListConferences";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Conference>>("/accounts/{accountId}/conferences", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConferences", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateConference(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0)
        {
            UpdateConferenceWithHttpInfo(accountId, conferenceId, updateConference);
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateConferenceWithHttpInfo(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConference");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConference");
            }

            // verify the required parameter 'updateConference' is set
            if (updateConference == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateConference' when calling ConferencesApi->UpdateConference");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = updateConference;

            localVarRequestOptions.Operation = "ConferencesApi.UpdateConference";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{accountId}/conferences/{conferenceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConferenceAsync(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateConferenceWithHttpInfoAsync(accountId, conferenceId, updateConference, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Conference Update the conference state.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="updateConference"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateConferenceWithHttpInfoAsync(string accountId, string conferenceId, UpdateConference updateConference, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConference");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConference");
            }

            // verify the required parameter 'updateConference' is set
            if (updateConference == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateConference' when calling ConferencesApi->UpdateConference");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = updateConference;

            localVarRequestOptions.Operation = "ConferencesApi.UpdateConference";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{accountId}/conferences/{conferenceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConference", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateConferenceBxml(string accountId, string conferenceId, string body, int operationIndex = 0)
        {
            UpdateConferenceBxmlWithHttpInfo(accountId, conferenceId, body);
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateConferenceBxmlWithHttpInfo(string accountId, string conferenceId, string body, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceBxml");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceBxml");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'body' when calling ConferencesApi->UpdateConferenceBxml");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConferencesApi.UpdateConferenceBxml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/conferences/{conferenceId}/bxml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConferenceBxml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConferenceBxmlAsync(string accountId, string conferenceId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateConferenceBxmlWithHttpInfoAsync(accountId, conferenceId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Conference BXML Update the conference BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateConferenceBxmlWithHttpInfoAsync(string accountId, string conferenceId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceBxml");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceBxml");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'body' when calling ConferencesApi->UpdateConferenceBxml");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ConferencesApi.UpdateConferenceBxml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/conferences/{conferenceId}/bxml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConferenceBxml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateConferenceMember(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0)
        {
            UpdateConferenceMemberWithHttpInfo(accountId, conferenceId, memberId, updateConferenceMember);
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateConferenceMemberWithHttpInfo(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceMember");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceMember");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->UpdateConferenceMember");
            }

            // verify the required parameter 'updateConferenceMember' is set
            if (updateConferenceMember == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateConferenceMember' when calling ConferencesApi->UpdateConferenceMember");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = updateConferenceMember;

            localVarRequestOptions.Operation = "ConferencesApi.UpdateConferenceMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConferenceMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateConferenceMemberAsync(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateConferenceMemberWithHttpInfoAsync(accountId, conferenceId, memberId, updateConferenceMember, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Conference Member Updates settings for a particular conference member.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="conferenceId">Programmable Voice API Conference ID</param>
        /// <param name="memberId">Programmable Voice API Conference Member ID</param>
        /// <param name="updateConferenceMember"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateConferenceMemberWithHttpInfoAsync(string accountId, string conferenceId, string memberId, UpdateConferenceMember updateConferenceMember, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling ConferencesApi->UpdateConferenceMember");
            }

            // verify the required parameter 'conferenceId' is set
            if (conferenceId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'conferenceId' when calling ConferencesApi->UpdateConferenceMember");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'memberId' when calling ConferencesApi->UpdateConferenceMember");
            }

            // verify the required parameter 'updateConferenceMember' is set
            if (updateConferenceMember == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateConferenceMember' when calling ConferencesApi->UpdateConferenceMember");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("conferenceId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(conferenceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = updateConferenceMember;

            localVarRequestOptions.Operation = "ConferencesApi.UpdateConferenceMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/conferences/{conferenceId}/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConferenceMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
