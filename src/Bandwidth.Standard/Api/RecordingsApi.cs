/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCallTranscription(string accountId, string callId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallTranscriptionWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRecording(string accountId, string callId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordingWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRecordingMedia(string accountId, string callId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordingMediaWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadCallRecording(string accountId, string callId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadCallRecordingWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallRecordingMetadata</returns>
        CallRecordingMetadata GetCallRecording(string accountId, string callId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallRecordingMetadata</returns>
        ApiResponse<CallRecordingMetadata> GetCallRecordingWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranscriptionList</returns>
        TranscriptionList GetCallTranscription(string accountId, string callId, string recordingId, int operationIndex = 0);

        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranscriptionList</returns>
        ApiResponse<TranscriptionList> GetCallTranscriptionWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0);
        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CallRecordingMetadata&gt;</returns>
        List<CallRecordingMetadata> ListAccountCallRecordings(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CallRecordingMetadata&gt;</returns>
        ApiResponse<List<CallRecordingMetadata>> ListAccountCallRecordingsWithHttpInfo(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0);
        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CallRecordingMetadata&gt;</returns>
        List<CallRecordingMetadata> ListCallRecordings(string accountId, string callId, int operationIndex = 0);

        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CallRecordingMetadata&gt;</returns>
        ApiResponse<List<CallRecordingMetadata>> ListCallRecordingsWithHttpInfo(string accountId, string callId, int operationIndex = 0);
        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void TranscribeCallRecording(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0);

        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TranscribeCallRecordingWithHttpInfo(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0);
        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateCallRecordingState(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0);

        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallRecordingStateWithHttpInfo(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallTranscriptionAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallTranscriptionWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordingAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordingMediaAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording&#39;s media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingMediaWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadCallRecordingAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadCallRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecordingMetadata</returns>
        System.Threading.Tasks.Task<CallRecordingMetadata> GetCallRecordingAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecordingMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecordingMetadata>> GetCallRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionList</returns>
        System.Threading.Tasks.Task<TranscriptionList> GetCallTranscriptionAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptionList>> GetCallTranscriptionWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallRecordingMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListAccountCallRecordingsAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CallRecordingMetadata>>> ListAccountCallRecordingsWithHttpInfoAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallRecordingMetadata&gt;</returns>
        System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListCallRecordingsAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CallRecordingMetadata>>> ListCallRecordingsWithHttpInfoAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TranscribeCallRecordingAsync(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TranscribeCallRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallRecordingStateAsync(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallRecordingStateWithHttpInfoAsync(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordingsApi : IRecordingsApiSync, IRecordingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordingsApi : IRecordingsApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordingsApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordingsApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecordingsApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCallTranscription(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            DeleteCallTranscriptionWithHttpInfo(accountId, callId, recordingId);
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> DeleteCallTranscriptionWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteCallTranscription");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteCallTranscription");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteCallTranscription");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DeleteCallTranscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCallTranscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallTranscriptionAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCallTranscriptionWithHttpInfoAsync(accountId, callId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording&#39;s transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> DeleteCallTranscriptionWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteCallTranscription");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteCallTranscription");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteCallTranscription");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DeleteCallTranscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCallTranscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRecording(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            DeleteRecordingWithHttpInfo(accountId, callId, recordingId);
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> DeleteRecordingWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecording");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DeleteRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordingAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRecordingWithHttpInfoAsync(accountId, callId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a &#x60;204&#x60; is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> DeleteRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecording");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DeleteRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording&#39;s media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRecordingMedia(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            DeleteRecordingMediaWithHttpInfo(accountId, callId, recordingId);
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording&#39;s media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> DeleteRecordingMediaWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecordingMedia");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecordingMedia");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecordingMedia");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DeleteRecordingMedia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecordingMedia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording&#39;s media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordingMediaAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRecordingMediaWithHttpInfoAsync(accountId, callId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording&#39;s media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> DeleteRecordingMediaWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecordingMedia");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecordingMedia");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecordingMedia");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DeleteRecordingMedia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRecordingMedia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadCallRecording(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadCallRecordingWithHttpInfo(accountId, callId, recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Bandwidth.Standard.Client.ApiResponse<System.IO.Stream> DownloadCallRecordingWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DownloadCallRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DownloadCallRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DownloadCallRecording");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DownloadCallRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadCallRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadCallRecordingAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadCallRecordingWithHttpInfoAsync(accountId, callId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<System.IO.Stream>> DownloadCallRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DownloadCallRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DownloadCallRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DownloadCallRecording");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.DownloadCallRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadCallRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallRecordingMetadata</returns>
        public CallRecordingMetadata GetCallRecording(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<CallRecordingMetadata> localVarResponse = GetCallRecordingWithHttpInfo(accountId, callId, recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallRecordingMetadata</returns>
        public Bandwidth.Standard.Client.ApiResponse<CallRecordingMetadata> GetCallRecordingWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallRecording");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.GetCallRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CallRecordingMetadata>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallRecordingMetadata</returns>
        public async System.Threading.Tasks.Task<CallRecordingMetadata> GetCallRecordingAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<CallRecordingMetadata> localVarResponse = await GetCallRecordingWithHttpInfoAsync(accountId, callId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallRecordingMetadata)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<CallRecordingMetadata>> GetCallRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallRecording");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.GetCallRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CallRecordingMetadata>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranscriptionList</returns>
        public TranscriptionList GetCallTranscription(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<TranscriptionList> localVarResponse = GetCallTranscriptionWithHttpInfo(accountId, callId, recordingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranscriptionList</returns>
        public Bandwidth.Standard.Client.ApiResponse<TranscriptionList> GetCallTranscriptionWithHttpInfo(string accountId, string callId, string recordingId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallTranscription");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallTranscription");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallTranscription");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.GetCallTranscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TranscriptionList>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallTranscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranscriptionList</returns>
        public async System.Threading.Tasks.Task<TranscriptionList> GetCallTranscriptionAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<TranscriptionList> localVarResponse = await GetCallTranscriptionWithHttpInfoAsync(accountId, callId, recordingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [&#x60;&lt;PlayAudio&gt;&#x60;](/docs/voice/bxml/playAudio) and [&#x60;&lt;SpeakSentence&gt;&#x60;](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [&#x60;&lt;Transfer&gt;&#x60;](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranscriptionList)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<TranscriptionList>> GetCallTranscriptionWithHttpInfoAsync(string accountId, string callId, string recordingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallTranscription");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallTranscription");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallTranscription");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.GetCallTranscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TranscriptionList>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallTranscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CallRecordingMetadata&gt;</returns>
        public List<CallRecordingMetadata> ListAccountCallRecordings(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>> localVarResponse = ListAccountCallRecordingsWithHttpInfo(accountId, to, from, minStartTime, maxStartTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CallRecordingMetadata&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>> ListAccountCallRecordingsWithHttpInfo(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListAccountCallRecordings");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (minStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "minStartTime", minStartTime));
            }
            if (maxStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "maxStartTime", maxStartTime));
            }

            localVarRequestOptions.Operation = "RecordingsApi.ListAccountCallRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CallRecordingMetadata>>("/accounts/{accountId}/recordings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountCallRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallRecordingMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListAccountCallRecordingsAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>> localVarResponse = await ListAccountCallRecordingsWithHttpInfoAsync(accountId, to, from, minStartTime, maxStartTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>>> ListAccountCallRecordingsWithHttpInfoAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListAccountCallRecordings");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (minStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "minStartTime", minStartTime));
            }
            if (maxStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "maxStartTime", maxStartTime));
            }

            localVarRequestOptions.Operation = "RecordingsApi.ListAccountCallRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CallRecordingMetadata>>("/accounts/{accountId}/recordings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountCallRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CallRecordingMetadata&gt;</returns>
        public List<CallRecordingMetadata> ListCallRecordings(string accountId, string callId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>> localVarResponse = ListCallRecordingsWithHttpInfo(accountId, callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CallRecordingMetadata&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>> ListCallRecordingsWithHttpInfo(string accountId, string callId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListCallRecordings");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->ListCallRecordings");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.ListCallRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CallRecordingMetadata>>("/accounts/{accountId}/calls/{callId}/recordings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCallRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallRecordingMetadata&gt;</returns>
        public async System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListCallRecordingsAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>> localVarResponse = await ListCallRecordingsWithHttpInfoAsync(accountId, callId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<CallRecordingMetadata>>> ListCallRecordingsWithHttpInfoAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListCallRecordings");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->ListCallRecordings");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter

            localVarRequestOptions.Operation = "RecordingsApi.ListCallRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CallRecordingMetadata>>("/accounts/{accountId}/calls/{callId}/recordings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCallRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void TranscribeCallRecording(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0)
        {
            TranscribeCallRecordingWithHttpInfo(accountId, callId, recordingId, transcribeRecording);
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> TranscribeCallRecordingWithHttpInfo(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->TranscribeCallRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->TranscribeCallRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->TranscribeCallRecording");
            }

            // verify the required parameter 'transcribeRecording' is set
            if (transcribeRecording == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'transcribeRecording' when calling RecordingsApi->TranscribeCallRecording");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter
            localVarRequestOptions.Data = transcribeRecording;

            localVarRequestOptions.Operation = "RecordingsApi.TranscribeCallRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranscribeCallRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TranscribeCallRecordingAsync(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TranscribeCallRecordingWithHttpInfoAsync(accountId, callId, recordingId, transcribeRecording, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="recordingId">Programmable Voice API Recording ID</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> TranscribeCallRecordingWithHttpInfoAsync(string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->TranscribeCallRecording");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->TranscribeCallRecording");
            }

            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->TranscribeCallRecording");
            }

            // verify the required parameter 'transcribeRecording' is set
            if (transcribeRecording == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'transcribeRecording' when calling RecordingsApi->TranscribeCallRecording");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.PathParameters.Add("recordingId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(recordingId)); // path parameter
            localVarRequestOptions.Data = transcribeRecording;

            localVarRequestOptions.Operation = "RecordingsApi.TranscribeCallRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranscribeCallRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateCallRecordingState(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0)
        {
            UpdateCallRecordingStateWithHttpInfo(accountId, callId, updateCallRecording);
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateCallRecordingStateWithHttpInfo(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->UpdateCallRecordingState");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->UpdateCallRecordingState");
            }

            // verify the required parameter 'updateCallRecording' is set
            if (updateCallRecording == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateCallRecording' when calling RecordingsApi->UpdateCallRecordingState");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateCallRecording;

            localVarRequestOptions.Operation = "RecordingsApi.UpdateCallRecordingState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/calls/{callId}/recording", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCallRecordingState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallRecordingStateAsync(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCallRecordingStateWithHttpInfoAsync(accountId, callId, updateCallRecording, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID</param>
        /// <param name="callId">Programmable Voice API Call ID</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateCallRecordingStateWithHttpInfoAsync(string accountId, string callId, UpdateCallRecording updateCallRecording, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->UpdateCallRecordingState");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->UpdateCallRecordingState");
            }

            // verify the required parameter 'updateCallRecording' is set
            if (updateCallRecording == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateCallRecording' when calling RecordingsApi->UpdateCallRecordingState");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateCallRecording;

            localVarRequestOptions.Operation = "RecordingsApi.UpdateCallRecordingState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/calls/{callId}/recording", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCallRecordingState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
