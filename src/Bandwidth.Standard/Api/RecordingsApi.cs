/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns></returns>
        void DeleteCallTranscription (string accountId, string callId, string recordingId);

        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCallTranscriptionWithHttpInfo (string accountId, string callId, string recordingId);
        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns></returns>
        void DeleteRecording (string accountId, string callId, string recordingId);

        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordingWithHttpInfo (string accountId, string callId, string recordingId);
        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns></returns>
        void DeleteRecordingMedia (string accountId, string callId, string recordingId);

        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRecordingMediaWithHttpInfo (string accountId, string callId, string recordingId);
        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadCallRecording (string accountId, string callId, string recordingId);

        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadCallRecordingWithHttpInfo (string accountId, string callId, string recordingId);
        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>CallRecordingMetadata</returns>
        CallRecordingMetadata GetCallRecording (string accountId, string callId, string recordingId);

        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of CallRecordingMetadata</returns>
        ApiResponse<CallRecordingMetadata> GetCallRecordingWithHttpInfo (string accountId, string callId, string recordingId);
        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>TranscriptionList</returns>
        TranscriptionList GetCallTranscription (string accountId, string callId, string recordingId);

        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of TranscriptionList</returns>
        ApiResponse<TranscriptionList> GetCallTranscriptionWithHttpInfo (string accountId, string callId, string recordingId);
        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <returns>List<CallRecordingMetadata></returns>
        List<CallRecordingMetadata> ListAccountCallRecordings (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string));

        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <returns>ApiResponse of List<CallRecordingMetadata></returns>
        ApiResponse<List<CallRecordingMetadata>> ListAccountCallRecordingsWithHttpInfo (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string));
        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <returns>List<CallRecordingMetadata></returns>
        List<CallRecordingMetadata> ListCallRecordings (string accountId, string callId);

        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <returns>ApiResponse of List<CallRecordingMetadata></returns>
        ApiResponse<List<CallRecordingMetadata>> ListCallRecordingsWithHttpInfo (string accountId, string callId);
        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <returns></returns>
        void TranscribeCallRecording (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording);

        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TranscribeCallRecordingWithHttpInfo (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording);
        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <returns></returns>
        void UpdateCallRecordingState (string accountId, string callId, UpdateCallRecording updateCallRecording);

        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallRecordingStateWithHttpInfo (string accountId, string callId, UpdateCallRecording updateCallRecording);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCallTranscriptionAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Transcription
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallTranscriptionWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordingAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Recording
        /// </summary>
        /// <remarks>
        /// Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRecordingMediaAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete Recording Media
        /// </summary>
        /// <remarks>
        /// Deletes the specified recording's media.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingMediaWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadCallRecordingAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download Recording
        /// </summary>
        /// <remarks>
        /// Downloads the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadCallRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingMetadata</returns>
        System.Threading.Tasks.Task<CallRecordingMetadata> GetCallRecordingAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Recording
        /// </summary>
        /// <remarks>
        /// Returns metadata for the specified recording.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallRecordingMetadata>> GetCallRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TranscriptionList</returns>
        System.Threading.Tasks.Task<TranscriptionList> GetCallTranscriptionAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Transcription
        /// </summary>
        /// <remarks>
        /// Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TranscriptionList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranscriptionList>> GetCallTranscriptionWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CallRecordingMetadata></returns>
        System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListAccountCallRecordingsAsync (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CallRecordingMetadata>>> ListAccountCallRecordingsWithHttpInfoAsync (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CallRecordingMetadata></returns>
        System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListCallRecordingsAsync (string accountId, string callId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Call Recordings
        /// </summary>
        /// <remarks>
        /// Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CallRecordingMetadata>>> ListCallRecordingsWithHttpInfoAsync (string accountId, string callId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TranscribeCallRecordingAsync (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Transcription Request
        /// </summary>
        /// <remarks>
        /// Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TranscribeCallRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallRecordingStateAsync (string accountId, string callId, UpdateCallRecording updateCallRecording, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Recording
        /// </summary>
        /// <remarks>
        /// Pause or resume a recording on an active phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallRecordingStateWithHttpInfoAsync (string accountId, string callId, UpdateCallRecording updateCallRecording, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordingsApi : IRecordingsApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordingsApi(String basePath)
        {
            this.Configuration = new Bandwidth.Standard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class
        /// </summary>
        /// <returns></returns>
        public RecordingsApi()
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.Default;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordingsApi(Bandwidth.Standard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bandwidth.Standard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns></returns>
        public void DeleteCallTranscription (string accountId, string callId, string recordingId)
        {
             DeleteCallTranscriptionWithHttpInfo(accountId, callId, recordingId);
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCallTranscriptionWithHttpInfo (string accountId, string callId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteCallTranscription");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteCallTranscription");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteCallTranscription");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallTranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCallTranscriptionAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteCallTranscriptionWithHttpInfoAsync(accountId, callId, recordingId, cancellationToken);

        }

        /// <summary>
        /// Delete Transcription Deletes the specified recording's transcription.  Note: After the deletion is requested and a `204` is returned, the transcription will not be accessible anymore. However, it is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCallTranscriptionWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteCallTranscription");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteCallTranscription");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteCallTranscription");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCallTranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns></returns>
        public void DeleteRecording (string accountId, string callId, string recordingId)
        {
             DeleteRecordingWithHttpInfo(accountId, callId, recordingId);
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecordingWithHttpInfo (string accountId, string callId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordingAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteRecordingWithHttpInfoAsync(accountId, callId, recordingId, cancellationToken);

        }

        /// <summary>
        /// Delete Recording Delete the recording information, media and transcription.  Note: After the deletion is requested and a `204` is returned, neither the recording metadata nor the actual media nor its transcription will be accessible anymore. However, the media of the specified recording is not deleted immediately. This deletion process, while transparent and irreversible, can take an additional 24 to 48 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording's media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns></returns>
        public void DeleteRecordingMedia (string accountId, string callId, string recordingId)
        {
             DeleteRecordingMediaWithHttpInfo(accountId, callId, recordingId);
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording's media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRecordingMediaWithHttpInfo (string accountId, string callId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecordingMedia");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecordingMedia");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecordingMedia");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecordingMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording's media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRecordingMediaAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteRecordingMediaWithHttpInfoAsync(accountId, callId, recordingId, cancellationToken);

        }

        /// <summary>
        /// Delete Recording Media Deletes the specified recording's media.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRecordingMediaWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DeleteRecordingMedia");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DeleteRecordingMedia");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DeleteRecordingMedia");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRecordingMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadCallRecording (string accountId, string callId, string recordingId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = DownloadCallRecordingWithHttpInfo(accountId, callId, recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> DownloadCallRecordingWithHttpInfo (string accountId, string callId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DownloadCallRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DownloadCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DownloadCallRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadCallRecordingAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await DownloadCallRecordingWithHttpInfoAsync(accountId, callId, recordingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download Recording Downloads the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadCallRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->DownloadCallRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->DownloadCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->DownloadCallRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "audio/vnd.wave",
                "audio/mpeg",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>CallRecordingMetadata</returns>
        public CallRecordingMetadata GetCallRecording (string accountId, string callId, string recordingId)
        {
             ApiResponse<CallRecordingMetadata> localVarResponse = GetCallRecordingWithHttpInfo(accountId, callId, recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of CallRecordingMetadata</returns>
        public ApiResponse<CallRecordingMetadata> GetCallRecordingWithHttpInfo (string accountId, string callId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingMetadata)));
        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CallRecordingMetadata</returns>
        public async System.Threading.Tasks.Task<CallRecordingMetadata> GetCallRecordingAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CallRecordingMetadata> localVarResponse = await GetCallRecordingWithHttpInfoAsync(accountId, callId, recordingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Recording Returns metadata for the specified recording.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CallRecordingMetadata)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CallRecordingMetadata>> GetCallRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CallRecordingMetadata>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CallRecordingMetadata) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CallRecordingMetadata)));
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>TranscriptionList</returns>
        public TranscriptionList GetCallTranscription (string accountId, string callId, string recordingId)
        {
             ApiResponse<TranscriptionList> localVarResponse = GetCallTranscriptionWithHttpInfo(accountId, callId, recordingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <returns>ApiResponse of TranscriptionList</returns>
        public ApiResponse<TranscriptionList> GetCallTranscriptionWithHttpInfo (string accountId, string callId, string recordingId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallTranscription");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallTranscription");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallTranscription");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallTranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TranscriptionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TranscriptionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TranscriptionList)));
        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TranscriptionList</returns>
        public async System.Threading.Tasks.Task<TranscriptionList> GetCallTranscriptionAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TranscriptionList> localVarResponse = await GetCallTranscriptionWithHttpInfoAsync(accountId, callId, recordingId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Transcription Downloads the specified transcription.  If the transcribed recording was multi-channel, then there will be 2 transcripts. The caller/called party transcript will be the first item while [`<PlayAudio>`](/docs/voice/bxml/playAudio) and [`<SpeakSentence>`](/docs/voice/bxml/speakSentence) transcript will be the second item. During a [`<Transfer>`](/docs/voice/bxml/transfer) the A-leg transcript will be the first item while the B-leg transcript will be the second item.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TranscriptionList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TranscriptionList>> GetCallTranscriptionWithHttpInfoAsync (string accountId, string callId, string recordingId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->GetCallTranscription");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->GetCallTranscription");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->GetCallTranscription");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallTranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TranscriptionList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TranscriptionList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TranscriptionList)));
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <returns>List<CallRecordingMetadata></returns>
        public List<CallRecordingMetadata> ListAccountCallRecordings (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string))
        {
             ApiResponse<List<CallRecordingMetadata>> localVarResponse = ListAccountCallRecordingsWithHttpInfo(accountId, to, from, minStartTime, maxStartTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <returns>ApiResponse of List<CallRecordingMetadata></returns>
        public ApiResponse<List<CallRecordingMetadata>> ListAccountCallRecordingsWithHttpInfo (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListAccountCallRecordings");

            var localVarPath = "/accounts/{accountId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (minStartTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minStartTime", minStartTime)); // query parameter
            if (maxStartTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStartTime", maxStartTime)); // query parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountCallRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CallRecordingMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CallRecordingMetadata>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CallRecordingMetadata>)));
        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CallRecordingMetadata></returns>
        public async System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListAccountCallRecordingsAsync (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CallRecordingMetadata>> localVarResponse = await ListAccountCallRecordingsWithHttpInfoAsync(accountId, to, from, minStartTime, maxStartTime, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Call Recordings Returns a list of metadata for the recordings associated with the specified account. The list can be filtered by the optional from, to, minStartTime, and maxStartTime arguments. The list is capped at 1000 entries and may be empty if no recordings match the specified criteria.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to recordings which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to recordings which have a &#x60;startTime&#x60; before &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CallRecordingMetadata>>> ListAccountCallRecordingsWithHttpInfoAsync (string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListAccountCallRecordings");

            var localVarPath = "/accounts/{accountId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (minStartTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "minStartTime", minStartTime)); // query parameter
            if (maxStartTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxStartTime", maxStartTime)); // query parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAccountCallRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CallRecordingMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CallRecordingMetadata>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CallRecordingMetadata>)));
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <returns>List<CallRecordingMetadata></returns>
        public List<CallRecordingMetadata> ListCallRecordings (string accountId, string callId)
        {
             ApiResponse<List<CallRecordingMetadata>> localVarResponse = ListCallRecordingsWithHttpInfo(accountId, callId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <returns>ApiResponse of List<CallRecordingMetadata></returns>
        public ApiResponse<List<CallRecordingMetadata>> ListCallRecordingsWithHttpInfo (string accountId, string callId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListCallRecordings");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->ListCallRecordings");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CallRecordingMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CallRecordingMetadata>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CallRecordingMetadata>)));
        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CallRecordingMetadata></returns>
        public async System.Threading.Tasks.Task<List<CallRecordingMetadata>> ListCallRecordingsAsync (string accountId, string callId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CallRecordingMetadata>> localVarResponse = await ListCallRecordingsWithHttpInfoAsync(accountId, callId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Call Recordings Returns a (potentially empty) list of metadata for the recordings that took place during the specified call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CallRecordingMetadata&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CallRecordingMetadata>>> ListCallRecordingsWithHttpInfoAsync (string accountId, string callId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->ListCallRecordings");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->ListCallRecordings");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCallRecordings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CallRecordingMetadata>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CallRecordingMetadata>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CallRecordingMetadata>)));
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <returns></returns>
        public void TranscribeCallRecording (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording)
        {
             TranscribeCallRecordingWithHttpInfo(accountId, callId, recordingId, transcribeRecording);
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TranscribeCallRecordingWithHttpInfo (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->TranscribeCallRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->TranscribeCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->TranscribeCallRecording");
            // verify the required parameter 'transcribeRecording' is set
            if (transcribeRecording == null)
                throw new ApiException(400, "Missing required parameter 'transcribeRecording' when calling RecordingsApi->TranscribeCallRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (transcribeRecording != null && transcribeRecording.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transcribeRecording); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transcribeRecording; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscribeCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TranscribeCallRecordingAsync (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, CancellationToken cancellationToken = default(CancellationToken))
        {
             await TranscribeCallRecordingWithHttpInfoAsync(accountId, callId, recordingId, transcribeRecording, cancellationToken);

        }

        /// <summary>
        /// Create Transcription Request Generate the transcription for a specific recording. Transcription can succeed only for recordings of length greater than 500 milliseconds and less than 4 hours.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="recordingId">Programmable Voice API Recording ID.</param>
        /// <param name="transcribeRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TranscribeCallRecordingWithHttpInfoAsync (string accountId, string callId, string recordingId, TranscribeRecording transcribeRecording, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->TranscribeCallRecording");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->TranscribeCallRecording");
            // verify the required parameter 'recordingId' is set
            if (recordingId == null)
                throw new ApiException(400, "Missing required parameter 'recordingId' when calling RecordingsApi->TranscribeCallRecording");
            // verify the required parameter 'transcribeRecording' is set
            if (transcribeRecording == null)
                throw new ApiException(400, "Missing required parameter 'transcribeRecording' when calling RecordingsApi->TranscribeCallRecording");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (recordingId != null) localVarPathParams.Add("recordingId", this.Configuration.ApiClient.ParameterToString(recordingId)); // path parameter
            if (transcribeRecording != null && transcribeRecording.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transcribeRecording); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transcribeRecording; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranscribeCallRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <returns></returns>
        public void UpdateCallRecordingState (string accountId, string callId, UpdateCallRecording updateCallRecording)
        {
             UpdateCallRecordingStateWithHttpInfo(accountId, callId, updateCallRecording);
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCallRecordingStateWithHttpInfo (string accountId, string callId, UpdateCallRecording updateCallRecording)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->UpdateCallRecordingState");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->UpdateCallRecordingState");
            // verify the required parameter 'updateCallRecording' is set
            if (updateCallRecording == null)
                throw new ApiException(400, "Missing required parameter 'updateCallRecording' when calling RecordingsApi->UpdateCallRecordingState");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (updateCallRecording != null && updateCallRecording.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallRecording); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallRecording; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallRecordingState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallRecordingStateAsync (string accountId, string callId, UpdateCallRecording updateCallRecording, CancellationToken cancellationToken = default(CancellationToken))
        {
             await UpdateCallRecordingStateWithHttpInfoAsync(accountId, callId, updateCallRecording, cancellationToken);

        }

        /// <summary>
        /// Update Recording Pause or resume a recording on an active phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCallRecording"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallRecordingStateWithHttpInfoAsync (string accountId, string callId, UpdateCallRecording updateCallRecording, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling RecordingsApi->UpdateCallRecordingState");
            // verify the required parameter 'callId' is set
            if (callId == null)
                throw new ApiException(400, "Missing required parameter 'callId' when calling RecordingsApi->UpdateCallRecordingState");
            // verify the required parameter 'updateCallRecording' is set
            if (updateCallRecording == null)
                throw new ApiException(400, "Missing required parameter 'updateCallRecording' when calling RecordingsApi->UpdateCallRecordingState");

            var localVarPath = "/accounts/{accountId}/calls/{callId}/recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (callId != null) localVarPathParams.Add("callId", this.Configuration.ApiClient.ParameterToString(callId)); // path parameter
            if (updateCallRecording != null && updateCallRecording.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallRecording); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallRecording; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallRecordingState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
