/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <returns>Message</returns>
        Message CreateMessage (string accountId, MessageRequest messageRequest);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> CreateMessageWithHttpInfo (string accountId, MessageRequest messageRequest);
        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <returns>MessagesList</returns>
        MessagesList ListMessages (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?));

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <returns>ApiResponse of MessagesList</returns>
        ApiResponse<MessagesList> ListMessagesWithHttpInfo (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> CreateMessageAsync (string accountId, MessageRequest messageRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> CreateMessageWithHttpInfoAsync (string accountId, MessageRequest messageRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessagesList</returns>
        System.Threading.Tasks.Task<MessagesList> ListMessagesAsync (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessagesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesList>> ListMessagesWithHttpInfoAsync (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi(String basePath)
        {
            this.Configuration = new Bandwidth.Standard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessagesApi()
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.Default;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesApi(Bandwidth.Standard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bandwidth.Standard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <returns>Message</returns>
        public Message CreateMessage (string accountId, MessageRequest messageRequest)
        {
             ApiResponse<Message> localVarResponse = CreateMessageWithHttpInfo(accountId, messageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <returns>ApiResponse of Message</returns>
        public ApiResponse<Message> CreateMessageWithHttpInfo (string accountId, MessageRequest messageRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->CreateMessage");
            // verify the required parameter 'messageRequest' is set
            if (messageRequest == null)
                throw new ApiException(400, "Missing required parameter 'messageRequest' when calling MessagesApi->CreateMessage");

            var localVarPath = "/users/{accountId}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageRequest != null && messageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> CreateMessageAsync (string accountId, MessageRequest messageRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Message> localVarResponse = await CreateMessageWithHttpInfoAsync(accountId, messageRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Message>> CreateMessageWithHttpInfoAsync (string accountId, MessageRequest messageRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->CreateMessage");
            // verify the required parameter 'messageRequest' is set
            if (messageRequest == null)
                throw new ApiException(400, "Missing required parameter 'messageRequest' when calling MessagesApi->CreateMessage");

            var localVarPath = "/users/{accountId}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageRequest != null && messageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <returns>MessagesList</returns>
        public MessagesList ListMessages (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?))
        {
             ApiResponse<MessagesList> localVarResponse = ListMessagesWithHttpInfo(accountId, messageId, sourceTn, destinationTn, messageStatus, messageDirection, carrierName, messageType, errorCode, fromDateTime, toDateTime, campaignId, sort, pageToken, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <returns>ApiResponse of MessagesList</returns>
        public ApiResponse<MessagesList> ListMessagesWithHttpInfo (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->ListMessages");

            var localVarPath = "/users/{accountId}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageId", messageId)); // query parameter
            if (sourceTn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceTn", sourceTn)); // query parameter
            if (destinationTn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationTn", destinationTn)); // query parameter
            if (messageStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageStatus", messageStatus)); // query parameter
            if (messageDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageDirection", messageDirection)); // query parameter
            if (carrierName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrierName", carrierName)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageType", messageType)); // query parameter
            if (errorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorCode", errorCode)); // query parameter
            if (fromDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDateTime", fromDateTime)); // query parameter
            if (toDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDateTime", toDateTime)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessagesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesList)));
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessagesList</returns>
        public async System.Threading.Tasks.Task<MessagesList> ListMessagesAsync (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessagesList> localVarResponse = await ListMessagesWithHttpInfoAsync(accountId, messageId, sourceTn, destinationTn, messageStatus, messageDirection, carrierName, messageType, errorCode, fromDateTime, toDateTime, campaignId, sort, pageToken, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="campaignId">The campaign ID of the message. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessagesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesList>> ListMessagesWithHttpInfoAsync (string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string campaignId = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->ListMessages");

            var localVarPath = "/users/{accountId}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageId", messageId)); // query parameter
            if (sourceTn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceTn", sourceTn)); // query parameter
            if (destinationTn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationTn", destinationTn)); // query parameter
            if (messageStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageStatus", messageStatus)); // query parameter
            if (messageDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageDirection", messageDirection)); // query parameter
            if (carrierName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrierName", carrierName)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "messageType", messageType)); // query parameter
            if (errorCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "errorCode", errorCode)); // query parameter
            if (fromDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDateTime", fromDateTime)); // query parameter
            if (toDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDateTime", toDateTime)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (pageToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageToken", pageToken)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessagesList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesList)));
        }

    }
}
