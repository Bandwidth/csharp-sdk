/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message CreateMessage(string accountId, MessageRequest messageRequest, int operationIndex = 0);

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> CreateMessageWithHttpInfo(string accountId, MessageRequest messageRequest, int operationIndex = 0);
        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessagesList</returns>
        MessagesList ListMessages(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessagesList</returns>
        ApiResponse<MessagesList> ListMessagesWithHttpInfo(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> CreateMessageAsync(string accountId, MessageRequest messageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending text messages and picture messages using V2 messaging.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> CreateMessageWithHttpInfoAsync(string accountId, MessageRequest messageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessagesList</returns>
        System.Threading.Tasks.Task<MessagesList> ListMessagesAsync(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages based on query parameters.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessagesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesList>> ListMessagesWithHttpInfoAsync(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagesApi : IMessagesApiSync, IMessagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagesApi : IMessagesApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessagesApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessagesApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MessagesApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message CreateMessage(string accountId, MessageRequest messageRequest, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<Message> localVarResponse = CreateMessageWithHttpInfo(accountId, messageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Bandwidth.Standard.Client.ApiResponse<Message> CreateMessageWithHttpInfo(string accountId, MessageRequest messageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->CreateMessage");
            }

            // verify the required parameter 'messageRequest' is set
            if (messageRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'messageRequest' when calling MessagesApi->CreateMessage");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = messageRequest;

            localVarRequestOptions.Operation = "MessagesApi.CreateMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/users/{accountId}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> CreateMessageAsync(string accountId, MessageRequest messageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<Message> localVarResponse = await CreateMessageWithHttpInfoAsync(accountId, messageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Message Endpoint for sending text messages and picture messages using V2 messaging.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Message>> CreateMessageWithHttpInfoAsync(string accountId, MessageRequest messageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->CreateMessage");
            }

            // verify the required parameter 'messageRequest' is set
            if (messageRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'messageRequest' when calling MessagesApi->CreateMessage");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = messageRequest;

            localVarRequestOptions.Operation = "MessagesApi.CreateMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/users/{accountId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessagesList</returns>
        public MessagesList ListMessages(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<MessagesList> localVarResponse = ListMessagesWithHttpInfo(accountId, messageId, sourceTn, destinationTn, messageStatus, messageDirection, carrierName, messageType, errorCode, fromDateTime, toDateTime, sort, pageToken, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessagesList</returns>
        public Bandwidth.Standard.Client.ApiResponse<MessagesList> ListMessagesWithHttpInfo(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->ListMessages");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (messageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            }
            if (sourceTn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "sourceTn", sourceTn));
            }
            if (destinationTn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "destinationTn", destinationTn));
            }
            if (messageStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageStatus", messageStatus));
            }
            if (messageDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageDirection", messageDirection));
            }
            if (carrierName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "carrierName", carrierName));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageType", messageType));
            }
            if (errorCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "errorCode", errorCode));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "fromDateTime", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "toDateTime", toDateTime));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "MessagesApi.ListMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MessagesList>("/users/{accountId}/messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessagesList</returns>
        public async System.Threading.Tasks.Task<MessagesList> ListMessagesAsync(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<MessagesList> localVarResponse = await ListMessagesWithHttpInfoAsync(accountId, messageId, sourceTn, destinationTn, messageStatus, messageDirection, carrierName, messageType, errorCode, fromDateTime, toDateTime, sort, pageToken, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Messages Returns a list of messages based on query parameters.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="messageId">The ID of the message to search for. Special characters need to be encoded using URL encoding. Message IDs could come in different formats, e.g., 9e0df4ca-b18d-40d7-a59f-82fcdf5ae8e6 and 1589228074636lm4k2je7j7jklbn2 are valid message ID formats. Note that you must include at least one query parameter. (optional)</param>
        /// <param name="sourceTn">The phone number that sent the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="destinationTn">The phone number that received the message. Accepted values are: a single full phone number a comma separated list of full phone numbers (maximum of 10) or a single partial phone number (minimum of 5 characters e.g. &#39;%2B1919&#39;). (optional)</param>
        /// <param name="messageStatus">The status of the message. One of RECEIVED QUEUED SENDING SENT FAILED DELIVERED ACCEPTED UNDELIVERED. (optional)</param>
        /// <param name="messageDirection">The direction of the message. One of INBOUND OUTBOUND. (optional)</param>
        /// <param name="carrierName">The name of the carrier used for this message. Possible values include but are not limited to Verizon and TMobile. Special characters need to be encoded using URL encoding (i.e. AT&amp;T should be passed as AT%26T). (optional)</param>
        /// <param name="messageType">The type of message. Either sms or mms. (optional)</param>
        /// <param name="errorCode">The error code of the message. (optional)</param>
        /// <param name="fromDateTime">The start of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="toDateTime">The end of the date range to search in ISO 8601 format. Uses the message receive time. The date range to search in is currently 14 days. (optional)</param>
        /// <param name="sort">The field and direction to sort by combined with a colon. Direction is either asc or desc. (optional)</param>
        /// <param name="pageToken">A base64 encoded value used for pagination of results. (optional)</param>
        /// <param name="limit">The maximum records requested in search result. Default 100. The sum of limit and after cannot be more than 10000. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessagesList)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<MessagesList>> ListMessagesWithHttpInfoAsync(string accountId, string messageId = default(string), string sourceTn = default(string), string destinationTn = default(string), MessageStatusEnum? messageStatus = default(MessageStatusEnum?), ListMessageDirectionEnum? messageDirection = default(ListMessageDirectionEnum?), string carrierName = default(string), MessageTypeEnum? messageType = default(MessageTypeEnum?), int? errorCode = default(int?), string fromDateTime = default(string), string toDateTime = default(string), string sort = default(string), string pageToken = default(string), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MessagesApi->ListMessages");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (messageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageId", messageId));
            }
            if (sourceTn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "sourceTn", sourceTn));
            }
            if (destinationTn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "destinationTn", destinationTn));
            }
            if (messageStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageStatus", messageStatus));
            }
            if (messageDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageDirection", messageDirection));
            }
            if (carrierName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "carrierName", carrierName));
            }
            if (messageType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "messageType", messageType));
            }
            if (errorCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "errorCode", errorCode));
            }
            if (fromDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "fromDateTime", fromDateTime));
            }
            if (toDateTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "toDateTime", toDateTime));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "MessagesApi.ListMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MessagesList>("/users/{accountId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
