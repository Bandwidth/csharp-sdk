/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultiChannelApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Multi-Channel Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending Multi-Channel messages.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMultiChannelMessageResponse</returns>
        CreateMultiChannelMessageResponse CreateMultiChannelMessage(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0);

        /// <summary>
        /// Create Multi-Channel Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending Multi-Channel messages.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMultiChannelMessageResponse</returns>
        ApiResponse<CreateMultiChannelMessageResponse> CreateMultiChannelMessageWithHttpInfo(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultiChannelApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Multi-Channel Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending Multi-Channel messages.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMultiChannelMessageResponse</returns>
        System.Threading.Tasks.Task<CreateMultiChannelMessageResponse> CreateMultiChannelMessageAsync(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Multi-Channel Message
        /// </summary>
        /// <remarks>
        /// Endpoint for sending Multi-Channel messages.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMultiChannelMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMultiChannelMessageResponse>> CreateMultiChannelMessageWithHttpInfoAsync(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMultiChannelApi : IMultiChannelApiSync, IMultiChannelApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MultiChannelApi : IMultiChannelApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultiChannelApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultiChannelApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MultiChannelApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MultiChannelApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Multi-Channel Message Endpoint for sending Multi-Channel messages.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMultiChannelMessageResponse</returns>
        public CreateMultiChannelMessageResponse CreateMultiChannelMessage(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<CreateMultiChannelMessageResponse> localVarResponse = CreateMultiChannelMessageWithHttpInfo(accountId, multiChannelMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Multi-Channel Message Endpoint for sending Multi-Channel messages.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMultiChannelMessageResponse</returns>
        public Bandwidth.Standard.Client.ApiResponse<CreateMultiChannelMessageResponse> CreateMultiChannelMessageWithHttpInfo(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MultiChannelApi->CreateMultiChannelMessage");
            }

            // verify the required parameter 'multiChannelMessageRequest' is set
            if (multiChannelMessageRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'multiChannelMessageRequest' when calling MultiChannelApi->CreateMultiChannelMessage");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = multiChannelMessageRequest;

            localVarRequestOptions.Operation = "MultiChannelApi.CreateMultiChannelMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMultiChannelMessageResponse>("/users/{accountId}/messages/multiChannel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMultiChannelMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Multi-Channel Message Endpoint for sending Multi-Channel messages.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMultiChannelMessageResponse</returns>
        public async System.Threading.Tasks.Task<CreateMultiChannelMessageResponse> CreateMultiChannelMessageAsync(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<CreateMultiChannelMessageResponse> localVarResponse = await CreateMultiChannelMessageWithHttpInfoAsync(accountId, multiChannelMessageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Multi-Channel Message Endpoint for sending Multi-Channel messages.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="multiChannelMessageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMultiChannelMessageResponse)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<CreateMultiChannelMessageResponse>> CreateMultiChannelMessageWithHttpInfoAsync(string accountId, MultiChannelMessageRequest multiChannelMessageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MultiChannelApi->CreateMultiChannelMessage");
            }

            // verify the required parameter 'multiChannelMessageRequest' is set
            if (multiChannelMessageRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'multiChannelMessageRequest' when calling MultiChannelApi->CreateMultiChannelMessage");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = multiChannelMessageRequest;

            localVarRequestOptions.Operation = "MultiChannelApi.CreateMultiChannelMessage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMultiChannelMessageResponse>("/users/{accountId}/messages/multiChannel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMultiChannelMessage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
