/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessagingCodeResponse</returns>
        MessagingCodeResponse GenerateMessagingCode(string accountId, CodeRequest codeRequest, int operationIndex = 0);

        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessagingCodeResponse</returns>
        ApiResponse<MessagingCodeResponse> GenerateMessagingCodeWithHttpInfo(string accountId, CodeRequest codeRequest, int operationIndex = 0);
        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VoiceCodeResponse</returns>
        VoiceCodeResponse GenerateVoiceCode(string accountId, CodeRequest codeRequest, int operationIndex = 0);

        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VoiceCodeResponse</returns>
        ApiResponse<VoiceCodeResponse> GenerateVoiceCodeWithHttpInfo(string accountId, CodeRequest codeRequest, int operationIndex = 0);
        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyCodeResponse</returns>
        VerifyCodeResponse VerifyCode(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0);

        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyCodeResponse</returns>
        ApiResponse<VerifyCodeResponse> VerifyCodeWithHttpInfo(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessagingCodeResponse</returns>
        System.Threading.Tasks.Task<MessagingCodeResponse> GenerateMessagingCodeAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessagingCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagingCodeResponse>> GenerateMessagingCodeWithHttpInfoAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoiceCodeResponse</returns>
        System.Threading.Tasks.Task<VoiceCodeResponse> GenerateVoiceCodeAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoiceCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoiceCodeResponse>> GenerateVoiceCodeWithHttpInfoAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyCodeResponse</returns>
        System.Threading.Tasks.Task<VerifyCodeResponse> VerifyCodeAsync(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyCodeResponse>> VerifyCodeWithHttpInfoAsync(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAApi : IMFAApiSync, IMFAApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MFAApi : IMFAApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MFAApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MFAApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MFAApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MFAApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessagingCodeResponse</returns>
        public MessagingCodeResponse GenerateMessagingCode(string accountId, CodeRequest codeRequest, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<MessagingCodeResponse> localVarResponse = GenerateMessagingCodeWithHttpInfo(accountId, codeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessagingCodeResponse</returns>
        public Bandwidth.Standard.Client.ApiResponse<MessagingCodeResponse> GenerateMessagingCodeWithHttpInfo(string accountId, CodeRequest codeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateMessagingCode");
            }

            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateMessagingCode");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = codeRequest;

            localVarRequestOptions.Operation = "MFAApi.GenerateMessagingCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MessagingCodeResponse>("/accounts/{accountId}/code/messaging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateMessagingCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessagingCodeResponse</returns>
        public async System.Threading.Tasks.Task<MessagingCodeResponse> GenerateMessagingCodeAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<MessagingCodeResponse> localVarResponse = await GenerateMessagingCodeWithHttpInfoAsync(accountId, codeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessagingCodeResponse)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<MessagingCodeResponse>> GenerateMessagingCodeWithHttpInfoAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateMessagingCode");
            }

            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateMessagingCode");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = codeRequest;

            localVarRequestOptions.Operation = "MFAApi.GenerateMessagingCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessagingCodeResponse>("/accounts/{accountId}/code/messaging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateMessagingCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VoiceCodeResponse</returns>
        public VoiceCodeResponse GenerateVoiceCode(string accountId, CodeRequest codeRequest, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<VoiceCodeResponse> localVarResponse = GenerateVoiceCodeWithHttpInfo(accountId, codeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VoiceCodeResponse</returns>
        public Bandwidth.Standard.Client.ApiResponse<VoiceCodeResponse> GenerateVoiceCodeWithHttpInfo(string accountId, CodeRequest codeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateVoiceCode");
            }

            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateVoiceCode");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = codeRequest;

            localVarRequestOptions.Operation = "MFAApi.GenerateVoiceCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VoiceCodeResponse>("/accounts/{accountId}/code/voice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateVoiceCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VoiceCodeResponse</returns>
        public async System.Threading.Tasks.Task<VoiceCodeResponse> GenerateVoiceCodeAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<VoiceCodeResponse> localVarResponse = await GenerateVoiceCodeWithHttpInfoAsync(accountId, codeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VoiceCodeResponse)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<VoiceCodeResponse>> GenerateVoiceCodeWithHttpInfoAsync(string accountId, CodeRequest codeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateVoiceCode");
            }

            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateVoiceCode");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = codeRequest;

            localVarRequestOptions.Operation = "MFAApi.GenerateVoiceCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VoiceCodeResponse>("/accounts/{accountId}/code/voice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateVoiceCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyCodeResponse</returns>
        public VerifyCodeResponse VerifyCode(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<VerifyCodeResponse> localVarResponse = VerifyCodeWithHttpInfo(accountId, verifyCodeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyCodeResponse</returns>
        public Bandwidth.Standard.Client.ApiResponse<VerifyCodeResponse> VerifyCodeWithHttpInfo(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->VerifyCode");
            }

            // verify the required parameter 'verifyCodeRequest' is set
            if (verifyCodeRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'verifyCodeRequest' when calling MFAApi->VerifyCode");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = verifyCodeRequest;

            localVarRequestOptions.Operation = "MFAApi.VerifyCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyCodeResponse>("/accounts/{accountId}/code/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyCodeResponse</returns>
        public async System.Threading.Tasks.Task<VerifyCodeResponse> VerifyCodeAsync(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<VerifyCodeResponse> localVarResponse = await VerifyCodeWithHttpInfoAsync(accountId, verifyCodeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyCodeResponse)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<VerifyCodeResponse>> VerifyCodeWithHttpInfoAsync(string accountId, VerifyCodeRequest verifyCodeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->VerifyCode");
            }

            // verify the required parameter 'verifyCodeRequest' is set
            if (verifyCodeRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'verifyCodeRequest' when calling MFAApi->VerifyCode");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = verifyCodeRequest;

            localVarRequestOptions.Operation = "MFAApi.VerifyCode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyCodeResponse>("/accounts/{accountId}/code/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
