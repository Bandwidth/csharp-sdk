/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMFAApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>MessagingCodeResponse</returns>
        MessagingCodeResponse GenerateMessagingCode (string accountId, CodeRequest codeRequest);

        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>ApiResponse of MessagingCodeResponse</returns>
        ApiResponse<MessagingCodeResponse> GenerateMessagingCodeWithHttpInfo (string accountId, CodeRequest codeRequest);
        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>VoiceCodeResponse</returns>
        VoiceCodeResponse GenerateVoiceCode (string accountId, CodeRequest codeRequest);

        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>ApiResponse of VoiceCodeResponse</returns>
        ApiResponse<VoiceCodeResponse> GenerateVoiceCodeWithHttpInfo (string accountId, CodeRequest codeRequest);
        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <returns>VerifyCodeResponse</returns>
        VerifyCodeResponse VerifyCode (string accountId, VerifyCodeRequest verifyCodeRequest);

        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <returns>ApiResponse of VerifyCodeResponse</returns>
        ApiResponse<VerifyCodeResponse> VerifyCodeWithHttpInfo (string accountId, VerifyCodeRequest verifyCodeRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessagingCodeResponse</returns>
        System.Threading.Tasks.Task<MessagingCodeResponse> GenerateMessagingCodeAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Messaging Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA code via text message (SMS).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessagingCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagingCodeResponse>> GenerateMessagingCodeWithHttpInfoAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VoiceCodeResponse</returns>
        System.Threading.Tasks.Task<VoiceCodeResponse> GenerateVoiceCodeAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Voice Authentication Code
        /// </summary>
        /// <remarks>
        /// Send an MFA Code via a phone call.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VoiceCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VoiceCodeResponse>> GenerateVoiceCodeWithHttpInfoAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VerifyCodeResponse</returns>
        System.Threading.Tasks.Task<VerifyCodeResponse> VerifyCodeAsync (string accountId, VerifyCodeRequest verifyCodeRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Verify Authentication Code
        /// </summary>
        /// <remarks>
        /// Verify a previously sent MFA code.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VerifyCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyCodeResponse>> VerifyCodeWithHttpInfoAsync (string accountId, VerifyCodeRequest verifyCodeRequest, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MFAApi : IMFAApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MFAApi(String basePath)
        {
            this.Configuration = new Bandwidth.Standard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class
        /// </summary>
        /// <returns></returns>
        public MFAApi()
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.Default;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MFAApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MFAApi(Bandwidth.Standard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bandwidth.Standard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>MessagingCodeResponse</returns>
        public MessagingCodeResponse GenerateMessagingCode (string accountId, CodeRequest codeRequest)
        {
             ApiResponse<MessagingCodeResponse> localVarResponse = GenerateMessagingCodeWithHttpInfo(accountId, codeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>ApiResponse of MessagingCodeResponse</returns>
        public ApiResponse<MessagingCodeResponse> GenerateMessagingCodeWithHttpInfo (string accountId, CodeRequest codeRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateMessagingCode");
            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
                throw new ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateMessagingCode");

            var localVarPath = "/accounts/{accountId}/code/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (codeRequest != null && codeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateMessagingCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagingCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessagingCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagingCodeResponse)));
        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MessagingCodeResponse</returns>
        public async System.Threading.Tasks.Task<MessagingCodeResponse> GenerateMessagingCodeAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MessagingCodeResponse> localVarResponse = await GenerateMessagingCodeWithHttpInfoAsync(accountId, codeRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Messaging Authentication Code Send an MFA code via text message (SMS).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MessagingCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagingCodeResponse>> GenerateMessagingCodeWithHttpInfoAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateMessagingCode");
            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
                throw new ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateMessagingCode");

            var localVarPath = "/accounts/{accountId}/code/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (codeRequest != null && codeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateMessagingCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagingCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessagingCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagingCodeResponse)));
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>VoiceCodeResponse</returns>
        public VoiceCodeResponse GenerateVoiceCode (string accountId, CodeRequest codeRequest)
        {
             ApiResponse<VoiceCodeResponse> localVarResponse = GenerateVoiceCodeWithHttpInfo(accountId, codeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <returns>ApiResponse of VoiceCodeResponse</returns>
        public ApiResponse<VoiceCodeResponse> GenerateVoiceCodeWithHttpInfo (string accountId, CodeRequest codeRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateVoiceCode");
            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
                throw new ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateVoiceCode");

            var localVarPath = "/accounts/{accountId}/code/voice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (codeRequest != null && codeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateVoiceCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoiceCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VoiceCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoiceCodeResponse)));
        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VoiceCodeResponse</returns>
        public async System.Threading.Tasks.Task<VoiceCodeResponse> GenerateVoiceCodeAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VoiceCodeResponse> localVarResponse = await GenerateVoiceCodeWithHttpInfoAsync(accountId, codeRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Voice Authentication Code Send an MFA Code via a phone call.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="codeRequest">MFA code request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VoiceCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VoiceCodeResponse>> GenerateVoiceCodeWithHttpInfoAsync (string accountId, CodeRequest codeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->GenerateVoiceCode");
            // verify the required parameter 'codeRequest' is set
            if (codeRequest == null)
                throw new ApiException(400, "Missing required parameter 'codeRequest' when calling MFAApi->GenerateVoiceCode");

            var localVarPath = "/accounts/{accountId}/code/voice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (codeRequest != null && codeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(codeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = codeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateVoiceCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VoiceCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VoiceCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VoiceCodeResponse)));
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <returns>VerifyCodeResponse</returns>
        public VerifyCodeResponse VerifyCode (string accountId, VerifyCodeRequest verifyCodeRequest)
        {
             ApiResponse<VerifyCodeResponse> localVarResponse = VerifyCodeWithHttpInfo(accountId, verifyCodeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <returns>ApiResponse of VerifyCodeResponse</returns>
        public ApiResponse<VerifyCodeResponse> VerifyCodeWithHttpInfo (string accountId, VerifyCodeRequest verifyCodeRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->VerifyCode");
            // verify the required parameter 'verifyCodeRequest' is set
            if (verifyCodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'verifyCodeRequest' when calling MFAApi->VerifyCode");

            var localVarPath = "/accounts/{accountId}/code/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (verifyCodeRequest != null && verifyCodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyCodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyCodeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyCodeResponse)));
        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of VerifyCodeResponse</returns>
        public async System.Threading.Tasks.Task<VerifyCodeResponse> VerifyCodeAsync (string accountId, VerifyCodeRequest verifyCodeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<VerifyCodeResponse> localVarResponse = await VerifyCodeWithHttpInfoAsync(accountId, verifyCodeRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify Authentication Code Verify a previously sent MFA code.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verifyCodeRequest">MFA code verify request body.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (VerifyCodeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyCodeResponse>> VerifyCodeWithHttpInfoAsync (string accountId, VerifyCodeRequest verifyCodeRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling MFAApi->VerifyCode");
            // verify the required parameter 'verifyCodeRequest' is set
            if (verifyCodeRequest == null)
                throw new ApiException(400, "Missing required parameter 'verifyCodeRequest' when calling MFAApi->VerifyCode");

            var localVarPath = "/accounts/{accountId}/code/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (verifyCodeRequest != null && verifyCodeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verifyCodeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verifyCodeRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyCodeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyCodeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyCodeResponse)));
        }

    }
}
