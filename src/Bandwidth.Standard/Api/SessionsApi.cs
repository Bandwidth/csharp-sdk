/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Participant to Session
        /// </summary>
        /// <remarks>
        /// Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddParticipantToSession(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0);

        /// <summary>
        /// Add Participant to Session
        /// </summary>
        /// <remarks>
        /// Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddParticipantToSessionWithHttpInfo(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0);
        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Session</returns>
        Session CreateSession(string accountId, Session session = default(Session), int operationIndex = 0);

        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> CreateSessionWithHttpInfo(string accountId, Session session = default(Session), int operationIndex = 0);
        /// <summary>
        /// Delete Session
        /// </summary>
        /// <remarks>
        /// Delete session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSession(string accountId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// Delete Session
        /// </summary>
        /// <remarks>
        /// Delete session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSessionWithHttpInfo(string accountId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// Get Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a participant&#39;s subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subscriptions</returns>
        Subscriptions GetParticipantSubscriptions(string accountId, string sessionId, string participantId, int operationIndex = 0);

        /// <summary>
        /// Get Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a participant&#39;s subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subscriptions</returns>
        ApiResponse<Subscriptions> GetParticipantSubscriptionsWithHttpInfo(string accountId, string sessionId, string participantId, int operationIndex = 0);
        /// <summary>
        /// Get Session
        /// </summary>
        /// <remarks>
        /// Get session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Session</returns>
        Session GetSession(string accountId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// Get Session
        /// </summary>
        /// <remarks>
        /// Get session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> GetSessionWithHttpInfo(string accountId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// List Participants in Session
        /// </summary>
        /// <remarks>
        /// List participants in a session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Participant&gt;</returns>
        List<Participant> ListSessionParticipants(string accountId, string sessionId, int operationIndex = 0);

        /// <summary>
        /// List Participants in Session
        /// </summary>
        /// <remarks>
        /// List participants in a session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Participant&gt;</returns>
        ApiResponse<List<Participant>> ListSessionParticipantsWithHttpInfo(string accountId, string sessionId, int operationIndex = 0);
        /// <summary>
        /// Remove Participant from Session
        /// </summary>
        /// <remarks>
        /// Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveParticipantFromSession(string accountId, string sessionId, string participantId, int operationIndex = 0);

        /// <summary>
        /// Remove Participant from Session
        /// </summary>
        /// <remarks>
        /// Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveParticipantFromSessionWithHttpInfo(string accountId, string sessionId, string participantId, int operationIndex = 0);
        /// <summary>
        /// Update Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateParticipantSubscriptions(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0);

        /// <summary>
        /// Update Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateParticipantSubscriptionsWithHttpInfo(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Participant to Session
        /// </summary>
        /// <remarks>
        /// Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddParticipantToSessionAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Participant to Session
        /// </summary>
        /// <remarks>
        /// Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddParticipantToSessionWithHttpInfoAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> CreateSessionAsync(string accountId, Session session = default(Session), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Session
        /// </summary>
        /// <remarks>
        /// Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> CreateSessionWithHttpInfoAsync(string accountId, Session session = default(Session), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Session
        /// </summary>
        /// <remarks>
        /// Delete session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSessionAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Session
        /// </summary>
        /// <remarks>
        /// Delete session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSessionWithHttpInfoAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a participant&#39;s subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscriptions</returns>
        System.Threading.Tasks.Task<Subscriptions> GetParticipantSubscriptionsAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Get a participant&#39;s subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscriptions>> GetParticipantSubscriptionsWithHttpInfoAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Session
        /// </summary>
        /// <remarks>
        /// Get session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> GetSessionAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Session
        /// </summary>
        /// <remarks>
        /// Get session by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> GetSessionWithHttpInfoAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Participants in Session
        /// </summary>
        /// <remarks>
        /// List participants in a session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Participant&gt;</returns>
        System.Threading.Tasks.Task<List<Participant>> ListSessionParticipantsAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Participants in Session
        /// </summary>
        /// <remarks>
        /// List participants in a session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Participant&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Participant>>> ListSessionParticipantsWithHttpInfoAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Participant from Session
        /// </summary>
        /// <remarks>
        /// Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveParticipantFromSessionAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Participant from Session
        /// </summary>
        /// <remarks>
        /// Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveParticipantFromSessionWithHttpInfoAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateParticipantSubscriptionsAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Participant Subscriptions
        /// </summary>
        /// <remarks>
        /// Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateParticipantSubscriptionsWithHttpInfoAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISessionsApi : ISessionsApiSync, ISessionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SessionsApi : ISessionsApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SessionsApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SessionsApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SessionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SessionsApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Participant to Session Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddParticipantToSession(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0)
        {
            AddParticipantToSessionWithHttpInfo(accountId, sessionId, participantId, subscriptions);
        }

        /// <summary>
        /// Add Participant to Session Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> AddParticipantToSessionWithHttpInfo(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->AddParticipantToSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->AddParticipantToSession");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->AddParticipantToSession");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.Data = subscriptions;

            localVarRequestOptions.Operation = "SessionsApi.AddParticipantToSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddParticipantToSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Participant to Session Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddParticipantToSessionAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddParticipantToSessionWithHttpInfoAsync(accountId, sessionId, participantId, subscriptions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Add Participant to Session Add a participant to a session.  Subscriptions can optionally be provided as part of this call. 
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The Body describes an optional set of subscriptions to apply to the participant.  Calling this endpoint with no/empty body will only add the participant to the session, and will not subscribe the Participant to any media.  The request body for this endpoint is OPTIONAL and provided as a convenience to avoid additional calls to the Update Participant Subscriptions endpoint. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> AddParticipantToSessionWithHttpInfoAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->AddParticipantToSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->AddParticipantToSession");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->AddParticipantToSession");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.Data = subscriptions;

            localVarRequestOptions.Operation = "SessionsApi.AddParticipantToSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddParticipantToSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Session Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Session</returns>
        public Session CreateSession(string accountId, Session session = default(Session), int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<Session> localVarResponse = CreateSessionWithHttpInfo(accountId, session);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Session Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Session</returns>
        public Bandwidth.Standard.Client.ApiResponse<Session> CreateSessionWithHttpInfo(string accountId, Session session = default(Session), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->CreateSession");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = session;

            localVarRequestOptions.Operation = "SessionsApi.CreateSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Session>("/accounts/{accountId}/sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Session Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> CreateSessionAsync(string accountId, Session session = default(Session), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<Session> localVarResponse = await CreateSessionWithHttpInfoAsync(accountId, session, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Session Create a new session. Sessions are idempotent, so relevant parameters must be set in this function if desired.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="session">Create session request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Session>> CreateSessionWithHttpInfoAsync(string accountId, Session session = default(Session), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->CreateSession");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = session;

            localVarRequestOptions.Operation = "SessionsApi.CreateSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Session>("/accounts/{accountId}/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Session Delete session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSession(string accountId, string sessionId, int operationIndex = 0)
        {
            DeleteSessionWithHttpInfo(accountId, sessionId);
        }

        /// <summary>
        /// Delete Session Delete session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> DeleteSessionWithHttpInfo(string accountId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->DeleteSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->DeleteSession");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.DeleteSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/accounts/{accountId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Session Delete session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSessionAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSessionWithHttpInfoAsync(accountId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Session Delete session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> DeleteSessionWithHttpInfoAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->DeleteSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->DeleteSession");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.DeleteSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/accounts/{accountId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Participant Subscriptions Get a participant&#39;s subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Subscriptions</returns>
        public Subscriptions GetParticipantSubscriptions(string accountId, string sessionId, string participantId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<Subscriptions> localVarResponse = GetParticipantSubscriptionsWithHttpInfo(accountId, sessionId, participantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Participant Subscriptions Get a participant&#39;s subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Subscriptions</returns>
        public Bandwidth.Standard.Client.ApiResponse<Subscriptions> GetParticipantSubscriptionsWithHttpInfo(string accountId, string sessionId, string participantId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->GetParticipantSubscriptions");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->GetParticipantSubscriptions");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->GetParticipantSubscriptions");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.GetParticipantSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Subscriptions>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParticipantSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Participant Subscriptions Get a participant&#39;s subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Subscriptions</returns>
        public async System.Threading.Tasks.Task<Subscriptions> GetParticipantSubscriptionsAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<Subscriptions> localVarResponse = await GetParticipantSubscriptionsWithHttpInfoAsync(accountId, sessionId, participantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Participant Subscriptions Get a participant&#39;s subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Subscriptions)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Subscriptions>> GetParticipantSubscriptionsWithHttpInfoAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->GetParticipantSubscriptions");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->GetParticipantSubscriptions");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->GetParticipantSubscriptions");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.GetParticipantSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Subscriptions>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetParticipantSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Session Get session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Session</returns>
        public Session GetSession(string accountId, string sessionId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<Session> localVarResponse = GetSessionWithHttpInfo(accountId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Session Get session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Session</returns>
        public Bandwidth.Standard.Client.ApiResponse<Session> GetSessionWithHttpInfo(string accountId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->GetSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->GetSession");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.GetSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Session>("/accounts/{accountId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Session Get session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> GetSessionAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<Session> localVarResponse = await GetSessionWithHttpInfoAsync(accountId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Session Get session by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Session>> GetSessionWithHttpInfoAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->GetSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->GetSession");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.GetSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Session>("/accounts/{accountId}/sessions/{sessionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Participants in Session List participants in a session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Participant&gt;</returns>
        public List<Participant> ListSessionParticipants(string accountId, string sessionId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<Participant>> localVarResponse = ListSessionParticipantsWithHttpInfo(accountId, sessionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Participants in Session List participants in a session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Participant&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<Participant>> ListSessionParticipantsWithHttpInfo(string accountId, string sessionId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->ListSessionParticipants");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->ListSessionParticipants");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.ListSessionParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Participant>>("/accounts/{accountId}/sessions/{sessionId}/participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSessionParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Participants in Session List participants in a session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Participant&gt;</returns>
        public async System.Threading.Tasks.Task<List<Participant>> ListSessionParticipantsAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<Participant>> localVarResponse = await ListSessionParticipantsWithHttpInfoAsync(accountId, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Participants in Session List participants in a session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Participant&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<Participant>>> ListSessionParticipantsWithHttpInfoAsync(string accountId, string sessionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->ListSessionParticipants");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->ListSessionParticipants");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.ListSessionParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Participant>>("/accounts/{accountId}/sessions/{sessionId}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSessionParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Participant from Session Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveParticipantFromSession(string accountId, string sessionId, string participantId, int operationIndex = 0)
        {
            RemoveParticipantFromSessionWithHttpInfo(accountId, sessionId, participantId);
        }

        /// <summary>
        /// Remove Participant from Session Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> RemoveParticipantFromSessionWithHttpInfo(string accountId, string sessionId, string participantId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->RemoveParticipantFromSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->RemoveParticipantFromSession");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->RemoveParticipantFromSession");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.RemoveParticipantFromSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveParticipantFromSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Participant from Session Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveParticipantFromSessionAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveParticipantFromSessionWithHttpInfoAsync(accountId, sessionId, participantId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Participant from Session Remove a participant from a session. This will automatically remove any subscriptions the participant has associated with this session.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> RemoveParticipantFromSessionWithHttpInfoAsync(string accountId, string sessionId, string participantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->RemoveParticipantFromSession");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->RemoveParticipantFromSession");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->RemoveParticipantFromSession");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter

            localVarRequestOptions.Operation = "SessionsApi.RemoveParticipantFromSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveParticipantFromSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Participant Subscriptions Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateParticipantSubscriptions(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0)
        {
            UpdateParticipantSubscriptionsWithHttpInfo(accountId, sessionId, participantId, subscriptions);
        }

        /// <summary>
        /// Update Participant Subscriptions Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateParticipantSubscriptionsWithHttpInfo(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->UpdateParticipantSubscriptions");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->UpdateParticipantSubscriptions");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->UpdateParticipantSubscriptions");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.Data = subscriptions;

            localVarRequestOptions.Operation = "SessionsApi.UpdateParticipantSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParticipantSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Participant Subscriptions Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateParticipantSubscriptionsAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateParticipantSubscriptionsWithHttpInfoAsync(accountId, sessionId, participantId, subscriptions, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Participant Subscriptions Update a participant&#39;s subscriptions. This is a full update that will replace the participant&#39;s subscriptions. It allows subscription to the entire Session, a subset list of Participants in that Session, or specific media streams on any of the listed Participants. First call &#x60;getParticipantSubscriptions&#x60; if you need the current subscriptions. Calling this API with no &#x60;Subscriptions&#x60; object to remove all subscriptions.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account ID</param>
        /// <param name="sessionId">Session ID</param>
        /// <param name="participantId">Participant ID</param>
        /// <param name="subscriptions">The body describes the desired subscriptions for the Participant. - -- If a body is provided it will result in direct control over what Participants are subscribed to.    - if the participants Array is provided and not empty, that list of Participants will be subscribed To   - if the participants Array is missing or empty, and the sessionId is provided, the participant will be subscribed to the session, including all subsequent changes to the membership of the session   - if the sessionId and the participant Array are both missing or empty, no subscriptions will be created (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateParticipantSubscriptionsWithHttpInfoAsync(string accountId, string sessionId, string participantId, Subscriptions subscriptions = default(Subscriptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling SessionsApi->UpdateParticipantSubscriptions");
            }

            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'sessionId' when calling SessionsApi->UpdateParticipantSubscriptions");
            }

            // verify the required parameter 'participantId' is set
            if (participantId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'participantId' when calling SessionsApi->UpdateParticipantSubscriptions");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sessionId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(sessionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("participantId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(participantId)); // path parameter
            localVarRequestOptions.Data = subscriptions;

            localVarRequestOptions.Operation = "SessionsApi.UpdateParticipantSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/sessions/{sessionId}/participants/{participantId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateParticipantSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
