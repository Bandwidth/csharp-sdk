/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCallResponse</returns>
        CreateCallResponse CreateCall(string accountId, CreateCall createCall, int operationIndex = 0);

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCallResponse</returns>
        ApiResponse<CreateCallResponse> CreateCallWithHttpInfo(string accountId, CreateCall createCall, int operationIndex = 0);
        /// <summary>
        /// Get Call State Information
        /// </summary>
        /// <remarks>
        /// Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallState</returns>
        CallState GetCallState(string accountId, string callId, int operationIndex = 0);

        /// <summary>
        /// Get Call State Information
        /// </summary>
        /// <remarks>
        /// Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallState</returns>
        ApiResponse<CallState> GetCallStateWithHttpInfo(string accountId, string callId, int operationIndex = 0);
        /// <summary>
        /// Get Calls
        /// </summary>
        /// <remarks>
        /// Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CallState&gt;</returns>
        List<CallState> ListCalls(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0);

        /// <summary>
        /// Get Calls
        /// </summary>
        /// <remarks>
        /// Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CallState&gt;</returns>
        ApiResponse<List<CallState>> ListCallsWithHttpInfo(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Call
        /// </summary>
        /// <remarks>
        /// Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateCall(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0);

        /// <summary>
        /// Update Call
        /// </summary>
        /// <remarks>
        /// Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallWithHttpInfo(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0);
        /// <summary>
        /// Update Call BXML
        /// </summary>
        /// <remarks>
        /// Interrupts and replaces an active call&#39;s BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateCallBxml(string accountId, string callId, string body, int operationIndex = 0);

        /// <summary>
        /// Update Call BXML
        /// </summary>
        /// <remarks>
        /// Interrupts and replaces an active call&#39;s BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallBxmlWithHttpInfo(string accountId, string callId, string body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCallResponse</returns>
        System.Threading.Tasks.Task<CreateCallResponse> CreateCallAsync(string accountId, CreateCall createCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Call
        /// </summary>
        /// <remarks>
        /// Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCallResponse>> CreateCallWithHttpInfoAsync(string accountId, CreateCall createCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Call State Information
        /// </summary>
        /// <remarks>
        /// Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallState</returns>
        System.Threading.Tasks.Task<CallState> GetCallStateAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Call State Information
        /// </summary>
        /// <remarks>
        /// Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallState)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallState>> GetCallStateWithHttpInfoAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Calls
        /// </summary>
        /// <remarks>
        /// Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallState&gt;</returns>
        System.Threading.Tasks.Task<List<CallState>> ListCallsAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Calls
        /// </summary>
        /// <remarks>
        /// Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallState&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CallState>>> ListCallsWithHttpInfoAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Call
        /// </summary>
        /// <remarks>
        /// Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallAsync(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Call
        /// </summary>
        /// <remarks>
        /// Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallWithHttpInfoAsync(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Call BXML
        /// </summary>
        /// <remarks>
        /// Interrupts and replaces an active call&#39;s BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallBxmlAsync(string accountId, string callId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Call BXML
        /// </summary>
        /// <remarks>
        /// Interrupts and replaces an active call&#39;s BXML document.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallBxmlWithHttpInfoAsync(string accountId, string callId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICallsApi : ICallsApiSync, ICallsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CallsApi : ICallsApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CallsApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CallsApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CallsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CallsApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Call Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCallResponse</returns>
        public CreateCallResponse CreateCall(string accountId, CreateCall createCall, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<CreateCallResponse> localVarResponse = CreateCallWithHttpInfo(accountId, createCall);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCallResponse</returns>
        public Bandwidth.Standard.Client.ApiResponse<CreateCallResponse> CreateCallWithHttpInfo(string accountId, CreateCall createCall, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->CreateCall");
            }

            // verify the required parameter 'createCall' is set
            if (createCall == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'createCall' when calling CallsApi->CreateCall");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = createCall;

            localVarRequestOptions.Operation = "CallsApi.CreateCall";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCallResponse>("/accounts/{accountId}/calls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Call Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCallResponse</returns>
        public async System.Threading.Tasks.Task<CreateCallResponse> CreateCallAsync(string accountId, CreateCall createCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<CreateCallResponse> localVarResponse = await CreateCallWithHttpInfoAsync(accountId, createCall, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Call Creates an outbound phone call.  All calls are initially queued. Your outbound calls will initiated at a specific dequeueing rate, enabling your application to \&quot;fire and forget\&quot; when creating calls. Queued calls may not be modified until they are dequeued and placed, but may be removed from your queue on demand.  &lt;b&gt;Please note:&lt;/b&gt; Calls submitted to your queue will be placed approximately in order, but exact ordering is not guaranteed.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="createCall">JSON object containing information to create an outbound call</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCallResponse)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<CreateCallResponse>> CreateCallWithHttpInfoAsync(string accountId, CreateCall createCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->CreateCall");
            }

            // verify the required parameter 'createCall' is set
            if (createCall == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'createCall' when calling CallsApi->CreateCall");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = createCall;

            localVarRequestOptions.Operation = "CallsApi.CreateCall";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCallResponse>("/accounts/{accountId}/calls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call State Information Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallState</returns>
        public CallState GetCallState(string accountId, string callId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<CallState> localVarResponse = GetCallStateWithHttpInfo(accountId, callId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call State Information Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallState</returns>
        public Bandwidth.Standard.Client.ApiResponse<CallState> GetCallStateWithHttpInfo(string accountId, string callId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->GetCallState");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling CallsApi->GetCallState");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter

            localVarRequestOptions.Operation = "CallsApi.GetCallState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CallState>("/accounts/{accountId}/calls/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Call State Information Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallState</returns>
        public async System.Threading.Tasks.Task<CallState> GetCallStateAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<CallState> localVarResponse = await GetCallStateWithHttpInfoAsync(accountId, callId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Call State Information Retrieve the current state of a specific call. This information is near-realtime, so it may take a few minutes for your call to be accessible using this endpoint.  **Note**: Call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an HTTP 404 response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallState)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<CallState>> GetCallStateWithHttpInfoAsync(string accountId, string callId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->GetCallState");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling CallsApi->GetCallState");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter

            localVarRequestOptions.Operation = "CallsApi.GetCallState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CallState>("/accounts/{accountId}/calls/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCallState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Calls Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CallState&gt;</returns>
        public List<CallState> ListCalls(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<CallState>> localVarResponse = ListCallsWithHttpInfo(accountId, to, from, minStartTime, maxStartTime, disconnectCause, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Calls Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CallState&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<CallState>> ListCallsWithHttpInfo(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->ListCalls");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (minStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "minStartTime", minStartTime));
            }
            if (maxStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "maxStartTime", maxStartTime));
            }
            if (disconnectCause != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "disconnectCause", disconnectCause));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            localVarRequestOptions.Operation = "CallsApi.ListCalls";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<CallState>>("/accounts/{accountId}/calls", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCalls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Calls Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CallState&gt;</returns>
        public async System.Threading.Tasks.Task<List<CallState>> ListCallsAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<CallState>> localVarResponse = await ListCallsWithHttpInfoAsync(accountId, to, from, minStartTime, maxStartTime, disconnectCause, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Calls Returns a max of 10000 calls, sorted by &#x60;createdTime&#x60; from oldest to newest.  **NOTE:** If the number of calls in the account is bigger than &#x60;pageSize&#x60;, a &#x60;Link&#x60; header (with format &#x60;&lt;{url}&gt;; rel&#x3D;\&quot;next\&quot;&#x60;) will be returned in the response. The url can be used to retrieve the next page of call records. Also, call information is kept for 7 days after the calls are hung up. If you attempt to retrieve information for a call that is older than 7 days, you will get an empty array [] in response.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="to">Filter results by the &#x60;to&#x60; field. (optional)</param>
        /// <param name="from">Filter results by the &#x60;from&#x60; field. (optional)</param>
        /// <param name="minStartTime">Filter results to calls which have a &#x60;startTime&#x60; after or including &#x60;minStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="maxStartTime">Filter results to calls which have a &#x60;startTime&#x60; before or including &#x60;maxStartTime&#x60; (in ISO8601 format). (optional)</param>
        /// <param name="disconnectCause">Filter results to calls with specified call Disconnect Cause. (optional)</param>
        /// <param name="pageSize">Specifies the max number of calls that will be returned. (optional, default to 1000)</param>
        /// <param name="pageToken">Not intended for explicit use. To use pagination, follow the links in the &#x60;Link&#x60; header of the response, as indicated in the endpoint description. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CallState&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<CallState>>> ListCallsWithHttpInfoAsync(string accountId, string to = default(string), string from = default(string), string minStartTime = default(string), string maxStartTime = default(string), string disconnectCause = default(string), int? pageSize = default(int?), string pageToken = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->ListCalls");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            if (to != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            }
            if (from != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            }
            if (minStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "minStartTime", minStartTime));
            }
            if (maxStartTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "maxStartTime", maxStartTime));
            }
            if (disconnectCause != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "disconnectCause", disconnectCause));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Bandwidth.Standard.Client.ClientUtils.ParameterToMultiMap("", "pageToken", pageToken));
            }

            localVarRequestOptions.Operation = "CallsApi.ListCalls";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<CallState>>("/accounts/{accountId}/calls", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCalls", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateCall(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0)
        {
            UpdateCallWithHttpInfo(accountId, callId, updateCall);
        }

        /// <summary>
        /// Update Call Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateCallWithHttpInfo(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->UpdateCall");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling CallsApi->UpdateCall");
            }

            // verify the required parameter 'updateCall' is set
            if (updateCall == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateCall' when calling CallsApi->UpdateCall");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateCall;

            localVarRequestOptions.Operation = "CallsApi.UpdateCall";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{accountId}/calls/{callId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallAsync(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCallWithHttpInfoAsync(accountId, callId, updateCall, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Call Interrupts and redirects a call to a different URL that should return a BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="updateCall">JSON or BXML object containing information to redirect an existing call to a new BXML document</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateCallWithHttpInfoAsync(string accountId, string callId, UpdateCall updateCall, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->UpdateCall");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling CallsApi->UpdateCall");
            }

            // verify the required parameter 'updateCall' is set
            if (updateCall == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'updateCall' when calling CallsApi->UpdateCall");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = updateCall;

            localVarRequestOptions.Operation = "CallsApi.UpdateCall";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{accountId}/calls/{callId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCall", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call BXML Interrupts and replaces an active call&#39;s BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateCallBxml(string accountId, string callId, string body, int operationIndex = 0)
        {
            UpdateCallBxmlWithHttpInfo(accountId, callId, body);
        }

        /// <summary>
        /// Update Call BXML Interrupts and replaces an active call&#39;s BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateCallBxmlWithHttpInfo(string accountId, string callId, string body, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->UpdateCallBxml");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling CallsApi->UpdateCallBxml");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'body' when calling CallsApi->UpdateCallBxml");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CallsApi.UpdateCallBxml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/calls/{callId}/bxml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCallBxml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Call BXML Interrupts and replaces an active call&#39;s BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallBxmlAsync(string accountId, string callId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCallBxmlWithHttpInfoAsync(accountId, callId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Call BXML Interrupts and replaces an active call&#39;s BXML document.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="callId">Programmable Voice API Call ID.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateCallBxmlWithHttpInfoAsync(string accountId, string callId, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling CallsApi->UpdateCallBxml");
            }

            // verify the required parameter 'callId' is set
            if (callId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'callId' when calling CallsApi->UpdateCallBxml");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'body' when calling CallsApi->UpdateCallBxml");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("callId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(callId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "CallsApi.UpdateCallBxml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/calls/{callId}/bxml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCallBxml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
