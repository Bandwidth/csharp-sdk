/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITollFreeVerificationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSubscription</returns>
        WebhookSubscription CreateWebhookSubscription(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0);

        /// <summary>
        /// Create Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSubscription</returns>
        ApiResponse<WebhookSubscription> CreateWebhookSubscriptionWithHttpInfo(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0);
        /// <summary>
        /// Delete Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhookSubscription(string accountId, string id, int operationIndex = 0);

        /// <summary>
        /// Delete Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo(string accountId, string id, int operationIndex = 0);
        /// <summary>
        /// Get Toll-Free Verification Status
        /// </summary>
        /// <remarks>
        /// Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TfvStatus</returns>
        TfvStatus GetTollFreeVerificationStatus(string accountId, string phoneNumber, int operationIndex = 0);

        /// <summary>
        /// Get Toll-Free Verification Status
        /// </summary>
        /// <remarks>
        /// Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TfvStatus</returns>
        ApiResponse<TfvStatus> GetTollFreeVerificationStatusWithHttpInfo(string accountId, string phoneNumber, int operationIndex = 0);
        /// <summary>
        /// List Toll-Free Use Cases
        /// </summary>
        /// <remarks>
        /// Lists valid toll-free use cases.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ListTollFreeUseCases(int operationIndex = 0);

        /// <summary>
        /// List Toll-Free Use Cases
        /// </summary>
        /// <remarks>
        /// Lists valid toll-free use cases.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ListTollFreeUseCasesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List Webhook Subscriptions
        /// </summary>
        /// <remarks>
        /// Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSubscriptionsListBody</returns>
        WebhookSubscriptionsListBody ListWebhookSubscriptions(string accountId, int operationIndex = 0);

        /// <summary>
        /// List Webhook Subscriptions
        /// </summary>
        /// <remarks>
        /// Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSubscriptionsListBody</returns>
        ApiResponse<WebhookSubscriptionsListBody> ListWebhookSubscriptionsWithHttpInfo(string accountId, int operationIndex = 0);
        /// <summary>
        /// Request Toll-Free Verification
        /// </summary>
        /// <remarks>
        /// Submit a request for verification of a toll-free phone number.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RequestTollFreeVerification(string accountId, VerificationRequest verificationRequest, int operationIndex = 0);

        /// <summary>
        /// Request Toll-Free Verification
        /// </summary>
        /// <remarks>
        /// Submit a request for verification of a toll-free phone number.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RequestTollFreeVerificationWithHttpInfo(string accountId, VerificationRequest verificationRequest, int operationIndex = 0);
        /// <summary>
        /// Update Toll-Free Verification Request
        /// </summary>
        /// <remarks>
        /// Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTollFreeVerificationRequest(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0);

        /// <summary>
        /// Update Toll-Free Verification Request
        /// </summary>
        /// <remarks>
        /// Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTollFreeVerificationRequestWithHttpInfo(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0);
        /// <summary>
        /// Update Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSubscription</returns>
        WebhookSubscription UpdateWebhookSubscription(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0);

        /// <summary>
        /// Update Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSubscription</returns>
        ApiResponse<WebhookSubscription> UpdateWebhookSubscriptionWithHttpInfo(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITollFreeVerificationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSubscription</returns>
        System.Threading.Tasks.Task<WebhookSubscription> CreateWebhookSubscriptionAsync(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSubscription>> CreateWebhookSubscriptionWithHttpInfoAsync(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync(string accountId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhook subscription by ID.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookSubscriptionWithHttpInfoAsync(string accountId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Toll-Free Verification Status
        /// </summary>
        /// <remarks>
        /// Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfvStatus</returns>
        System.Threading.Tasks.Task<TfvStatus> GetTollFreeVerificationStatusAsync(string accountId, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Toll-Free Verification Status
        /// </summary>
        /// <remarks>
        /// Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfvStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<TfvStatus>> GetTollFreeVerificationStatusWithHttpInfoAsync(string accountId, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Toll-Free Use Cases
        /// </summary>
        /// <remarks>
        /// Lists valid toll-free use cases.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ListTollFreeUseCasesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Toll-Free Use Cases
        /// </summary>
        /// <remarks>
        /// Lists valid toll-free use cases.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ListTollFreeUseCasesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Webhook Subscriptions
        /// </summary>
        /// <remarks>
        /// Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSubscriptionsListBody</returns>
        System.Threading.Tasks.Task<WebhookSubscriptionsListBody> ListWebhookSubscriptionsAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Webhook Subscriptions
        /// </summary>
        /// <remarks>
        /// Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSubscriptionsListBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSubscriptionsListBody>> ListWebhookSubscriptionsWithHttpInfoAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request Toll-Free Verification
        /// </summary>
        /// <remarks>
        /// Submit a request for verification of a toll-free phone number.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RequestTollFreeVerificationAsync(string accountId, VerificationRequest verificationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request Toll-Free Verification
        /// </summary>
        /// <remarks>
        /// Submit a request for verification of a toll-free phone number.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RequestTollFreeVerificationWithHttpInfoAsync(string accountId, VerificationRequest verificationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Toll-Free Verification Request
        /// </summary>
        /// <remarks>
        /// Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTollFreeVerificationRequestAsync(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Toll-Free Verification Request
        /// </summary>
        /// <remarks>
        /// Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTollFreeVerificationRequestWithHttpInfoAsync(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSubscription</returns>
        System.Threading.Tasks.Task<WebhookSubscription> UpdateWebhookSubscriptionAsync(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSubscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebhookSubscription>> UpdateWebhookSubscriptionWithHttpInfoAsync(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITollFreeVerificationApi : ITollFreeVerificationApiSync, ITollFreeVerificationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TollFreeVerificationApi : ITollFreeVerificationApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TollFreeVerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TollFreeVerificationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TollFreeVerificationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TollFreeVerificationApi(string basePath)
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                new Bandwidth.Standard.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TollFreeVerificationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TollFreeVerificationApi(Bandwidth.Standard.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Bandwidth.Standard.Client.Configuration.MergeConfigurations(
                Bandwidth.Standard.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Bandwidth.Standard.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TollFreeVerificationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TollFreeVerificationApi(Bandwidth.Standard.Client.ISynchronousClient client, Bandwidth.Standard.Client.IAsynchronousClient asyncClient, Bandwidth.Standard.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Bandwidth.Standard.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Bandwidth.Standard.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Webhook Subscription Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSubscription</returns>
        public WebhookSubscription CreateWebhookSubscription(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<WebhookSubscription> localVarResponse = CreateWebhookSubscriptionWithHttpInfo(accountId, webhookSubscriptionRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Subscription Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSubscription</returns>
        public Bandwidth.Standard.Client.ApiResponse<WebhookSubscription> CreateWebhookSubscriptionWithHttpInfo(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->CreateWebhookSubscription");
            }

            // verify the required parameter 'webhookSubscriptionRequestSchema' is set
            if (webhookSubscriptionRequestSchema == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'webhookSubscriptionRequestSchema' when calling TollFreeVerificationApi->CreateWebhookSubscription");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = webhookSubscriptionRequestSchema;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.CreateWebhookSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebhookSubscription>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhookSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Webhook Subscription Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSubscription</returns>
        public async System.Threading.Tasks.Task<WebhookSubscription> CreateWebhookSubscriptionAsync(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<WebhookSubscription> localVarResponse = await CreateWebhookSubscriptionWithHttpInfoAsync(accountId, webhookSubscriptionRequestSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Subscription Create a new webhook subscription (this webhook will be called for every update on every submission). In addition to a &#x60;callbackUrl&#x60;, this subscription can provide optional HTTP basic authentication credentials (a username and a password). The returned subscription object will contain an ID that can be used to modify or delete the subscription at a later time.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSubscription)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<WebhookSubscription>> CreateWebhookSubscriptionWithHttpInfoAsync(string accountId, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->CreateWebhookSubscription");
            }

            // verify the required parameter 'webhookSubscriptionRequestSchema' is set
            if (webhookSubscriptionRequestSchema == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'webhookSubscriptionRequestSchema' when calling TollFreeVerificationApi->CreateWebhookSubscription");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = webhookSubscriptionRequestSchema;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.CreateWebhookSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebhookSubscription>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhookSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Subscription Delete a webhook subscription by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhookSubscription(string accountId, string id, int operationIndex = 0)
        {
            DeleteWebhookSubscriptionWithHttpInfo(accountId, id);
        }

        /// <summary>
        /// Delete Webhook Subscription Delete a webhook subscription by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> DeleteWebhookSubscriptionWithHttpInfo(string accountId, string id, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->DeleteWebhookSubscription");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'id' when calling TollFreeVerificationApi->DeleteWebhookSubscription");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Bandwidth.Standard.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TollFreeVerificationApi.DeleteWebhookSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Subscription Delete a webhook subscription by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookSubscriptionAsync(string accountId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWebhookSubscriptionWithHttpInfoAsync(accountId, id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Webhook Subscription Delete a webhook subscription by ID.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> DeleteWebhookSubscriptionWithHttpInfoAsync(string accountId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->DeleteWebhookSubscription");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'id' when calling TollFreeVerificationApi->DeleteWebhookSubscription");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Bandwidth.Standard.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "TollFreeVerificationApi.DeleteWebhookSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhookSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Toll-Free Verification Status Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TfvStatus</returns>
        public TfvStatus GetTollFreeVerificationStatus(string accountId, string phoneNumber, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<TfvStatus> localVarResponse = GetTollFreeVerificationStatusWithHttpInfo(accountId, phoneNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Toll-Free Verification Status Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TfvStatus</returns>
        public Bandwidth.Standard.Client.ApiResponse<TfvStatus> GetTollFreeVerificationStatusWithHttpInfo(string accountId, string phoneNumber, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->GetTollFreeVerificationStatus");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling TollFreeVerificationApi->GetTollFreeVerificationStatus");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", Bandwidth.Standard.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "TollFreeVerificationApi.GetTollFreeVerificationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TfvStatus>("/accounts/{accountId}/phoneNumbers/{phoneNumber}/tollFreeVerification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTollFreeVerificationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Toll-Free Verification Status Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TfvStatus</returns>
        public async System.Threading.Tasks.Task<TfvStatus> GetTollFreeVerificationStatusAsync(string accountId, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<TfvStatus> localVarResponse = await GetTollFreeVerificationStatusWithHttpInfoAsync(accountId, phoneNumber, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Toll-Free Verification Status Gets the verification status for a phone number that is provisioned to your account. Submission information will be appended to the response if it is available.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TfvStatus)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<TfvStatus>> GetTollFreeVerificationStatusWithHttpInfoAsync(string accountId, string phoneNumber, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->GetTollFreeVerificationStatus");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling TollFreeVerificationApi->GetTollFreeVerificationStatus");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", Bandwidth.Standard.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter

            localVarRequestOptions.Operation = "TollFreeVerificationApi.GetTollFreeVerificationStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TfvStatus>("/accounts/{accountId}/phoneNumbers/{phoneNumber}/tollFreeVerification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTollFreeVerificationStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Toll-Free Use Cases Lists valid toll-free use cases.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ListTollFreeUseCases(int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<List<string>> localVarResponse = ListTollFreeUseCasesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Toll-Free Use Cases Lists valid toll-free use cases.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Bandwidth.Standard.Client.ApiResponse<List<string>> ListTollFreeUseCasesWithHttpInfo(int operationIndex = 0)
        {
            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TollFreeVerificationApi.ListTollFreeUseCases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/tollFreeVerification/useCases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTollFreeUseCases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Toll-Free Use Cases Lists valid toll-free use cases.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ListTollFreeUseCasesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<List<string>> localVarResponse = await ListTollFreeUseCasesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Toll-Free Use Cases Lists valid toll-free use cases.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<List<string>>> ListTollFreeUseCasesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TollFreeVerificationApi.ListTollFreeUseCases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/tollFreeVerification/useCases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTollFreeUseCases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhook Subscriptions Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSubscriptionsListBody</returns>
        public WebhookSubscriptionsListBody ListWebhookSubscriptions(string accountId, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<WebhookSubscriptionsListBody> localVarResponse = ListWebhookSubscriptionsWithHttpInfo(accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhook Subscriptions Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSubscriptionsListBody</returns>
        public Bandwidth.Standard.Client.ApiResponse<WebhookSubscriptionsListBody> ListWebhookSubscriptionsWithHttpInfo(string accountId, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->ListWebhookSubscriptions");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "TollFreeVerificationApi.ListWebhookSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebhookSubscriptionsListBody>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebhookSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhook Subscriptions Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSubscriptionsListBody</returns>
        public async System.Threading.Tasks.Task<WebhookSubscriptionsListBody> ListWebhookSubscriptionsAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<WebhookSubscriptionsListBody> localVarResponse = await ListWebhookSubscriptionsWithHttpInfoAsync(accountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhook Subscriptions Lists all webhook subscriptions that are registered to receive status updates for the toll-free verification requests submitted under this account (password will not be returned through this API If &#x60;basicAuthentication&#x60; is defined, the &#x60;password&#x60; property of that object will be null).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSubscriptionsListBody)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<WebhookSubscriptionsListBody>> ListWebhookSubscriptionsWithHttpInfoAsync(string accountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->ListWebhookSubscriptions");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter

            localVarRequestOptions.Operation = "TollFreeVerificationApi.ListWebhookSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebhookSubscriptionsListBody>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebhookSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Toll-Free Verification Submit a request for verification of a toll-free phone number.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RequestTollFreeVerification(string accountId, VerificationRequest verificationRequest, int operationIndex = 0)
        {
            RequestTollFreeVerificationWithHttpInfo(accountId, verificationRequest);
        }

        /// <summary>
        /// Request Toll-Free Verification Submit a request for verification of a toll-free phone number.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> RequestTollFreeVerificationWithHttpInfo(string accountId, VerificationRequest verificationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->RequestTollFreeVerification");
            }

            // verify the required parameter 'verificationRequest' is set
            if (verificationRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'verificationRequest' when calling TollFreeVerificationApi->RequestTollFreeVerification");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = verificationRequest;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.RequestTollFreeVerification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{accountId}/tollFreeVerification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTollFreeVerification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request Toll-Free Verification Submit a request for verification of a toll-free phone number.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RequestTollFreeVerificationAsync(string accountId, VerificationRequest verificationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RequestTollFreeVerificationWithHttpInfoAsync(accountId, verificationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Request Toll-Free Verification Submit a request for verification of a toll-free phone number.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="verificationRequest">Request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> RequestTollFreeVerificationWithHttpInfoAsync(string accountId, VerificationRequest verificationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->RequestTollFreeVerification");
            }

            // verify the required parameter 'verificationRequest' is set
            if (verificationRequest == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'verificationRequest' when calling TollFreeVerificationApi->RequestTollFreeVerification");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.Data = verificationRequest;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.RequestTollFreeVerification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{accountId}/tollFreeVerification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTollFreeVerification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Toll-Free Verification Request Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTollFreeVerificationRequest(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0)
        {
            UpdateTollFreeVerificationRequestWithHttpInfo(accountId, phoneNumber, tfvSubmissionWrapper);
        }

        /// <summary>
        /// Update Toll-Free Verification Request Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Bandwidth.Standard.Client.ApiResponse<Object> UpdateTollFreeVerificationRequestWithHttpInfo(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->UpdateTollFreeVerificationRequest");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling TollFreeVerificationApi->UpdateTollFreeVerificationRequest");
            }

            // verify the required parameter 'tfvSubmissionWrapper' is set
            if (tfvSubmissionWrapper == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'tfvSubmissionWrapper' when calling TollFreeVerificationApi->UpdateTollFreeVerificationRequest");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", Bandwidth.Standard.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter
            localVarRequestOptions.Data = tfvSubmissionWrapper;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.UpdateTollFreeVerificationRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/accounts/{accountId}/phoneNumbers/{phoneNumber}/tollFreeVerification", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTollFreeVerificationRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Toll-Free Verification Request Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTollFreeVerificationRequestAsync(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTollFreeVerificationRequestWithHttpInfoAsync(accountId, phoneNumber, tfvSubmissionWrapper, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Toll-Free Verification Request Updates a toll-free verification request. Submissions are only eligible for resubmission for 7 days within being processed and if resubmission is allowed (resubmitAllowed field is true).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="phoneNumber">Valid Toll-Free telephone number in E.164 format.</param>
        /// <param name="tfvSubmissionWrapper">Update a request for verification of a toll-free phone number.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<Object>> UpdateTollFreeVerificationRequestWithHttpInfoAsync(string accountId, string phoneNumber, TfvSubmissionWrapper tfvSubmissionWrapper, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->UpdateTollFreeVerificationRequest");
            }

            // verify the required parameter 'phoneNumber' is set
            if (phoneNumber == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'phoneNumber' when calling TollFreeVerificationApi->UpdateTollFreeVerificationRequest");
            }

            // verify the required parameter 'tfvSubmissionWrapper' is set
            if (tfvSubmissionWrapper == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'tfvSubmissionWrapper' when calling TollFreeVerificationApi->UpdateTollFreeVerificationRequest");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("phoneNumber", Bandwidth.Standard.Client.ClientUtils.ParameterToString(phoneNumber)); // path parameter
            localVarRequestOptions.Data = tfvSubmissionWrapper;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.UpdateTollFreeVerificationRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/accounts/{accountId}/phoneNumbers/{phoneNumber}/tollFreeVerification", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTollFreeVerificationRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook Subscription Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebhookSubscription</returns>
        public WebhookSubscription UpdateWebhookSubscription(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0)
        {
            Bandwidth.Standard.Client.ApiResponse<WebhookSubscription> localVarResponse = UpdateWebhookSubscriptionWithHttpInfo(accountId, id, webhookSubscriptionRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook Subscription Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebhookSubscription</returns>
        public Bandwidth.Standard.Client.ApiResponse<WebhookSubscription> UpdateWebhookSubscriptionWithHttpInfo(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->UpdateWebhookSubscription");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'id' when calling TollFreeVerificationApi->UpdateWebhookSubscription");
            }

            // verify the required parameter 'webhookSubscriptionRequestSchema' is set
            if (webhookSubscriptionRequestSchema == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'webhookSubscriptionRequestSchema' when calling TollFreeVerificationApi->UpdateWebhookSubscription");
            }

            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Bandwidth.Standard.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = webhookSubscriptionRequestSchema;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.UpdateWebhookSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebhookSubscription>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhookSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook Subscription Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebhookSubscription</returns>
        public async System.Threading.Tasks.Task<WebhookSubscription> UpdateWebhookSubscriptionAsync(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Bandwidth.Standard.Client.ApiResponse<WebhookSubscription> localVarResponse = await UpdateWebhookSubscriptionWithHttpInfoAsync(accountId, id, webhookSubscriptionRequestSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook Subscription Update an existing webhook subscription (&#x60;callbackUrl&#x60; and &#x60;basicAuthentication&#x60; can be updated).
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="id">Webhook subscription ID</param>
        /// <param name="webhookSubscriptionRequestSchema">Information about a webhook that Bandwidth should send upon the completion of event customer is trying to subscribe to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebhookSubscription)</returns>
        public async System.Threading.Tasks.Task<Bandwidth.Standard.Client.ApiResponse<WebhookSubscription>> UpdateWebhookSubscriptionWithHttpInfoAsync(string accountId, string id, WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'accountId' when calling TollFreeVerificationApi->UpdateWebhookSubscription");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'id' when calling TollFreeVerificationApi->UpdateWebhookSubscription");
            }

            // verify the required parameter 'webhookSubscriptionRequestSchema' is set
            if (webhookSubscriptionRequestSchema == null)
            {
                throw new Bandwidth.Standard.Client.ApiException(400, "Missing required parameter 'webhookSubscriptionRequestSchema' when calling TollFreeVerificationApi->UpdateWebhookSubscription");
            }


            Bandwidth.Standard.Client.RequestOptions localVarRequestOptions = new Bandwidth.Standard.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Bandwidth.Standard.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Bandwidth.Standard.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("accountId", Bandwidth.Standard.Client.ClientUtils.ParameterToString(accountId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Bandwidth.Standard.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = webhookSubscriptionRequestSchema;

            localVarRequestOptions.Operation = "TollFreeVerificationApi.UpdateWebhookSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Basic) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Bandwidth.Standard.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<WebhookSubscription>("/accounts/{accountId}/tollFreeVerification/webhooks/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhookSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
