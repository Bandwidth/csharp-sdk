/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Bandwidth.Standard.Client;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneNumberLookupApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Lookup
        /// </summary>
        /// <remarks>
        /// Create a Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <returns>CreateLookupResponse</returns>
        CreateLookupResponse CreateLookup (string accountId, LookupRequest lookupRequest);

        /// <summary>
        /// Create Lookup
        /// </summary>
        /// <remarks>
        /// Create a Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <returns>ApiResponse of CreateLookupResponse</returns>
        ApiResponse<CreateLookupResponse> CreateLookupWithHttpInfo (string accountId, LookupRequest lookupRequest);
        /// <summary>
        /// Get Lookup Request Status
        /// </summary>
        /// <remarks>
        /// Get an existing Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <returns>LookupStatus</returns>
        LookupStatus GetLookupStatus (string accountId, string requestId);

        /// <summary>
        /// Get Lookup Request Status
        /// </summary>
        /// <remarks>
        /// Get an existing Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <returns>ApiResponse of LookupStatus</returns>
        ApiResponse<LookupStatus> GetLookupStatusWithHttpInfo (string accountId, string requestId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Lookup
        /// </summary>
        /// <remarks>
        /// Create a Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateLookupResponse</returns>
        System.Threading.Tasks.Task<CreateLookupResponse> CreateLookupAsync (string accountId, LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Lookup
        /// </summary>
        /// <remarks>
        /// Create a Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLookupResponse>> CreateLookupWithHttpInfoAsync (string accountId, LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Lookup Request Status
        /// </summary>
        /// <remarks>
        /// Get an existing Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LookupStatus</returns>
        System.Threading.Tasks.Task<LookupStatus> GetLookupStatusAsync (string accountId, string requestId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Lookup Request Status
        /// </summary>
        /// <remarks>
        /// Get an existing Phone Number Lookup Request.
        /// </remarks>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LookupStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupStatus>> GetLookupStatusWithHttpInfoAsync (string accountId, string requestId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhoneNumberLookupApi : IPhoneNumberLookupApi
    {
        private Bandwidth.Standard.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberLookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneNumberLookupApi(String basePath)
        {
            this.Configuration = new Bandwidth.Standard.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberLookupApi"/> class
        /// </summary>
        /// <returns></returns>
        public PhoneNumberLookupApi()
        {
            this.Configuration = Bandwidth.Standard.Client.Configuration.Default;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberLookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhoneNumberLookupApi(Bandwidth.Standard.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bandwidth.Standard.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bandwidth.Standard.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bandwidth.Standard.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bandwidth.Standard.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Lookup Create a Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <returns>CreateLookupResponse</returns>
        public CreateLookupResponse CreateLookup (string accountId, LookupRequest lookupRequest)
        {
             ApiResponse<CreateLookupResponse> localVarResponse = CreateLookupWithHttpInfo(accountId, lookupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Lookup Create a Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <returns>ApiResponse of CreateLookupResponse</returns>
        public ApiResponse<CreateLookupResponse> CreateLookupWithHttpInfo (string accountId, LookupRequest lookupRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumberLookupApi->CreateLookup");
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
                throw new ApiException(400, "Missing required parameter 'lookupRequest' when calling PhoneNumberLookupApi->CreateLookup");

            var localVarPath = "/accounts/{accountId}/tnlookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (lookupRequest != null && lookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLookupResponse)));
        }

        /// <summary>
        /// Create Lookup Create a Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateLookupResponse</returns>
        public async System.Threading.Tasks.Task<CreateLookupResponse> CreateLookupAsync (string accountId, LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateLookupResponse> localVarResponse = await CreateLookupWithHttpInfoAsync(accountId, lookupRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Lookup Create a Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="lookupRequest">Phone number lookup request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLookupResponse>> CreateLookupWithHttpInfoAsync (string accountId, LookupRequest lookupRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumberLookupApi->CreateLookup");
            // verify the required parameter 'lookupRequest' is set
            if (lookupRequest == null)
                throw new ApiException(400, "Missing required parameter 'lookupRequest' when calling PhoneNumberLookupApi->CreateLookup");

            var localVarPath = "/accounts/{accountId}/tnlookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (lookupRequest != null && lookupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(lookupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupRequest; // byte array
            }

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLookupResponse)));
        }

        /// <summary>
        /// Get Lookup Request Status Get an existing Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <returns>LookupStatus</returns>
        public LookupStatus GetLookupStatus (string accountId, string requestId)
        {
             ApiResponse<LookupStatus> localVarResponse = GetLookupStatusWithHttpInfo(accountId, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Lookup Request Status Get an existing Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <returns>ApiResponse of LookupStatus</returns>
        public ApiResponse<LookupStatus> GetLookupStatusWithHttpInfo (string accountId, string requestId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumberLookupApi->GetLookupStatus");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PhoneNumberLookupApi->GetLookupStatus");

            var localVarPath = "/accounts/{accountId}/tnlookup/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLookupStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LookupStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupStatus)));
        }

        /// <summary>
        /// Get Lookup Request Status Get an existing Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of LookupStatus</returns>
        public async System.Threading.Tasks.Task<LookupStatus> GetLookupStatusAsync (string accountId, string requestId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<LookupStatus> localVarResponse = await GetLookupStatusWithHttpInfoAsync(accountId, requestId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Lookup Request Status Get an existing Phone Number Lookup Request.
        /// </summary>
        /// <exception cref="Bandwidth.Standard.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Your Bandwidth Account ID.</param>
        /// <param name="requestId">The phone number lookup request ID from Bandwidth.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (LookupStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LookupStatus>> GetLookupStatusWithHttpInfoAsync (string accountId, string requestId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling PhoneNumberLookupApi->GetLookupStatus");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PhoneNumberLookupApi->GetLookupStatus");

            var localVarPath = "/accounts/{accountId}/tnlookup/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLookupStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LookupStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LookupStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LookupStatus)));
        }

    }
}
