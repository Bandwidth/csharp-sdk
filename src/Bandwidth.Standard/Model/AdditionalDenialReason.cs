/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// AdditionalDenialReason
    /// </summary>
    [DataContract(Name = "additionalDenialReason")]
    public partial class AdditionalDenialReason : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDenialReason" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalDenialReason() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalDenialReason" /> class.
        /// </summary>
        /// <param name="statusCode">Reason code for denial. (required).</param>
        /// <param name="reason">Explanation for why a verification request was declined. (required).</param>
        /// <param name="resubmitAllowed">Whether a Toll-Free Verification request qualifies for resubmission via PUT. (required).</param>
        public AdditionalDenialReason(int statusCode = default(int), string reason = default(string), bool resubmitAllowed = default(bool))
        {
            this.StatusCode = statusCode;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for AdditionalDenialReason and cannot be null");
            }
            this.Reason = reason;
            this.ResubmitAllowed = resubmitAllowed;
        }

        /// <summary>
        /// Reason code for denial.
        /// </summary>
        /// <value>Reason code for denial.</value>
        /// <example>511</example>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = true)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Explanation for why a verification request was declined.
        /// </summary>
        /// <value>Explanation for why a verification request was declined.</value>
        /// <example>Invalid Information - Can&#39;t Validate URL - Website is not accessible / not available</example>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Whether a Toll-Free Verification request qualifies for resubmission via PUT.
        /// </summary>
        /// <value>Whether a Toll-Free Verification request qualifies for resubmission via PUT.</value>
        /// <example>true</example>
        [DataMember(Name = "resubmitAllowed", IsRequired = true, EmitDefaultValue = true)]
        public bool ResubmitAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalDenialReason {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ResubmitAllowed: ").Append(ResubmitAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
