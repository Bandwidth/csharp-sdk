/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// CreateCallResponse
    /// </summary>
    [DataContract(Name = "createCallResponse")]
    public partial class CreateCallResponse : IEquatable<CreateCallResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AnswerMethod
        /// </summary>
        [DataMember(Name = "answerMethod", IsRequired = true, EmitDefaultValue = true)]
        public CallbackMethodEnum AnswerMethod { get; set; }

        /// <summary>
        /// Gets or Sets AnswerFallbackMethod
        /// </summary>
        [DataMember(Name = "answerFallbackMethod", EmitDefaultValue = true)]
        public CallbackMethodEnum? AnswerFallbackMethod { get; set; }

        /// <summary>
        /// Gets or Sets DisconnectMethod
        /// </summary>
        [DataMember(Name = "disconnectMethod", IsRequired = true, EmitDefaultValue = true)]
        public CallbackMethodEnum DisconnectMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCallResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCallResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCallResponse" /> class.
        /// </summary>
        /// <param name="applicationId">The id of the application associated with the &#x60;from&#x60; number. (required).</param>
        /// <param name="accountId">The bandwidth account ID associated with the call. (required).</param>
        /// <param name="callId">Programmable Voice API Call ID. (required).</param>
        /// <param name="to">Recipient of the outgoing call. (required).</param>
        /// <param name="from">Phone number that created the outbound call. (required).</param>
        /// <param name="enqueuedTime">The time at which the call was accepted into the queue..</param>
        /// <param name="callUrl">The URL to update this call&#39;s state. (required).</param>
        /// <param name="callTimeout">The timeout (in seconds) for the callee to answer the call after it starts ringing..</param>
        /// <param name="callbackTimeout">This is the timeout (in seconds) to use when delivering webhooks for the call..</param>
        /// <param name="tag">Custom tag value..</param>
        /// <param name="answerMethod">answerMethod (required).</param>
        /// <param name="answerUrl">URL to deliver the &#x60;answer&#x60; event webhook. (required).</param>
        /// <param name="answerFallbackMethod">answerFallbackMethod.</param>
        /// <param name="answerFallbackUrl">Fallback URL to deliver the &#x60;answer&#x60; event webhook..</param>
        /// <param name="disconnectMethod">disconnectMethod (required).</param>
        /// <param name="disconnectUrl">URL to deliver the &#x60;disconnect&#x60; event webhook..</param>
        /// <param name="username">Basic auth username..</param>
        /// <param name="password">Basic auth password..</param>
        /// <param name="fallbackUsername">Basic auth username..</param>
        /// <param name="fallbackPassword">Basic auth password..</param>
        /// <param name="priority">The priority of this call over other calls from your account..</param>
        public CreateCallResponse(string applicationId = default(string), string accountId = default(string), string callId = default(string), string to = default(string), string from = default(string), DateTime? enqueuedTime = default(DateTime?), string callUrl = default(string), double callTimeout = default(double), double callbackTimeout = default(double), string tag = default(string), CallbackMethodEnum answerMethod = default(CallbackMethodEnum), string answerUrl = default(string), CallbackMethodEnum? answerFallbackMethod = default(CallbackMethodEnum?), string answerFallbackUrl = default(string), CallbackMethodEnum disconnectMethod = default(CallbackMethodEnum), string disconnectUrl = default(string), string username = default(string), string password = default(string), string fallbackUsername = default(string), string fallbackPassword = default(string), int? priority = default(int?))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for CreateCallResponse and cannot be null");
            }
            this.ApplicationId = applicationId;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for CreateCallResponse and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "callId" is required (not null)
            if (callId == null)
            {
                throw new ArgumentNullException("callId is a required property for CreateCallResponse and cannot be null");
            }
            this.CallId = callId;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for CreateCallResponse and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for CreateCallResponse and cannot be null");
            }
            this.From = from;
            // to ensure "callUrl" is required (not null)
            if (callUrl == null)
            {
                throw new ArgumentNullException("callUrl is a required property for CreateCallResponse and cannot be null");
            }
            this.CallUrl = callUrl;
            this.AnswerMethod = answerMethod;
            // to ensure "answerUrl" is required (not null)
            if (answerUrl == null)
            {
                throw new ArgumentNullException("answerUrl is a required property for CreateCallResponse and cannot be null");
            }
            this.AnswerUrl = answerUrl;
            this.DisconnectMethod = disconnectMethod;
            this.EnqueuedTime = enqueuedTime;
            this.CallTimeout = callTimeout;
            this.CallbackTimeout = callbackTimeout;
            this.Tag = tag;
            this.AnswerFallbackMethod = answerFallbackMethod;
            this.AnswerFallbackUrl = answerFallbackUrl;
            this.DisconnectUrl = disconnectUrl;
            this.Username = username;
            this.Password = password;
            this.FallbackUsername = fallbackUsername;
            this.FallbackPassword = fallbackPassword;
            this.Priority = priority;
        }

        /// <summary>
        /// The id of the application associated with the &#x60;from&#x60; number.
        /// </summary>
        /// <value>The id of the application associated with the &#x60;from&#x60; number.</value>
        /// <example>04e88489-df02-4e34-a0ee-27a91849555f</example>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The bandwidth account ID associated with the call.
        /// </summary>
        /// <value>The bandwidth account ID associated with the call.</value>
        /// <example>9900000</example>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Programmable Voice API Call ID.
        /// </summary>
        /// <value>Programmable Voice API Call ID.</value>
        /// <example>c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85</example>
        [DataMember(Name = "callId", IsRequired = true, EmitDefaultValue = true)]
        public string CallId { get; set; }

        /// <summary>
        /// Recipient of the outgoing call.
        /// </summary>
        /// <value>Recipient of the outgoing call.</value>
        /// <example>+19195551234</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Phone number that created the outbound call.
        /// </summary>
        /// <value>Phone number that created the outbound call.</value>
        /// <example>+19195554321</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The time at which the call was accepted into the queue.
        /// </summary>
        /// <value>The time at which the call was accepted into the queue.</value>
        /// <example>2022-06-16T13:15:07.160Z</example>
        [DataMember(Name = "enqueuedTime", EmitDefaultValue = true)]
        public DateTime? EnqueuedTime { get; set; }

        /// <summary>
        /// The URL to update this call&#39;s state.
        /// </summary>
        /// <value>The URL to update this call&#39;s state.</value>
        /// <example>https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85</example>
        [DataMember(Name = "callUrl", IsRequired = true, EmitDefaultValue = true)]
        public string CallUrl { get; set; }

        /// <summary>
        /// The timeout (in seconds) for the callee to answer the call after it starts ringing.
        /// </summary>
        /// <value>The timeout (in seconds) for the callee to answer the call after it starts ringing.</value>
        /// <example>30</example>
        [DataMember(Name = "callTimeout", EmitDefaultValue = false)]
        public double CallTimeout { get; set; }

        /// <summary>
        /// This is the timeout (in seconds) to use when delivering webhooks for the call.
        /// </summary>
        /// <value>This is the timeout (in seconds) to use when delivering webhooks for the call.</value>
        /// <example>15</example>
        [DataMember(Name = "callbackTimeout", EmitDefaultValue = false)]
        public double CallbackTimeout { get; set; }

        /// <summary>
        /// Custom tag value.
        /// </summary>
        /// <value>Custom tag value.</value>
        /// <example>My custom tag value</example>
        [DataMember(Name = "tag", EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// URL to deliver the &#x60;answer&#x60; event webhook.
        /// </summary>
        /// <value>URL to deliver the &#x60;answer&#x60; event webhook.</value>
        /// <example>https://myServer.example/bandwidth/webhooks/answer</example>
        [DataMember(Name = "answerUrl", IsRequired = true, EmitDefaultValue = true)]
        public string AnswerUrl { get; set; }

        /// <summary>
        /// Fallback URL to deliver the &#x60;answer&#x60; event webhook.
        /// </summary>
        /// <value>Fallback URL to deliver the &#x60;answer&#x60; event webhook.</value>
        /// <example>https://myFallbackServer.example/bandwidth/webhooks/answer</example>
        [DataMember(Name = "answerFallbackUrl", EmitDefaultValue = true)]
        public string AnswerFallbackUrl { get; set; }

        /// <summary>
        /// URL to deliver the &#x60;disconnect&#x60; event webhook.
        /// </summary>
        /// <value>URL to deliver the &#x60;disconnect&#x60; event webhook.</value>
        /// <example>https://myServer.example/bandwidth/webhooks/disconnect</example>
        [DataMember(Name = "disconnectUrl", EmitDefaultValue = true)]
        public string DisconnectUrl { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        /// <value>Basic auth username.</value>
        /// <example>mySecretUsername</example>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        /// <value>Basic auth password.</value>
        /// <example>mySecretPassword1!</example>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        /// <value>Basic auth username.</value>
        /// <example>mySecretUsername</example>
        [DataMember(Name = "fallbackUsername", EmitDefaultValue = true)]
        public string FallbackUsername { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        /// <value>Basic auth password.</value>
        /// <example>mySecretPassword1!</example>
        [DataMember(Name = "fallbackPassword", EmitDefaultValue = true)]
        public string FallbackPassword { get; set; }

        /// <summary>
        /// The priority of this call over other calls from your account.
        /// </summary>
        /// <value>The priority of this call over other calls from your account.</value>
        /// <example>5</example>
        [DataMember(Name = "priority", EmitDefaultValue = true)]
        public int? Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCallResponse {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  EnqueuedTime: ").Append(EnqueuedTime).Append("\n");
            sb.Append("  CallUrl: ").Append(CallUrl).Append("\n");
            sb.Append("  CallTimeout: ").Append(CallTimeout).Append("\n");
            sb.Append("  CallbackTimeout: ").Append(CallbackTimeout).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  AnswerMethod: ").Append(AnswerMethod).Append("\n");
            sb.Append("  AnswerUrl: ").Append(AnswerUrl).Append("\n");
            sb.Append("  AnswerFallbackMethod: ").Append(AnswerFallbackMethod).Append("\n");
            sb.Append("  AnswerFallbackUrl: ").Append(AnswerFallbackUrl).Append("\n");
            sb.Append("  DisconnectMethod: ").Append(DisconnectMethod).Append("\n");
            sb.Append("  DisconnectUrl: ").Append(DisconnectUrl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  FallbackUsername: ").Append(FallbackUsername).Append("\n");
            sb.Append("  FallbackPassword: ").Append(FallbackPassword).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCallResponse);
        }

        /// <summary>
        /// Returns true if CreateCallResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCallResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCallResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CallId == input.CallId ||
                    (this.CallId != null &&
                    this.CallId.Equals(input.CallId))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.EnqueuedTime == input.EnqueuedTime ||
                    (this.EnqueuedTime != null &&
                    this.EnqueuedTime.Equals(input.EnqueuedTime))
                ) && 
                (
                    this.CallUrl == input.CallUrl ||
                    (this.CallUrl != null &&
                    this.CallUrl.Equals(input.CallUrl))
                ) && 
                (
                    this.CallTimeout == input.CallTimeout ||
                    this.CallTimeout.Equals(input.CallTimeout)
                ) && 
                (
                    this.CallbackTimeout == input.CallbackTimeout ||
                    this.CallbackTimeout.Equals(input.CallbackTimeout)
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.AnswerMethod == input.AnswerMethod ||
                    this.AnswerMethod.Equals(input.AnswerMethod)
                ) && 
                (
                    this.AnswerUrl == input.AnswerUrl ||
                    (this.AnswerUrl != null &&
                    this.AnswerUrl.Equals(input.AnswerUrl))
                ) && 
                (
                    this.AnswerFallbackMethod == input.AnswerFallbackMethod ||
                    this.AnswerFallbackMethod.Equals(input.AnswerFallbackMethod)
                ) && 
                (
                    this.AnswerFallbackUrl == input.AnswerFallbackUrl ||
                    (this.AnswerFallbackUrl != null &&
                    this.AnswerFallbackUrl.Equals(input.AnswerFallbackUrl))
                ) && 
                (
                    this.DisconnectMethod == input.DisconnectMethod ||
                    this.DisconnectMethod.Equals(input.DisconnectMethod)
                ) && 
                (
                    this.DisconnectUrl == input.DisconnectUrl ||
                    (this.DisconnectUrl != null &&
                    this.DisconnectUrl.Equals(input.DisconnectUrl))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.FallbackUsername == input.FallbackUsername ||
                    (this.FallbackUsername != null &&
                    this.FallbackUsername.Equals(input.FallbackUsername))
                ) && 
                (
                    this.FallbackPassword == input.FallbackPassword ||
                    (this.FallbackPassword != null &&
                    this.FallbackPassword.Equals(input.FallbackPassword))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.CallId != null)
                {
                    hashCode = (hashCode * 59) + this.CallId.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.EnqueuedTime != null)
                {
                    hashCode = (hashCode * 59) + this.EnqueuedTime.GetHashCode();
                }
                if (this.CallUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CallTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.CallbackTimeout.GetHashCode();
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnswerMethod.GetHashCode();
                if (this.AnswerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AnswerUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnswerFallbackMethod.GetHashCode();
                if (this.AnswerFallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AnswerFallbackUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisconnectMethod.GetHashCode();
                if (this.DisconnectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DisconnectUrl.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.FallbackUsername != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackUsername.GetHashCode();
                }
                if (this.FallbackPassword != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackPassword.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 1024.", new [] { "Username" });
            }

            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 1024.", new [] { "Password" });
            }

            // FallbackUsername (string) maxLength
            if (this.FallbackUsername != null && this.FallbackUsername.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FallbackUsername, length must be less than 1024.", new [] { "FallbackUsername" });
            }

            // FallbackPassword (string) maxLength
            if (this.FallbackPassword != null && this.FallbackPassword.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FallbackPassword, length must be less than 1024.", new [] { "FallbackPassword" });
            }

            yield break;
        }
    }

}
