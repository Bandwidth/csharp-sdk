/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// TfvSubmissionInfo
    /// </summary>
    [DataContract(Name = "tfvSubmissionInfo")]
    public partial class TfvSubmissionInfo : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets BusinessRegistrationType
        /// </summary>
        [DataMember(Name = "businessRegistrationType", EmitDefaultValue = true)]
        public BusinessRegistrationTypeEnum? BusinessRegistrationType { get; set; }

        /// <summary>
        /// Gets or Sets BusinessEntityType
        /// </summary>
        [DataMember(Name = "businessEntityType", EmitDefaultValue = true)]
        public BusinessEntityTypeEnum? BusinessEntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TfvSubmissionInfo" /> class.
        /// </summary>
        /// <param name="businessAddress">businessAddress.</param>
        /// <param name="businessContact">businessContact.</param>
        /// <param name="messageVolume">Estimated monthly volume of messages from the toll-free number..</param>
        /// <param name="useCase">The category of the use case..</param>
        /// <param name="useCaseSummary">A general idea of the use case and customer..</param>
        /// <param name="productionMessageContent">Example of message content..</param>
        /// <param name="optInWorkflow">optInWorkflow.</param>
        /// <param name="additionalInformation">Any additional information..</param>
        /// <param name="isvReseller">ISV name..</param>
        /// <param name="privacyPolicyUrl">The Toll-Free Verification request privacy policy URL..</param>
        /// <param name="termsAndConditionsUrl">The Toll-Free Verification request terms and conditions policy URL..</param>
        /// <param name="businessDba">The company &#39;Doing Business As&#39;..</param>
        /// <param name="businessRegistrationNumber">US Federal Tax ID Number (EIN) or Canada Business Number (CBN). Optional until early 2026. If a value is provided for this field, a value must be provided for &#x60;businessRegistrationType&#x60; and &#x60;businessEntityType&#x60;. Available starting October 1st, 2025..</param>
        /// <param name="businessRegistrationType">businessRegistrationType.</param>
        /// <param name="businessEntityType">businessEntityType.</param>
        public TfvSubmissionInfo(Address businessAddress = default(Address), Contact businessContact = default(Contact), int messageVolume = default(int), string useCase = default(string), string useCaseSummary = default(string), string productionMessageContent = default(string), OptInWorkflow optInWorkflow = default(OptInWorkflow), string additionalInformation = default(string), string isvReseller = default(string), string privacyPolicyUrl = default(string), string termsAndConditionsUrl = default(string), string businessDba = default(string), string businessRegistrationNumber = default(string), BusinessRegistrationTypeEnum? businessRegistrationType = default(BusinessRegistrationTypeEnum?), BusinessEntityTypeEnum? businessEntityType = default(BusinessEntityTypeEnum?))
        {
            this.BusinessAddress = businessAddress;
            this.BusinessContact = businessContact;
            this.MessageVolume = messageVolume;
            this.UseCase = useCase;
            this.UseCaseSummary = useCaseSummary;
            this.ProductionMessageContent = productionMessageContent;
            this.OptInWorkflow = optInWorkflow;
            this.AdditionalInformation = additionalInformation;
            this.IsvReseller = isvReseller;
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            this.TermsAndConditionsUrl = termsAndConditionsUrl;
            this.BusinessDba = businessDba;
            this.BusinessRegistrationNumber = businessRegistrationNumber;
            this.BusinessRegistrationType = businessRegistrationType;
            this.BusinessEntityType = businessEntityType;
        }

        /// <summary>
        /// Gets or Sets BusinessAddress
        /// </summary>
        [DataMember(Name = "businessAddress", EmitDefaultValue = false)]
        public Address BusinessAddress { get; set; }

        /// <summary>
        /// Gets or Sets BusinessContact
        /// </summary>
        [DataMember(Name = "businessContact", EmitDefaultValue = false)]
        public Contact BusinessContact { get; set; }

        /// <summary>
        /// Estimated monthly volume of messages from the toll-free number.
        /// </summary>
        /// <value>Estimated monthly volume of messages from the toll-free number.</value>
        /// <example>10000</example>
        [DataMember(Name = "messageVolume", EmitDefaultValue = false)]
        public int MessageVolume { get; set; }

        /// <summary>
        /// The category of the use case.
        /// </summary>
        /// <value>The category of the use case.</value>
        /// <example>2FA</example>
        [DataMember(Name = "useCase", EmitDefaultValue = false)]
        public string UseCase { get; set; }

        /// <summary>
        /// A general idea of the use case and customer.
        /// </summary>
        /// <value>A general idea of the use case and customer.</value>
        /// <example>Text summarizing the use case for the toll-free number</example>
        [DataMember(Name = "useCaseSummary", EmitDefaultValue = false)]
        public string UseCaseSummary { get; set; }

        /// <summary>
        /// Example of message content.
        /// </summary>
        /// <value>Example of message content.</value>
        /// <example>Production message content</example>
        [DataMember(Name = "productionMessageContent", EmitDefaultValue = false)]
        public string ProductionMessageContent { get; set; }

        /// <summary>
        /// Gets or Sets OptInWorkflow
        /// </summary>
        [DataMember(Name = "optInWorkflow", EmitDefaultValue = false)]
        public OptInWorkflow OptInWorkflow { get; set; }

        /// <summary>
        /// Any additional information.
        /// </summary>
        /// <value>Any additional information.</value>
        /// <example>Any additional information</example>
        [DataMember(Name = "additionalInformation", EmitDefaultValue = true)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// ISV name.
        /// </summary>
        /// <value>ISV name.</value>
        /// <example>Test ISV</example>
        [DataMember(Name = "isvReseller", EmitDefaultValue = true)]
        public string IsvReseller { get; set; }

        /// <summary>
        /// The Toll-Free Verification request privacy policy URL.
        /// </summary>
        /// <value>The Toll-Free Verification request privacy policy URL.</value>
        /// <example>http://your-company.com/privacyPolicy</example>
        [DataMember(Name = "privacyPolicyUrl", EmitDefaultValue = false)]
        public string PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// The Toll-Free Verification request terms and conditions policy URL.
        /// </summary>
        /// <value>The Toll-Free Verification request terms and conditions policy URL.</value>
        /// <example>http://your-company.com/termsAndConditions</example>
        [DataMember(Name = "termsAndConditionsUrl", EmitDefaultValue = false)]
        public string TermsAndConditionsUrl { get; set; }

        /// <summary>
        /// The company &#39;Doing Business As&#39;.
        /// </summary>
        /// <value>The company &#39;Doing Business As&#39;.</value>
        /// <example>Another Company Name Inc.</example>
        [DataMember(Name = "businessDba", EmitDefaultValue = false)]
        public string BusinessDba { get; set; }

        /// <summary>
        /// US Federal Tax ID Number (EIN) or Canada Business Number (CBN). Optional until early 2026. If a value is provided for this field, a value must be provided for &#x60;businessRegistrationType&#x60; and &#x60;businessEntityType&#x60;. Available starting October 1st, 2025.
        /// </summary>
        /// <value>US Federal Tax ID Number (EIN) or Canada Business Number (CBN). Optional until early 2026. If a value is provided for this field, a value must be provided for &#x60;businessRegistrationType&#x60; and &#x60;businessEntityType&#x60;. Available starting October 1st, 2025.</value>
        /// <example>12-3456789</example>
        [DataMember(Name = "businessRegistrationNumber", EmitDefaultValue = true)]
        public string BusinessRegistrationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TfvSubmissionInfo {\n");
            sb.Append("  BusinessAddress: ").Append(BusinessAddress).Append("\n");
            sb.Append("  BusinessContact: ").Append(BusinessContact).Append("\n");
            sb.Append("  MessageVolume: ").Append(MessageVolume).Append("\n");
            sb.Append("  UseCase: ").Append(UseCase).Append("\n");
            sb.Append("  UseCaseSummary: ").Append(UseCaseSummary).Append("\n");
            sb.Append("  ProductionMessageContent: ").Append(ProductionMessageContent).Append("\n");
            sb.Append("  OptInWorkflow: ").Append(OptInWorkflow).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  IsvReseller: ").Append(IsvReseller).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  TermsAndConditionsUrl: ").Append(TermsAndConditionsUrl).Append("\n");
            sb.Append("  BusinessDba: ").Append(BusinessDba).Append("\n");
            sb.Append("  BusinessRegistrationNumber: ").Append(BusinessRegistrationNumber).Append("\n");
            sb.Append("  BusinessRegistrationType: ").Append(BusinessRegistrationType).Append("\n");
            sb.Append("  BusinessEntityType: ").Append(BusinessEntityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MessageVolume (int) maximum
            if (this.MessageVolume > (int)10000000)
            {
                yield return new ValidationResult("Invalid value for MessageVolume, must be a value less than or equal to 10000000.", new [] { "MessageVolume" });
            }

            // MessageVolume (int) minimum
            if (this.MessageVolume < (int)10)
            {
                yield return new ValidationResult("Invalid value for MessageVolume, must be a value greater than or equal to 10.", new [] { "MessageVolume" });
            }

            // UseCase (string) maxLength
            if (this.UseCase != null && this.UseCase.Length > 500)
            {
                yield return new ValidationResult("Invalid value for UseCase, length must be less than 500.", new [] { "UseCase" });
            }

            // UseCase (string) minLength
            if (this.UseCase != null && this.UseCase.Length < 0)
            {
                yield return new ValidationResult("Invalid value for UseCase, length must be greater than 0.", new [] { "UseCase" });
            }

            // UseCaseSummary (string) maxLength
            if (this.UseCaseSummary != null && this.UseCaseSummary.Length > 500)
            {
                yield return new ValidationResult("Invalid value for UseCaseSummary, length must be less than 500.", new [] { "UseCaseSummary" });
            }

            // UseCaseSummary (string) minLength
            if (this.UseCaseSummary != null && this.UseCaseSummary.Length < 0)
            {
                yield return new ValidationResult("Invalid value for UseCaseSummary, length must be greater than 0.", new [] { "UseCaseSummary" });
            }

            // ProductionMessageContent (string) maxLength
            if (this.ProductionMessageContent != null && this.ProductionMessageContent.Length > 500)
            {
                yield return new ValidationResult("Invalid value for ProductionMessageContent, length must be less than 500.", new [] { "ProductionMessageContent" });
            }

            // ProductionMessageContent (string) minLength
            if (this.ProductionMessageContent != null && this.ProductionMessageContent.Length < 0)
            {
                yield return new ValidationResult("Invalid value for ProductionMessageContent, length must be greater than 0.", new [] { "ProductionMessageContent" });
            }

            // AdditionalInformation (string) maxLength
            if (this.AdditionalInformation != null && this.AdditionalInformation.Length > 500)
            {
                yield return new ValidationResult("Invalid value for AdditionalInformation, length must be less than 500.", new [] { "AdditionalInformation" });
            }

            // AdditionalInformation (string) minLength
            if (this.AdditionalInformation != null && this.AdditionalInformation.Length < 0)
            {
                yield return new ValidationResult("Invalid value for AdditionalInformation, length must be greater than 0.", new [] { "AdditionalInformation" });
            }

            // IsvReseller (string) maxLength
            if (this.IsvReseller != null && this.IsvReseller.Length > 500)
            {
                yield return new ValidationResult("Invalid value for IsvReseller, length must be less than 500.", new [] { "IsvReseller" });
            }

            // IsvReseller (string) minLength
            if (this.IsvReseller != null && this.IsvReseller.Length < 0)
            {
                yield return new ValidationResult("Invalid value for IsvReseller, length must be greater than 0.", new [] { "IsvReseller" });
            }

            // BusinessRegistrationNumber (string) maxLength
            if (this.BusinessRegistrationNumber != null && this.BusinessRegistrationNumber.Length > 500)
            {
                yield return new ValidationResult("Invalid value for BusinessRegistrationNumber, length must be less than 500.", new [] { "BusinessRegistrationNumber" });
            }

            yield break;
        }
    }

}
