/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Message payload schema within a callback
    /// </summary>
    [DataContract(Name = "statusCallbackMessage")]
    public partial class StatusCallbackMessage : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", IsRequired = true, EmitDefaultValue = true)]
        public MessageDirectionEnum Direction { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public MultiChannelMessageChannelEnum? Channel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusCallbackMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusCallbackMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusCallbackMessage" /> class.
        /// </summary>
        /// <param name="id">A unique identifier of the message. (required).</param>
        /// <param name="owner">The Bandwidth phone number or alphanumeric identifier associated with the message. (required).</param>
        /// <param name="applicationId">The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard. (required).</param>
        /// <param name="time">time (required).</param>
        /// <param name="segmentCount">The number of segments the user&#39;s message is broken into before sending over carrier networks. (required).</param>
        /// <param name="direction">direction (required).</param>
        /// <param name="to">The phone number recipients of the message. (required).</param>
        /// <param name="from">The Bandwidth phone number or alphanumeric identifier the message was sent from. (required).</param>
        /// <param name="text">text.</param>
        /// <param name="tag">A custom string that will be included in callback events of the message. Max 1024 characters..</param>
        /// <param name="media">Optional media, not applicable for sms.</param>
        /// <param name="priority">priority.</param>
        /// <param name="channel">channel.</param>
        public StatusCallbackMessage(string id = default(string), string owner = default(string), string applicationId = default(string), DateTime time = default(DateTime), int segmentCount = default(int), MessageDirectionEnum direction = default(MessageDirectionEnum), List<string> to = default(List<string>), string from = default(string), string text = default(string), string tag = default(string), List<string> media = default(List<string>), PriorityEnum? priority = default(PriorityEnum?), MultiChannelMessageChannelEnum? channel = default(MultiChannelMessageChannelEnum?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for StatusCallbackMessage and cannot be null");
            }
            this.Id = id;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for StatusCallbackMessage and cannot be null");
            }
            this.Owner = owner;
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for StatusCallbackMessage and cannot be null");
            }
            this.ApplicationId = applicationId;
            this.Time = time;
            this.SegmentCount = segmentCount;
            this.Direction = direction;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for StatusCallbackMessage and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for StatusCallbackMessage and cannot be null");
            }
            this.From = from;
            this.Text = text;
            this.Tag = tag;
            this.Media = media;
            this.Priority = priority;
            this.Channel = channel;
        }

        /// <summary>
        /// A unique identifier of the message.
        /// </summary>
        /// <value>A unique identifier of the message.</value>
        /// <example>1661365814859loidf7mcwd4qacn7</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The Bandwidth phone number or alphanumeric identifier associated with the message.
        /// </summary>
        /// <value>The Bandwidth phone number or alphanumeric identifier associated with the message.</value>
        /// <example>+15553332222</example>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard.
        /// </summary>
        /// <value>The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard.</value>
        /// <example>93de2206-9669-4e07-948d-329f4b722ee2</example>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        /// <example>2024-12-02T20:15:57.666Z</example>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// The number of segments the user&#39;s message is broken into before sending over carrier networks.
        /// </summary>
        /// <value>The number of segments the user&#39;s message is broken into before sending over carrier networks.</value>
        /// <example>1</example>
        [DataMember(Name = "segmentCount", IsRequired = true, EmitDefaultValue = true)]
        public int SegmentCount { get; set; }

        /// <summary>
        /// The phone number recipients of the message.
        /// </summary>
        /// <value>The phone number recipients of the message.</value>
        /// <example>[&quot;+15552223333&quot;]</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// The Bandwidth phone number or alphanumeric identifier the message was sent from.
        /// </summary>
        /// <value>The Bandwidth phone number or alphanumeric identifier the message was sent from.</value>
        /// <example>+15553332222</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        /// <example>Hello world</example>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// A custom string that will be included in callback events of the message. Max 1024 characters.
        /// </summary>
        /// <value>A custom string that will be included in callback events of the message. Max 1024 characters.</value>
        /// <example>custom string</example>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Optional media, not applicable for sms
        /// </summary>
        /// <value>Optional media, not applicable for sms</value>
        /// <example>[&quot;https://dev.bandwidth.com/images/bandwidth-logo.png&quot;,&quot;https://dev.bandwidth.com/images/github_logo.png&quot;]</example>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<string> Media { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusCallbackMessage {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  SegmentCount: ").Append(SegmentCount).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
