/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// CreateCall
    /// </summary>
    [DataContract(Name = "createCall")]
    public partial class CreateCall : IEquatable<CreateCall>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AnswerMethod
        /// </summary>
        [DataMember(Name = "answerMethod", EmitDefaultValue = true)]
        public CallbackMethodEnum? AnswerMethod { get; set; }

        /// <summary>
        /// Gets or Sets AnswerFallbackMethod
        /// </summary>
        [DataMember(Name = "answerFallbackMethod", EmitDefaultValue = true)]
        public CallbackMethodEnum? AnswerFallbackMethod { get; set; }

        /// <summary>
        /// Gets or Sets DisconnectMethod
        /// </summary>
        [DataMember(Name = "disconnectMethod", EmitDefaultValue = true)]
        public CallbackMethodEnum? DisconnectMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCall" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCall() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCall" /> class.
        /// </summary>
        /// <param name="to">The destination to call (must be an E.164 formatted number (e.g. &#x60;+15555551212&#x60;) or a SIP URI (e.g. &#x60;sip:user@server.example&#x60;)). (required).</param>
        /// <param name="from">A Bandwidth phone number on your account the call should come from (must be in E.164 format, like &#x60;+15555551212&#x60;, or be one of the following strings: &#x60;Restricted&#x60;, &#x60;Anonymous&#x60;, &#x60;Private&#x60;, or &#x60;Unavailable&#x60;). (required).</param>
        /// <param name="displayName">The caller display name to use when the call is created.  May not exceed 256 characters nor contain control characters such as new lines..</param>
        /// <param name="uui">A comma-separated list of &#39;User-To-User&#39; headers to be sent in the INVITE when calling a SIP URI. Each value must end with an &#39;encoding&#39; parameter as described in &lt;a href&#x3D;&#39;https://tools.ietf.org/html/rfc7433&#39;&gt;RFC 7433&lt;/a&gt;. Only &#39;jwt&#39; and &#39;base64&#39; encodings are allowed. The entire value cannot exceed 350 characters, including parameters and separators..</param>
        /// <param name="applicationId">The id of the application associated with the &#x60;from&#x60; number. (required).</param>
        /// <param name="answerUrl">The full URL to send the &lt;a href&#x3D;&#39;/docs/voice/webhooks/answer&#39;&gt;Answer&lt;/a&gt; event to when the called party answers. This endpoint should return the first &lt;a href&#x3D;&#39;/docs/voice/bxml&#39;&gt;BXML document&lt;/a&gt; to be executed in the call.  Must use &#x60;https&#x60; if specifying &#x60;username&#x60; and &#x60;password&#x60;. (required).</param>
        /// <param name="answerMethod">answerMethod.</param>
        /// <param name="username">Basic auth username..</param>
        /// <param name="password">Basic auth password..</param>
        /// <param name="answerFallbackUrl">A fallback url which, if provided, will be used to retry the &#x60;answer&#x60; webhook delivery in case &#x60;answerUrl&#x60; fails to respond  Must use &#x60;https&#x60; if specifying &#x60;fallbackUsername&#x60; and &#x60;fallbackPassword&#x60;..</param>
        /// <param name="answerFallbackMethod">answerFallbackMethod.</param>
        /// <param name="fallbackUsername">Basic auth username..</param>
        /// <param name="fallbackPassword">Basic auth password..</param>
        /// <param name="disconnectUrl">The URL to send the &lt;a href&#x3D;&#39;/docs/voice/webhooks/disconnect&#39;&gt;Disconnect&lt;/a&gt; event to when the call ends. This event does not expect a BXML response..</param>
        /// <param name="disconnectMethod">disconnectMethod.</param>
        /// <param name="callTimeout">The timeout (in seconds) for the callee to answer the call after it starts ringing. If the call does not start ringing within 30s, the call will be cancelled regardless of this value.  Can be any numeric value (including decimals) between 1 and 300. (default to 30D).</param>
        /// <param name="callbackTimeout">This is the timeout (in seconds) to use when delivering webhooks for the call. Can be any numeric value (including decimals) between 1 and 25. (default to 15D).</param>
        /// <param name="machineDetection">machineDetection.</param>
        /// <param name="priority">The priority of this call over other calls from your account. For example, if during a call your application needs to place a new call and bridge it with the current call, you might want to create the call with priority 1 so that it will be the next call picked off your queue, ahead of other less time sensitive calls. A lower value means higher priority, so a priority 1 call takes precedence over a priority 2 call. (default to 5).</param>
        /// <param name="tag">A custom string that will be sent with all webhooks for this call unless overwritten by a future &lt;a href&#x3D;&#39;/docs/voice/bxml/tag&#39;&gt;&#x60;&lt;Tag&gt;&#x60;&lt;/a&gt; verb or &#x60;tag&#x60; attribute on another verb, or cleared.  May be cleared by setting &#x60;tag&#x3D;\&quot;\&quot;&#x60;  Max length 256 characters..</param>
        public CreateCall(string to = default(string), string from = default(string), string displayName = default(string), string uui = default(string), string applicationId = default(string), string answerUrl = default(string), CallbackMethodEnum? answerMethod = default(CallbackMethodEnum?), string username = default(string), string password = default(string), string answerFallbackUrl = default(string), CallbackMethodEnum? answerFallbackMethod = default(CallbackMethodEnum?), string fallbackUsername = default(string), string fallbackPassword = default(string), string disconnectUrl = default(string), CallbackMethodEnum? disconnectMethod = default(CallbackMethodEnum?), double? callTimeout = 30D, double? callbackTimeout = 15D, MachineDetectionConfiguration machineDetection = default(MachineDetectionConfiguration), int? priority = 5, string tag = default(string))
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for CreateCall and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for CreateCall and cannot be null");
            }
            this.From = from;
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for CreateCall and cannot be null");
            }
            this.ApplicationId = applicationId;
            // to ensure "answerUrl" is required (not null)
            if (answerUrl == null)
            {
                throw new ArgumentNullException("answerUrl is a required property for CreateCall and cannot be null");
            }
            this.AnswerUrl = answerUrl;
            this.DisplayName = displayName;
            this.Uui = uui;
            this.AnswerMethod = answerMethod;
            this.Username = username;
            this.Password = password;
            this.AnswerFallbackUrl = answerFallbackUrl;
            this.AnswerFallbackMethod = answerFallbackMethod;
            this.FallbackUsername = fallbackUsername;
            this.FallbackPassword = fallbackPassword;
            this.DisconnectUrl = disconnectUrl;
            this.DisconnectMethod = disconnectMethod;
            // use default value if no "callTimeout" provided
            this.CallTimeout = callTimeout ?? 30D;
            // use default value if no "callbackTimeout" provided
            this.CallbackTimeout = callbackTimeout ?? 15D;
            this.MachineDetection = machineDetection;
            // use default value if no "priority" provided
            this.Priority = priority ?? 5;
            this.Tag = tag;
        }

        /// <summary>
        /// The destination to call (must be an E.164 formatted number (e.g. &#x60;+15555551212&#x60;) or a SIP URI (e.g. &#x60;sip:user@server.example&#x60;)).
        /// </summary>
        /// <value>The destination to call (must be an E.164 formatted number (e.g. &#x60;+15555551212&#x60;) or a SIP URI (e.g. &#x60;sip:user@server.example&#x60;)).</value>
        /// <example>+19195551234</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// A Bandwidth phone number on your account the call should come from (must be in E.164 format, like &#x60;+15555551212&#x60;, or be one of the following strings: &#x60;Restricted&#x60;, &#x60;Anonymous&#x60;, &#x60;Private&#x60;, or &#x60;Unavailable&#x60;).
        /// </summary>
        /// <value>A Bandwidth phone number on your account the call should come from (must be in E.164 format, like &#x60;+15555551212&#x60;, or be one of the following strings: &#x60;Restricted&#x60;, &#x60;Anonymous&#x60;, &#x60;Private&#x60;, or &#x60;Unavailable&#x60;).</value>
        /// <example>+19195554321</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The caller display name to use when the call is created.  May not exceed 256 characters nor contain control characters such as new lines.
        /// </summary>
        /// <value>The caller display name to use when the call is created.  May not exceed 256 characters nor contain control characters such as new lines.</value>
        /// <example>John Doe</example>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// A comma-separated list of &#39;User-To-User&#39; headers to be sent in the INVITE when calling a SIP URI. Each value must end with an &#39;encoding&#39; parameter as described in &lt;a href&#x3D;&#39;https://tools.ietf.org/html/rfc7433&#39;&gt;RFC 7433&lt;/a&gt;. Only &#39;jwt&#39; and &#39;base64&#39; encodings are allowed. The entire value cannot exceed 350 characters, including parameters and separators.
        /// </summary>
        /// <value>A comma-separated list of &#39;User-To-User&#39; headers to be sent in the INVITE when calling a SIP URI. Each value must end with an &#39;encoding&#39; parameter as described in &lt;a href&#x3D;&#39;https://tools.ietf.org/html/rfc7433&#39;&gt;RFC 7433&lt;/a&gt;. Only &#39;jwt&#39; and &#39;base64&#39; encodings are allowed. The entire value cannot exceed 350 characters, including parameters and separators.</value>
        /// <example>eyJhbGciOiJIUzI1NiJ9.WyJoaSJd.-znkjYyCkgz4djmHUPSXl9YrJ6Nix_XvmlwKGFh5ERM;encoding&#x3D;jwt,aGVsbG8gd29ybGQ;encoding&#x3D;base64</example>
        [DataMember(Name = "uui", EmitDefaultValue = true)]
        public string Uui { get; set; }

        /// <summary>
        /// The id of the application associated with the &#x60;from&#x60; number.
        /// </summary>
        /// <value>The id of the application associated with the &#x60;from&#x60; number.</value>
        /// <example>1234-qwer-5679-tyui</example>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The full URL to send the &lt;a href&#x3D;&#39;/docs/voice/webhooks/answer&#39;&gt;Answer&lt;/a&gt; event to when the called party answers. This endpoint should return the first &lt;a href&#x3D;&#39;/docs/voice/bxml&#39;&gt;BXML document&lt;/a&gt; to be executed in the call.  Must use &#x60;https&#x60; if specifying &#x60;username&#x60; and &#x60;password&#x60;.
        /// </summary>
        /// <value>The full URL to send the &lt;a href&#x3D;&#39;/docs/voice/webhooks/answer&#39;&gt;Answer&lt;/a&gt; event to when the called party answers. This endpoint should return the first &lt;a href&#x3D;&#39;/docs/voice/bxml&#39;&gt;BXML document&lt;/a&gt; to be executed in the call.  Must use &#x60;https&#x60; if specifying &#x60;username&#x60; and &#x60;password&#x60;.</value>
        /// <example>https://www.myCallbackServer.example/webhooks/answer</example>
        [DataMember(Name = "answerUrl", IsRequired = true, EmitDefaultValue = true)]
        public string AnswerUrl { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        /// <value>Basic auth username.</value>
        /// <example>mySecretUsername</example>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        /// <value>Basic auth password.</value>
        /// <example>mySecretPassword1!</example>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// A fallback url which, if provided, will be used to retry the &#x60;answer&#x60; webhook delivery in case &#x60;answerUrl&#x60; fails to respond  Must use &#x60;https&#x60; if specifying &#x60;fallbackUsername&#x60; and &#x60;fallbackPassword&#x60;.
        /// </summary>
        /// <value>A fallback url which, if provided, will be used to retry the &#x60;answer&#x60; webhook delivery in case &#x60;answerUrl&#x60; fails to respond  Must use &#x60;https&#x60; if specifying &#x60;fallbackUsername&#x60; and &#x60;fallbackPassword&#x60;.</value>
        /// <example>https://www.myFallbackServer.example/webhooks/answer</example>
        [DataMember(Name = "answerFallbackUrl", EmitDefaultValue = true)]
        public string AnswerFallbackUrl { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        /// <value>Basic auth username.</value>
        /// <example>mySecretUsername</example>
        [DataMember(Name = "fallbackUsername", EmitDefaultValue = true)]
        public string FallbackUsername { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        /// <value>Basic auth password.</value>
        /// <example>mySecretPassword1!</example>
        [DataMember(Name = "fallbackPassword", EmitDefaultValue = true)]
        public string FallbackPassword { get; set; }

        /// <summary>
        /// The URL to send the &lt;a href&#x3D;&#39;/docs/voice/webhooks/disconnect&#39;&gt;Disconnect&lt;/a&gt; event to when the call ends. This event does not expect a BXML response.
        /// </summary>
        /// <value>The URL to send the &lt;a href&#x3D;&#39;/docs/voice/webhooks/disconnect&#39;&gt;Disconnect&lt;/a&gt; event to when the call ends. This event does not expect a BXML response.</value>
        /// <example>https://www.myCallbackServer.example/webhooks/disconnect</example>
        [DataMember(Name = "disconnectUrl", EmitDefaultValue = true)]
        public string DisconnectUrl { get; set; }

        /// <summary>
        /// The timeout (in seconds) for the callee to answer the call after it starts ringing. If the call does not start ringing within 30s, the call will be cancelled regardless of this value.  Can be any numeric value (including decimals) between 1 and 300.
        /// </summary>
        /// <value>The timeout (in seconds) for the callee to answer the call after it starts ringing. If the call does not start ringing within 30s, the call will be cancelled regardless of this value.  Can be any numeric value (including decimals) between 1 and 300.</value>
        /// <example>30</example>
        [DataMember(Name = "callTimeout", EmitDefaultValue = true)]
        public double? CallTimeout { get; set; }

        /// <summary>
        /// This is the timeout (in seconds) to use when delivering webhooks for the call. Can be any numeric value (including decimals) between 1 and 25.
        /// </summary>
        /// <value>This is the timeout (in seconds) to use when delivering webhooks for the call. Can be any numeric value (including decimals) between 1 and 25.</value>
        /// <example>15</example>
        [DataMember(Name = "callbackTimeout", EmitDefaultValue = true)]
        public double? CallbackTimeout { get; set; }

        /// <summary>
        /// Gets or Sets MachineDetection
        /// </summary>
        [DataMember(Name = "machineDetection", EmitDefaultValue = false)]
        public MachineDetectionConfiguration MachineDetection { get; set; }

        /// <summary>
        /// The priority of this call over other calls from your account. For example, if during a call your application needs to place a new call and bridge it with the current call, you might want to create the call with priority 1 so that it will be the next call picked off your queue, ahead of other less time sensitive calls. A lower value means higher priority, so a priority 1 call takes precedence over a priority 2 call.
        /// </summary>
        /// <value>The priority of this call over other calls from your account. For example, if during a call your application needs to place a new call and bridge it with the current call, you might want to create the call with priority 1 so that it will be the next call picked off your queue, ahead of other less time sensitive calls. A lower value means higher priority, so a priority 1 call takes precedence over a priority 2 call.</value>
        /// <example>5</example>
        [DataMember(Name = "priority", EmitDefaultValue = true)]
        public int? Priority { get; set; }

        /// <summary>
        /// A custom string that will be sent with all webhooks for this call unless overwritten by a future &lt;a href&#x3D;&#39;/docs/voice/bxml/tag&#39;&gt;&#x60;&lt;Tag&gt;&#x60;&lt;/a&gt; verb or &#x60;tag&#x60; attribute on another verb, or cleared.  May be cleared by setting &#x60;tag&#x3D;\&quot;\&quot;&#x60;  Max length 256 characters.
        /// </summary>
        /// <value>A custom string that will be sent with all webhooks for this call unless overwritten by a future &lt;a href&#x3D;&#39;/docs/voice/bxml/tag&#39;&gt;&#x60;&lt;Tag&gt;&#x60;&lt;/a&gt; verb or &#x60;tag&#x60; attribute on another verb, or cleared.  May be cleared by setting &#x60;tag&#x3D;\&quot;\&quot;&#x60;  Max length 256 characters.</value>
        /// <example>arbitrary text here</example>
        [DataMember(Name = "tag", EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCall {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Uui: ").Append(Uui).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  AnswerUrl: ").Append(AnswerUrl).Append("\n");
            sb.Append("  AnswerMethod: ").Append(AnswerMethod).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AnswerFallbackUrl: ").Append(AnswerFallbackUrl).Append("\n");
            sb.Append("  AnswerFallbackMethod: ").Append(AnswerFallbackMethod).Append("\n");
            sb.Append("  FallbackUsername: ").Append(FallbackUsername).Append("\n");
            sb.Append("  FallbackPassword: ").Append(FallbackPassword).Append("\n");
            sb.Append("  DisconnectUrl: ").Append(DisconnectUrl).Append("\n");
            sb.Append("  DisconnectMethod: ").Append(DisconnectMethod).Append("\n");
            sb.Append("  CallTimeout: ").Append(CallTimeout).Append("\n");
            sb.Append("  CallbackTimeout: ").Append(CallbackTimeout).Append("\n");
            sb.Append("  MachineDetection: ").Append(MachineDetection).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCall);
        }

        /// <summary>
        /// Returns true if CreateCall instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCall input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Uui == input.Uui ||
                    (this.Uui != null &&
                    this.Uui.Equals(input.Uui))
                ) && 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.AnswerUrl == input.AnswerUrl ||
                    (this.AnswerUrl != null &&
                    this.AnswerUrl.Equals(input.AnswerUrl))
                ) && 
                (
                    this.AnswerMethod == input.AnswerMethod ||
                    this.AnswerMethod.Equals(input.AnswerMethod)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AnswerFallbackUrl == input.AnswerFallbackUrl ||
                    (this.AnswerFallbackUrl != null &&
                    this.AnswerFallbackUrl.Equals(input.AnswerFallbackUrl))
                ) && 
                (
                    this.AnswerFallbackMethod == input.AnswerFallbackMethod ||
                    this.AnswerFallbackMethod.Equals(input.AnswerFallbackMethod)
                ) && 
                (
                    this.FallbackUsername == input.FallbackUsername ||
                    (this.FallbackUsername != null &&
                    this.FallbackUsername.Equals(input.FallbackUsername))
                ) && 
                (
                    this.FallbackPassword == input.FallbackPassword ||
                    (this.FallbackPassword != null &&
                    this.FallbackPassword.Equals(input.FallbackPassword))
                ) && 
                (
                    this.DisconnectUrl == input.DisconnectUrl ||
                    (this.DisconnectUrl != null &&
                    this.DisconnectUrl.Equals(input.DisconnectUrl))
                ) && 
                (
                    this.DisconnectMethod == input.DisconnectMethod ||
                    this.DisconnectMethod.Equals(input.DisconnectMethod)
                ) && 
                (
                    this.CallTimeout == input.CallTimeout ||
                    (this.CallTimeout != null &&
                    this.CallTimeout.Equals(input.CallTimeout))
                ) && 
                (
                    this.CallbackTimeout == input.CallbackTimeout ||
                    (this.CallbackTimeout != null &&
                    this.CallbackTimeout.Equals(input.CallbackTimeout))
                ) && 
                (
                    this.MachineDetection == input.MachineDetection ||
                    (this.MachineDetection != null &&
                    this.MachineDetection.Equals(input.MachineDetection))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Uui != null)
                {
                    hashCode = (hashCode * 59) + this.Uui.GetHashCode();
                }
                if (this.ApplicationId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                }
                if (this.AnswerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AnswerUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnswerMethod.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.AnswerFallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AnswerFallbackUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AnswerFallbackMethod.GetHashCode();
                if (this.FallbackUsername != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackUsername.GetHashCode();
                }
                if (this.FallbackPassword != null)
                {
                    hashCode = (hashCode * 59) + this.FallbackPassword.GetHashCode();
                }
                if (this.DisconnectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DisconnectUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DisconnectMethod.GetHashCode();
                if (this.CallTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.CallTimeout.GetHashCode();
                }
                if (this.CallbackTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackTimeout.GetHashCode();
                }
                if (this.MachineDetection != null)
                {
                    hashCode = (hashCode * 59) + this.MachineDetection.GetHashCode();
                }
                if (this.Priority != null)
                {
                    hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                }
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 256.", new [] { "DisplayName" });
            }

            // AnswerUrl (string) maxLength
            if (this.AnswerUrl != null && this.AnswerUrl.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnswerUrl, length must be less than 2048.", new [] { "AnswerUrl" });
            }

            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 1024.", new [] { "Username" });
            }

            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 1024.", new [] { "Password" });
            }

            // AnswerFallbackUrl (string) maxLength
            if (this.AnswerFallbackUrl != null && this.AnswerFallbackUrl.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnswerFallbackUrl, length must be less than 2048.", new [] { "AnswerFallbackUrl" });
            }

            // FallbackUsername (string) maxLength
            if (this.FallbackUsername != null && this.FallbackUsername.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FallbackUsername, length must be less than 1024.", new [] { "FallbackUsername" });
            }

            // FallbackPassword (string) maxLength
            if (this.FallbackPassword != null && this.FallbackPassword.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FallbackPassword, length must be less than 1024.", new [] { "FallbackPassword" });
            }

            // DisconnectUrl (string) maxLength
            if (this.DisconnectUrl != null && this.DisconnectUrl.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisconnectUrl, length must be less than 2048.", new [] { "DisconnectUrl" });
            }

            // CallTimeout (double?) maximum
            if (this.CallTimeout > (double?)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallTimeout, must be a value less than or equal to 300.", new [] { "CallTimeout" });
            }

            // CallTimeout (double?) minimum
            if (this.CallTimeout < (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallTimeout, must be a value greater than or equal to 1.", new [] { "CallTimeout" });
            }

            // CallbackTimeout (double?) maximum
            if (this.CallbackTimeout > (double?)25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallbackTimeout, must be a value less than or equal to 25.", new [] { "CallbackTimeout" });
            }

            // CallbackTimeout (double?) minimum
            if (this.CallbackTimeout < (double?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallbackTimeout, must be a value greater than or equal to 1.", new [] { "CallbackTimeout" });
            }

            // Priority (int?) maximum
            if (this.Priority > (int?)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value less than or equal to 5.", new [] { "Priority" });
            }

            // Priority (int?) minimum
            if (this.Priority < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value greater than or equal to 1.", new [] { "Priority" });
            }

            // Tag (string) maxLength
            if (this.Tag != null && this.Tag.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tag, length must be less than 256.", new [] { "Tag" });
            }

            yield break;
        }
    }

}
