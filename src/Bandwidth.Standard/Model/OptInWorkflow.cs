/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// OptInWorkflow
    /// </summary>
    [DataContract(Name = "optInWorkflow")]
    public partial class OptInWorkflow : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptInWorkflow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OptInWorkflow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptInWorkflow" /> class.
        /// </summary>
        /// <param name="description">description (required).</param>
        /// <param name="imageUrls">imageUrls (required).</param>
        /// <param name="confirmationResponse">confirmationResponse.</param>
        public OptInWorkflow(string description = default(string), List<string> imageUrls = default(List<string>), string confirmationResponse = default(string))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for OptInWorkflow and cannot be null");
            }
            this.Description = description;
            // to ensure "imageUrls" is required (not null)
            if (imageUrls == null)
            {
                throw new ArgumentNullException("imageUrls is a required property for OptInWorkflow and cannot be null");
            }
            this.ImageUrls = imageUrls;
            this.ConfirmationResponse = confirmationResponse;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <example>Opt In Flow</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrls
        /// </summary>
        [DataMember(Name = "imageUrls", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ImageUrls { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmationResponse
        /// </summary>
        /// <example>Thank you for opting in!</example>
        [DataMember(Name = "confirmationResponse", EmitDefaultValue = true)]
        public string ConfirmationResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptInWorkflow {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ImageUrls: ").Append(ImageUrls).Append("\n");
            sb.Append("  ConfirmationResponse: ").Append(ConfirmationResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 500.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // ConfirmationResponse (string) maxLength
            if (this.ConfirmationResponse != null && this.ConfirmationResponse.Length > 500)
            {
                yield return new ValidationResult("Invalid value for ConfirmationResponse, length must be less than 500.", new [] { "ConfirmationResponse" });
            }

            // ConfirmationResponse (string) minLength
            if (this.ConfirmationResponse != null && this.ConfirmationResponse.Length < 0)
            {
                yield return new ValidationResult("Invalid value for ConfirmationResponse, length must be greater than 0.", new [] { "ConfirmationResponse" });
            }

            yield break;
        }
    }

}
