/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Diversion
    /// </summary>
    [DataContract(Name = "diversion")]
    public partial class Diversion : IEquatable<Diversion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Diversion" /> class.
        /// </summary>
        /// <param name="reason">The reason for the diversion. Common values: unknown, user-busy, no-answer, unavailable, unconditional, time-of-day, do-not-disturb, deflection, follow-me, out-of-service, away..</param>
        /// <param name="privacy">off or full.</param>
        /// <param name="screen">No if the number was provided by the user, yes if the number was provided by the network.</param>
        /// <param name="counter">The number of diversions that have occurred.</param>
        /// <param name="limit">The maximum number of diversions allowed for this session.</param>
        /// <param name="unknown">The normal list of values is not exhaustive. Your application must be tolerant of unlisted keys and unlisted values of those keys..</param>
        /// <param name="origTo">Always present. Indicates the last telephone number that the call was diverted from..</param>
        public Diversion(string reason = default(string), string privacy = default(string), string screen = default(string), string counter = default(string), string limit = default(string), string unknown = default(string), string origTo = default(string))
        {
            this.Reason = reason;
            this.Privacy = privacy;
            this.Screen = screen;
            this.Counter = counter;
            this.Limit = limit;
            this.Unknown = unknown;
            this.OrigTo = origTo;
        }

        /// <summary>
        /// The reason for the diversion. Common values: unknown, user-busy, no-answer, unavailable, unconditional, time-of-day, do-not-disturb, deflection, follow-me, out-of-service, away.
        /// </summary>
        /// <value>The reason for the diversion. Common values: unknown, user-busy, no-answer, unavailable, unconditional, time-of-day, do-not-disturb, deflection, follow-me, out-of-service, away.</value>
        /// <example>unavailable</example>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// off or full
        /// </summary>
        /// <value>off or full</value>
        /// <example>off</example>
        [DataMember(Name = "privacy", EmitDefaultValue = false)]
        public string Privacy { get; set; }

        /// <summary>
        /// No if the number was provided by the user, yes if the number was provided by the network
        /// </summary>
        /// <value>No if the number was provided by the user, yes if the number was provided by the network</value>
        /// <example>no</example>
        [DataMember(Name = "screen", EmitDefaultValue = false)]
        public string Screen { get; set; }

        /// <summary>
        /// The number of diversions that have occurred
        /// </summary>
        /// <value>The number of diversions that have occurred</value>
        /// <example>2</example>
        [DataMember(Name = "counter", EmitDefaultValue = false)]
        public string Counter { get; set; }

        /// <summary>
        /// The maximum number of diversions allowed for this session
        /// </summary>
        /// <value>The maximum number of diversions allowed for this session</value>
        /// <example>3</example>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public string Limit { get; set; }

        /// <summary>
        /// The normal list of values is not exhaustive. Your application must be tolerant of unlisted keys and unlisted values of those keys.
        /// </summary>
        /// <value>The normal list of values is not exhaustive. Your application must be tolerant of unlisted keys and unlisted values of those keys.</value>
        /// <example>unknownValue</example>
        [DataMember(Name = "unknown", EmitDefaultValue = false)]
        public string Unknown { get; set; }

        /// <summary>
        /// Always present. Indicates the last telephone number that the call was diverted from.
        /// </summary>
        /// <value>Always present. Indicates the last telephone number that the call was diverted from.</value>
        /// <example>+15558884444</example>
        [DataMember(Name = "origTo", EmitDefaultValue = false)]
        public string OrigTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Diversion {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  Counter: ").Append(Counter).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Unknown: ").Append(Unknown).Append("\n");
            sb.Append("  OrigTo: ").Append(OrigTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Diversion);
        }

        /// <summary>
        /// Returns true if Diversion instances are equal
        /// </summary>
        /// <param name="input">Instance of Diversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Diversion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Privacy == input.Privacy ||
                    (this.Privacy != null &&
                    this.Privacy.Equals(input.Privacy))
                ) && 
                (
                    this.Screen == input.Screen ||
                    (this.Screen != null &&
                    this.Screen.Equals(input.Screen))
                ) && 
                (
                    this.Counter == input.Counter ||
                    (this.Counter != null &&
                    this.Counter.Equals(input.Counter))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Unknown == input.Unknown ||
                    (this.Unknown != null &&
                    this.Unknown.Equals(input.Unknown))
                ) && 
                (
                    this.OrigTo == input.OrigTo ||
                    (this.OrigTo != null &&
                    this.OrigTo.Equals(input.OrigTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.Privacy != null)
                {
                    hashCode = (hashCode * 59) + this.Privacy.GetHashCode();
                }
                if (this.Screen != null)
                {
                    hashCode = (hashCode * 59) + this.Screen.GetHashCode();
                }
                if (this.Counter != null)
                {
                    hashCode = (hashCode * 59) + this.Counter.GetHashCode();
                }
                if (this.Limit != null)
                {
                    hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                }
                if (this.Unknown != null)
                {
                    hashCode = (hashCode * 59) + this.Unknown.GetHashCode();
                }
                if (this.OrigTo != null)
                {
                    hashCode = (hashCode * 59) + this.OrigTo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
