/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// ParticipantSubscription
    /// </summary>
    [DataContract(Name = "participantSubscription")]
    public partial class ParticipantSubscription : IEquatable<ParticipantSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticipantSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParticipantSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParticipantSubscription" /> class.
        /// </summary>
        /// <param name="participantId">The Participant the subscriber will be subscribed to (required).</param>
        /// <param name="streamAliases">(optional) An array of specific streamAliases owned by the Participant that the subscriber will be subscribed to. Background: A streamAlias is created by a WebRTC client when it connects and declares a name for the related stream. The client is responsible for informing the application of any created streamAliases to enable the application to subscribe to specific streamAliases. Subscribing to a &#x60;streamAlias&#x60; that does not exist is undefined. If the array is empty all aliases are assumed..</param>
        public ParticipantSubscription(string participantId = default(string), List<string> streamAliases = default(List<string>))
        {
            // to ensure "participantId" is required (not null)
            if (participantId == null)
            {
                throw new ArgumentNullException("participantId is a required property for ParticipantSubscription and cannot be null");
            }
            this.ParticipantId = participantId;
            this.StreamAliases = streamAliases;
        }

        /// <summary>
        /// The Participant the subscriber will be subscribed to
        /// </summary>
        /// <value>The Participant the subscriber will be subscribed to</value>
        [DataMember(Name = "participantId", IsRequired = true, EmitDefaultValue = true)]
        public string ParticipantId { get; set; }

        /// <summary>
        /// (optional) An array of specific streamAliases owned by the Participant that the subscriber will be subscribed to. Background: A streamAlias is created by a WebRTC client when it connects and declares a name for the related stream. The client is responsible for informing the application of any created streamAliases to enable the application to subscribe to specific streamAliases. Subscribing to a &#x60;streamAlias&#x60; that does not exist is undefined. If the array is empty all aliases are assumed.
        /// </summary>
        /// <value>(optional) An array of specific streamAliases owned by the Participant that the subscriber will be subscribed to. Background: A streamAlias is created by a WebRTC client when it connects and declares a name for the related stream. The client is responsible for informing the application of any created streamAliases to enable the application to subscribe to specific streamAliases. Subscribing to a &#x60;streamAlias&#x60; that does not exist is undefined. If the array is empty all aliases are assumed.</value>
        [DataMember(Name = "streamAliases", EmitDefaultValue = false)]
        public List<string> StreamAliases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParticipantSubscription {\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  StreamAliases: ").Append(StreamAliases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParticipantSubscription);
        }

        /// <summary>
        /// Returns true if ParticipantSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of ParticipantSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParticipantSubscription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ParticipantId == input.ParticipantId ||
                    (this.ParticipantId != null &&
                    this.ParticipantId.Equals(input.ParticipantId))
                ) && 
                (
                    this.StreamAliases == input.StreamAliases ||
                    this.StreamAliases != null &&
                    input.StreamAliases != null &&
                    this.StreamAliases.SequenceEqual(input.StreamAliases)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParticipantId != null)
                {
                    hashCode = (hashCode * 59) + this.ParticipantId.GetHashCode();
                }
                if (this.StreamAliases != null)
                {
                    hashCode = (hashCode * 59) + this.StreamAliases.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
