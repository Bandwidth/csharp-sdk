/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// CallTranscription
    /// </summary>
    [DataContract(Name = "callTranscription")]
    public partial class CallTranscription : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DetectedLanguage
        /// </summary>
        [DataMember(Name = "detectedLanguage", EmitDefaultValue = false)]
        public CallTranscriptionDetectedLanguageEnum? DetectedLanguage { get; set; }

        /// <summary>
        /// Gets or Sets Track
        /// </summary>
        [DataMember(Name = "track", EmitDefaultValue = false)]
        public CallTranscriptionTrackEnum? Track { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallTranscription" /> class.
        /// </summary>
        /// <param name="detectedLanguage">detectedLanguage.</param>
        /// <param name="track">track.</param>
        /// <param name="transcript">The transcription itself..</param>
        /// <param name="confidence">How confident the transcription engine was in transcribing the associated audio (from &#x60;0&#x60; to &#x60;1&#x60;)..</param>
        public CallTranscription(CallTranscriptionDetectedLanguageEnum? detectedLanguage = default(CallTranscriptionDetectedLanguageEnum?), CallTranscriptionTrackEnum? track = default(CallTranscriptionTrackEnum?), string transcript = default(string), double confidence = default(double))
        {
            this.DetectedLanguage = detectedLanguage;
            this.Track = track;
            this.Transcript = transcript;
            this.Confidence = confidence;
        }

        /// <summary>
        /// The transcription itself.
        /// </summary>
        /// <value>The transcription itself.</value>
        /// <example>Hello World! This is an example.</example>
        [DataMember(Name = "transcript", EmitDefaultValue = false)]
        public string Transcript { get; set; }

        /// <summary>
        /// How confident the transcription engine was in transcribing the associated audio (from &#x60;0&#x60; to &#x60;1&#x60;).
        /// </summary>
        /// <value>How confident the transcription engine was in transcribing the associated audio (from &#x60;0&#x60; to &#x60;1&#x60;).</value>
        /// <example>0.9</example>
        [DataMember(Name = "confidence", EmitDefaultValue = false)]
        public double Confidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallTranscription {\n");
            sb.Append("  DetectedLanguage: ").Append(DetectedLanguage).Append("\n");
            sb.Append("  Track: ").Append(Track).Append("\n");
            sb.Append("  Transcript: ").Append(Transcript).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Confidence (double) maximum
            if (this.Confidence > (double)1)
            {
                yield return new ValidationResult("Invalid value for Confidence, must be a value less than or equal to 1.", new [] { "Confidence" });
            }

            // Confidence (double) minimum
            if (this.Confidence < (double)0)
            {
                yield return new ValidationResult("Invalid value for Confidence, must be a value greater than or equal to 0.", new [] { "Confidence" });
            }

            yield break;
        }
    }

}
