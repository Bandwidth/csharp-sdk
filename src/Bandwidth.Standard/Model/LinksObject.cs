/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// LinksObject
    /// </summary>
    [DataContract(Name = "linksObject")]
    public partial class LinksObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinksObject" /> class.
        /// </summary>
        /// <param name="first">The first (or only) page of results matching the query..</param>
        /// <param name="next">If more results exist than specified by &#39;size&#39;, this link returns the next page of &#39;size&#39; results..</param>
        /// <param name="previous">If the results are more than one page, this link returns the previous page of &#39;size&#39; results..</param>
        /// <param name="last">If more results exist than specified by &#39;size&#39;, this link return the last page of result..</param>
        public LinksObject(string first = default(string), string next = default(string), string previous = default(string), string last = default(string))
        {
            this.First = first;
            this.Next = next;
            this.Previous = previous;
            this.Last = last;
        }

        /// <summary>
        /// The first (or only) page of results matching the query.
        /// </summary>
        /// <value>The first (or only) page of results matching the query.</value>
        [DataMember(Name = "first", EmitDefaultValue = false)]
        public string First { get; set; }

        /// <summary>
        /// If more results exist than specified by &#39;size&#39;, this link returns the next page of &#39;size&#39; results.
        /// </summary>
        /// <value>If more results exist than specified by &#39;size&#39;, this link returns the next page of &#39;size&#39; results.</value>
        [DataMember(Name = "next", EmitDefaultValue = false)]
        public string Next { get; set; }

        /// <summary>
        /// If the results are more than one page, this link returns the previous page of &#39;size&#39; results.
        /// </summary>
        /// <value>If the results are more than one page, this link returns the previous page of &#39;size&#39; results.</value>
        [DataMember(Name = "previous", EmitDefaultValue = false)]
        public string Previous { get; set; }

        /// <summary>
        /// If more results exist than specified by &#39;size&#39;, this link return the last page of result.
        /// </summary>
        /// <value>If more results exist than specified by &#39;size&#39;, this link return the last page of result.</value>
        [DataMember(Name = "last", EmitDefaultValue = false)]
        public string Last { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinksObject {\n");
            sb.Append("  First: ").Append(First).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Last: ").Append(Last).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
