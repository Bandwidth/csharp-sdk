/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// TranscribeRecording
    /// </summary>
    [DataContract(Name = "transcribeRecording")]
    public partial class TranscribeRecording : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CallbackMethod
        /// </summary>
        [DataMember(Name = "callbackMethod", EmitDefaultValue = true)]
        public CallbackMethodEnum? CallbackMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranscribeRecording" /> class.
        /// </summary>
        /// <param name="callbackUrl">The URL to send the [TranscriptionAvailable](/docs/voice/webhooks/transcriptionAvailable) event to. You should not include sensitive or personally-identifiable information in the callbackUrl field! Always use the proper username and password fields for authorization..</param>
        /// <param name="callbackMethod">callbackMethod.</param>
        /// <param name="username">Basic auth username..</param>
        /// <param name="password">Basic auth password..</param>
        /// <param name="tag">(optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present..</param>
        /// <param name="callbackTimeout">This is the timeout (in seconds) to use when delivering the webhook to &#x60;callbackUrl&#x60;. Can be any numeric value (including decimals) between 1 and 25. (default to 15D).</param>
        /// <param name="detectLanguage">A boolean value to indicate that the recording may not be in English, and the transcription service will need to detect the dominant language the recording is in and transcribe accordingly. Current supported languages are English, French, and Spanish. (default to false).</param>
        public TranscribeRecording(string callbackUrl = default(string), CallbackMethodEnum? callbackMethod = default(CallbackMethodEnum?), string username = default(string), string password = default(string), string tag = default(string), double? callbackTimeout = 15D, bool? detectLanguage = false)
        {
            this.CallbackUrl = callbackUrl;
            this.CallbackMethod = callbackMethod;
            this.Username = username;
            this.Password = password;
            this.Tag = tag;
            // use default value if no "callbackTimeout" provided
            this.CallbackTimeout = callbackTimeout ?? 15D;
            // use default value if no "detectLanguage" provided
            this.DetectLanguage = detectLanguage ?? false;
        }

        /// <summary>
        /// The URL to send the [TranscriptionAvailable](/docs/voice/webhooks/transcriptionAvailable) event to. You should not include sensitive or personally-identifiable information in the callbackUrl field! Always use the proper username and password fields for authorization.
        /// </summary>
        /// <value>The URL to send the [TranscriptionAvailable](/docs/voice/webhooks/transcriptionAvailable) event to. You should not include sensitive or personally-identifiable information in the callbackUrl field! Always use the proper username and password fields for authorization.</value>
        /// <example>https://myServer.example/bandwidth/webhooks/transcriptionAvailable</example>
        [DataMember(Name = "callbackUrl", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        /// <value>Basic auth username.</value>
        /// <example>mySecretUsername</example>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        /// <value>Basic auth password.</value>
        /// <example>mySecretPassword1!</example>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// (optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present.
        /// </summary>
        /// <value>(optional) The tag specified on call creation. If no tag was specified or it was previously cleared, this field will not be present.</value>
        /// <example>exampleTag</example>
        [DataMember(Name = "tag", EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// This is the timeout (in seconds) to use when delivering the webhook to &#x60;callbackUrl&#x60;. Can be any numeric value (including decimals) between 1 and 25.
        /// </summary>
        /// <value>This is the timeout (in seconds) to use when delivering the webhook to &#x60;callbackUrl&#x60;. Can be any numeric value (including decimals) between 1 and 25.</value>
        /// <example>5.5</example>
        [DataMember(Name = "callbackTimeout", EmitDefaultValue = true)]
        public double? CallbackTimeout { get; set; }

        /// <summary>
        /// A boolean value to indicate that the recording may not be in English, and the transcription service will need to detect the dominant language the recording is in and transcribe accordingly. Current supported languages are English, French, and Spanish.
        /// </summary>
        /// <value>A boolean value to indicate that the recording may not be in English, and the transcription service will need to detect the dominant language the recording is in and transcribe accordingly. Current supported languages are English, French, and Spanish.</value>
        /// <example>true</example>
        [DataMember(Name = "detectLanguage", EmitDefaultValue = true)]
        public bool? DetectLanguage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranscribeRecording {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CallbackMethod: ").Append(CallbackMethod).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  CallbackTimeout: ").Append(CallbackTimeout).Append("\n");
            sb.Append("  DetectLanguage: ").Append(DetectLanguage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Username (string) maxLength
            if (this.Username != null && this.Username.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Username, length must be less than 1024.", new [] { "Username" });
            }

            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Password, length must be less than 1024.", new [] { "Password" });
            }

            // CallbackTimeout (double?) maximum
            if (this.CallbackTimeout > (double?)25)
            {
                yield return new ValidationResult("Invalid value for CallbackTimeout, must be a value less than or equal to 25.", new [] { "CallbackTimeout" });
            }

            // CallbackTimeout (double?) minimum
            if (this.CallbackTimeout < (double?)1)
            {
                yield return new ValidationResult("Invalid value for CallbackTimeout, must be a value greater than or equal to 1.", new [] { "CallbackTimeout" });
            }

            yield break;
        }
    }

}
