/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// DeferredResult
    /// </summary>
    [DataContract]
    public partial class DeferredResult :  IEquatable<DeferredResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeferredResult" /> class.
        /// </summary>
        /// <param name="result">result.</param>
        /// <param name="setOrExpired">setOrExpired.</param>
        public DeferredResult(Object result = default(Object), bool setOrExpired = default(bool))
        {
            this.Result = result;
            this.SetOrExpired = setOrExpired;
        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Object Result { get; set; }

        /// <summary>
        /// Gets or Sets SetOrExpired
        /// </summary>
        [DataMember(Name="setOrExpired", EmitDefaultValue=false)]
        public bool SetOrExpired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeferredResult {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  SetOrExpired: ").Append(SetOrExpired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeferredResult);
        }

        /// <summary>
        /// Returns true if DeferredResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DeferredResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeferredResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.SetOrExpired == input.SetOrExpired ||
                    (this.SetOrExpired != null &&
                    this.SetOrExpired.Equals(input.SetOrExpired))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.SetOrExpired != null)
                    hashCode = hashCode * 59 + this.SetOrExpired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
