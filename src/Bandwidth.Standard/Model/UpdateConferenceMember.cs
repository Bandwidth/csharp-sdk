/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// UpdateConferenceMember
    /// </summary>
    [DataContract(Name = "updateConferenceMember")]
    public partial class UpdateConferenceMember : IEquatable<UpdateConferenceMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateConferenceMember" /> class.
        /// </summary>
        /// <param name="mute">Whether or not this member is currently muted. Members who are muted are still able to hear other participants.  Updates this member&#39;s mute status. Has no effect if omitted..</param>
        /// <param name="hold">Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.  Updates this member&#39;s hold status. Has no effect if omitted..</param>
        /// <param name="callIdsToCoach">If this member had a value set for &#x60;callIdsToCoach&#x60; in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.  Modifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching.  Note that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join..</param>
        public UpdateConferenceMember(bool mute = default(bool), bool hold = default(bool), List<string> callIdsToCoach = default(List<string>))
        {
            this.Mute = mute;
            this.Hold = hold;
            this.CallIdsToCoach = callIdsToCoach;
        }

        /// <summary>
        /// Whether or not this member is currently muted. Members who are muted are still able to hear other participants.  Updates this member&#39;s mute status. Has no effect if omitted.
        /// </summary>
        /// <value>Whether or not this member is currently muted. Members who are muted are still able to hear other participants.  Updates this member&#39;s mute status. Has no effect if omitted.</value>
        /// <example>false</example>
        [DataMember(Name = "mute", EmitDefaultValue = true)]
        public bool Mute { get; set; }

        /// <summary>
        /// Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.  Updates this member&#39;s hold status. Has no effect if omitted.
        /// </summary>
        /// <value>Whether or not this member is currently on hold. Members who are on hold are not able to hear or speak in the conference.  Updates this member&#39;s hold status. Has no effect if omitted.</value>
        /// <example>false</example>
        [DataMember(Name = "hold", EmitDefaultValue = true)]
        public bool Hold { get; set; }

        /// <summary>
        /// If this member had a value set for &#x60;callIdsToCoach&#x60; in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.  Modifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching.  Note that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join.
        /// </summary>
        /// <value>If this member had a value set for &#x60;callIdsToCoach&#x60; in its [Conference](/docs/voice/bxml/conference) verb or this list was added with a previous PUT request to modify the member, this is that list of calls.  Modifies the calls that this member is coaching. Has no effect if omitted. See the documentation for the [Conference](/docs/voice/bxml/conference) verb for more details about coaching.  Note that this will not add the matching calls to the conference; each call must individually execute a Conference verb to join.</value>
        /// <example>[&quot;c-25ac29a2-1331029c-2cb0-4a07-b215-b22865662d85&quot;]</example>
        [DataMember(Name = "callIdsToCoach", EmitDefaultValue = true)]
        public List<string> CallIdsToCoach { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateConferenceMember {\n");
            sb.Append("  Mute: ").Append(Mute).Append("\n");
            sb.Append("  Hold: ").Append(Hold).Append("\n");
            sb.Append("  CallIdsToCoach: ").Append(CallIdsToCoach).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateConferenceMember);
        }

        /// <summary>
        /// Returns true if UpdateConferenceMember instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateConferenceMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateConferenceMember input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Mute == input.Mute ||
                    this.Mute.Equals(input.Mute)
                ) && 
                (
                    this.Hold == input.Hold ||
                    this.Hold.Equals(input.Hold)
                ) && 
                (
                    this.CallIdsToCoach == input.CallIdsToCoach ||
                    this.CallIdsToCoach != null &&
                    input.CallIdsToCoach != null &&
                    this.CallIdsToCoach.SequenceEqual(input.CallIdsToCoach)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Mute.GetHashCode();
                hashCode = (hashCode * 59) + this.Hold.GetHashCode();
                if (this.CallIdsToCoach != null)
                {
                    hashCode = (hashCode * 59) + this.CallIdsToCoach.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
