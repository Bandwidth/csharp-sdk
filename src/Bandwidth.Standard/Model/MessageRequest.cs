/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// MessageRequest
    /// </summary>
    [DataContract(Name = "messageRequest")]
    public partial class MessageRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageRequest" /> class.
        /// </summary>
        /// <param name="applicationId">The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard. (required).</param>
        /// <param name="to">The phone number(s) the message should be sent to in E164 format. (required).</param>
        /// <param name="from">Either an alphanumeric sender ID or the sender&#39;s Bandwidth phone number in E.164 format, which must be hosted within Bandwidth and linked to the account that is generating the message.  Alphanumeric Sender IDs can contain up to 11 characters, upper-case letters A-Z, lower-case letters a-z, numbers 0-9, space, hyphen -, plus +, underscore _ and ampersand &amp;. Alphanumeric Sender IDs must contain at least one letter. (required).</param>
        /// <param name="text">The contents of the text message. Must be 2048 characters or less..</param>
        /// <param name="media">A list of URLs to include as media attachments as part of the message. Each URL can be at most 4096 characters..</param>
        /// <param name="tag">A custom string that will be included in callback events of the message. Max 1024 characters..</param>
        /// <param name="priority">priority.</param>
        /// <param name="expiration">A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future. Not supported on MMS..</param>
        public MessageRequest(string applicationId = default(string), List<string> to = default(List<string>), string from = default(string), string text = default(string), List<string> media = default(List<string>), string tag = default(string), PriorityEnum? priority = default(PriorityEnum?), DateTime expiration = default(DateTime))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for MessageRequest and cannot be null");
            }
            this.ApplicationId = applicationId;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for MessageRequest and cannot be null");
            }
            this.To = to;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for MessageRequest and cannot be null");
            }
            this.From = from;
            this.Text = text;
            this.Media = media;
            this.Tag = tag;
            this.Priority = priority;
            this.Expiration = expiration;
        }

        /// <summary>
        /// The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard.
        /// </summary>
        /// <value>The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard.</value>
        /// <example>93de2206-9669-4e07-948d-329f4b722ee2</example>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// The phone number(s) the message should be sent to in E164 format.
        /// </summary>
        /// <value>The phone number(s) the message should be sent to in E164 format.</value>
        /// <example>[&quot;+15554443333&quot;,&quot;+15552223333&quot;]</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// Either an alphanumeric sender ID or the sender&#39;s Bandwidth phone number in E.164 format, which must be hosted within Bandwidth and linked to the account that is generating the message.  Alphanumeric Sender IDs can contain up to 11 characters, upper-case letters A-Z, lower-case letters a-z, numbers 0-9, space, hyphen -, plus +, underscore _ and ampersand &amp;. Alphanumeric Sender IDs must contain at least one letter.
        /// </summary>
        /// <value>Either an alphanumeric sender ID or the sender&#39;s Bandwidth phone number in E.164 format, which must be hosted within Bandwidth and linked to the account that is generating the message.  Alphanumeric Sender IDs can contain up to 11 characters, upper-case letters A-Z, lower-case letters a-z, numbers 0-9, space, hyphen -, plus +, underscore _ and ampersand &amp;. Alphanumeric Sender IDs must contain at least one letter.</value>
        /// <example>+15551113333</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The contents of the text message. Must be 2048 characters or less.
        /// </summary>
        /// <value>The contents of the text message. Must be 2048 characters or less.</value>
        /// <example>Hello world</example>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// A list of URLs to include as media attachments as part of the message. Each URL can be at most 4096 characters.
        /// </summary>
        /// <value>A list of URLs to include as media attachments as part of the message. Each URL can be at most 4096 characters.</value>
        /// <example>[&quot;https://dev.bandwidth.com/images/bandwidth-logo.png&quot;,&quot;https://dev.bandwidth.com/images/github_logo.png&quot;]</example>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<string> Media { get; set; }

        /// <summary>
        /// A custom string that will be included in callback events of the message. Max 1024 characters.
        /// </summary>
        /// <value>A custom string that will be included in callback events of the message. Max 1024 characters.</value>
        /// <example>custom string</example>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future. Not supported on MMS.
        /// </summary>
        /// <value>A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future. Not supported on MMS.</value>
        /// <example>2021-02-01T11:29:18-05:00</example>
        [DataMember(Name = "expiration", EmitDefaultValue = false)]
        public DateTime Expiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if (this.Text != null && this.Text.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Text, length must be less than 2048.", new [] { "Text" });
            }

            yield break;
        }
    }

}
