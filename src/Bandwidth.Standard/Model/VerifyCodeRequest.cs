/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// VerifyCodeRequest
    /// </summary>
    [DataContract(Name = "verifyCodeRequest")]
    public partial class VerifyCodeRequest : IEquatable<VerifyCodeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyCodeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyCodeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyCodeRequest" /> class.
        /// </summary>
        /// <param name="to">The phone number to send the mfa code to. (required).</param>
        /// <param name="scope">An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \&quot;2FA\&quot;..</param>
        /// <param name="expirationTimeInMinutes">The time period, in minutes, to validate the mfa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively. (required).</param>
        /// <param name="code">The generated mfa code to check if valid. (required).</param>
        public VerifyCodeRequest(string to = default(string), string scope = default(string), decimal expirationTimeInMinutes = default(decimal), string code = default(string))
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for VerifyCodeRequest and cannot be null");
            }
            this.To = to;
            this.ExpirationTimeInMinutes = expirationTimeInMinutes;
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for VerifyCodeRequest and cannot be null");
            }
            this.Code = code;
            this.Scope = scope;
        }

        /// <summary>
        /// The phone number to send the mfa code to.
        /// </summary>
        /// <value>The phone number to send the mfa code to.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \&quot;2FA\&quot;.
        /// </summary>
        /// <value>An optional field to denote what scope or action the mfa code is addressing.  If not supplied, defaults to \&quot;2FA\&quot;.</value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// The time period, in minutes, to validate the mfa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.
        /// </summary>
        /// <value>The time period, in minutes, to validate the mfa code.  By setting this to 3 minutes, it will mean any code generated within the last 3 minutes are still valid.  The valid range for expiration time is between 0 and 15 minutes, exclusively and inclusively, respectively.</value>
        [DataMember(Name = "expirationTimeInMinutes", IsRequired = true, EmitDefaultValue = true)]
        public decimal ExpirationTimeInMinutes { get; set; }

        /// <summary>
        /// The generated mfa code to check if valid.
        /// </summary>
        /// <value>The generated mfa code to check if valid.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyCodeRequest {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ExpirationTimeInMinutes: ").Append(ExpirationTimeInMinutes).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyCodeRequest);
        }

        /// <summary>
        /// Returns true if VerifyCodeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyCodeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyCodeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ExpirationTimeInMinutes == input.ExpirationTimeInMinutes ||
                    this.ExpirationTimeInMinutes.Equals(input.ExpirationTimeInMinutes)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpirationTimeInMinutes.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // To (string) pattern
            Regex regexTo = new Regex(@"^\\+[1-9]\\d{1,14}$", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }

            // ExpirationTimeInMinutes (decimal) maximum
            if (this.ExpirationTimeInMinutes > (decimal)15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationTimeInMinutes, must be a value less than or equal to 15.", new [] { "ExpirationTimeInMinutes" });
            }

            // ExpirationTimeInMinutes (decimal) minimum
            if (this.ExpirationTimeInMinutes < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExpirationTimeInMinutes, must be a value greater than or equal to 1.", new [] { "ExpirationTimeInMinutes" });
            }

            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 8.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 4.", new [] { "Code" });
            }

            yield break;
        }
    }

}
