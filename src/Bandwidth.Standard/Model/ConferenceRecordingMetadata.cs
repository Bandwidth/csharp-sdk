/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// ConferenceRecordingMetadata
    /// </summary>
    [DataContract(Name = "conferenceRecordingMetadata")]
    public partial class ConferenceRecordingMetadata : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FileFormat
        /// </summary>
        [DataMember(Name = "fileFormat", EmitDefaultValue = false)]
        public FileFormatEnum? FileFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConferenceRecordingMetadata" /> class.
        /// </summary>
        /// <param name="accountId">The user account associated with the call..</param>
        /// <param name="conferenceId">The unique, Bandwidth-generated ID of the conference that was recorded.</param>
        /// <param name="name">The user-specified name of the conference that was recorded.</param>
        /// <param name="recordingId">The unique ID of this recording.</param>
        /// <param name="duration">The duration of the recording in ISO-8601 format.</param>
        /// <param name="channels">Always &#x60;1&#x60; for conference recordings; multi-channel recordings are not supported on conferences..</param>
        /// <param name="startTime">Time the call was started, in ISO 8601 format..</param>
        /// <param name="endTime">The time that the recording ended in ISO-8601 format.</param>
        /// <param name="fileFormat">fileFormat.</param>
        /// <param name="status">The current status of the process. For recording, current possible values are &#39;processing&#39;, &#39;partial&#39;, &#39;complete&#39;, &#39;deleted&#39;, and &#39;error&#39;. For transcriptions, current possible values are &#39;none&#39;, &#39;processing&#39;, &#39;available&#39;, &#39;error&#39;, &#39;timeout&#39;, &#39;file-size-too-big&#39;, and &#39;file-size-too-small&#39;. Additional states may be added in the future, so your application must be tolerant of unknown values..</param>
        /// <param name="mediaUrl">The URL that can be used to download the recording. Only present if the recording is finished and may be downloaded..</param>
        /// <param name="recordingName">A name to identify this recording..</param>
        public ConferenceRecordingMetadata(string accountId = default(string), string conferenceId = default(string), string name = default(string), string recordingId = default(string), string duration = default(string), int channels = default(int), DateTime startTime = default(DateTime), DateTime endTime = default(DateTime), FileFormatEnum? fileFormat = default(FileFormatEnum?), string status = default(string), string mediaUrl = default(string), string recordingName = default(string))
        {
            this.AccountId = accountId;
            this.ConferenceId = conferenceId;
            this.Name = name;
            this.RecordingId = recordingId;
            this.Duration = duration;
            this.Channels = channels;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.FileFormat = fileFormat;
            this.Status = status;
            this.MediaUrl = mediaUrl;
            this.RecordingName = recordingName;
        }

        /// <summary>
        /// The user account associated with the call.
        /// </summary>
        /// <value>The user account associated with the call.</value>
        /// <example>9900000</example>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The unique, Bandwidth-generated ID of the conference that was recorded
        /// </summary>
        /// <value>The unique, Bandwidth-generated ID of the conference that was recorded</value>
        /// <example>conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9</example>
        [DataMember(Name = "conferenceId", EmitDefaultValue = false)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// The user-specified name of the conference that was recorded
        /// </summary>
        /// <value>The user-specified name of the conference that was recorded</value>
        /// <example>my-conference-name</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique ID of this recording
        /// </summary>
        /// <value>The unique ID of this recording</value>
        /// <example>r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833</example>
        [DataMember(Name = "recordingId", EmitDefaultValue = false)]
        public string RecordingId { get; set; }

        /// <summary>
        /// The duration of the recording in ISO-8601 format
        /// </summary>
        /// <value>The duration of the recording in ISO-8601 format</value>
        /// <example>PT13.67S</example>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Always &#x60;1&#x60; for conference recordings; multi-channel recordings are not supported on conferences.
        /// </summary>
        /// <value>Always &#x60;1&#x60; for conference recordings; multi-channel recordings are not supported on conferences.</value>
        /// <example>1</example>
        [DataMember(Name = "channels", EmitDefaultValue = false)]
        public int Channels { get; set; }

        /// <summary>
        /// Time the call was started, in ISO 8601 format.
        /// </summary>
        /// <value>Time the call was started, in ISO 8601 format.</value>
        /// <example>2022-06-17T22:19:40.375Z</example>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// The time that the recording ended in ISO-8601 format
        /// </summary>
        /// <value>The time that the recording ended in ISO-8601 format</value>
        /// <example>2022-06-17T22:20Z</example>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// The current status of the process. For recording, current possible values are &#39;processing&#39;, &#39;partial&#39;, &#39;complete&#39;, &#39;deleted&#39;, and &#39;error&#39;. For transcriptions, current possible values are &#39;none&#39;, &#39;processing&#39;, &#39;available&#39;, &#39;error&#39;, &#39;timeout&#39;, &#39;file-size-too-big&#39;, and &#39;file-size-too-small&#39;. Additional states may be added in the future, so your application must be tolerant of unknown values.
        /// </summary>
        /// <value>The current status of the process. For recording, current possible values are &#39;processing&#39;, &#39;partial&#39;, &#39;complete&#39;, &#39;deleted&#39;, and &#39;error&#39;. For transcriptions, current possible values are &#39;none&#39;, &#39;processing&#39;, &#39;available&#39;, &#39;error&#39;, &#39;timeout&#39;, &#39;file-size-too-big&#39;, and &#39;file-size-too-small&#39;. Additional states may be added in the future, so your application must be tolerant of unknown values.</value>
        /// <example>completed</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The URL that can be used to download the recording. Only present if the recording is finished and may be downloaded.
        /// </summary>
        /// <value>The URL that can be used to download the recording. Only present if the recording is finished and may be downloaded.</value>
        /// <example>https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media</example>
        [DataMember(Name = "mediaUrl", EmitDefaultValue = true)]
        public string MediaUrl { get; set; }

        /// <summary>
        /// A name to identify this recording.
        /// </summary>
        /// <value>A name to identify this recording.</value>
        /// <example>my-recording-name</example>
        [DataMember(Name = "recordingName", EmitDefaultValue = false)]
        public string RecordingName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConferenceRecordingMetadata {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RecordingId: ").Append(RecordingId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MediaUrl: ").Append(MediaUrl).Append("\n");
            sb.Append("  RecordingName: ").Append(RecordingName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
