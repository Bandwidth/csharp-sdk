/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// RbmActionOpenUrl
    /// </summary>
    [DataContract(Name = "rbmActionOpenUrl")]
    public partial class RbmActionOpenUrl : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public RbmActionTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RbmActionOpenUrl" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RbmActionOpenUrl() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RbmActionOpenUrl" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="text">Displayed text for user to click (required).</param>
        /// <param name="postbackData">Base64 payload the customer receives when the reply is clicked. (required).</param>
        /// <param name="url">The URL to open in browser. (required).</param>
        public RbmActionOpenUrl(RbmActionTypeEnum type = default(RbmActionTypeEnum), string text = default(string), byte[] postbackData = default(byte[]), string url = default(string))
        {
            this.Type = type;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for RbmActionOpenUrl and cannot be null");
            }
            this.Text = text;
            // to ensure "postbackData" is required (not null)
            if (postbackData == null)
            {
                throw new ArgumentNullException("postbackData is a required property for RbmActionOpenUrl and cannot be null");
            }
            this.PostbackData = postbackData;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for RbmActionOpenUrl and cannot be null");
            }
            this.Url = url;
        }

        /// <summary>
        /// Displayed text for user to click
        /// </summary>
        /// <value>Displayed text for user to click</value>
        /// <example>Hello world</example>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// Base64 payload the customer receives when the reply is clicked.
        /// </summary>
        /// <value>Base64 payload the customer receives when the reply is clicked.</value>
        /// <example>U0dWc2JHOGdkMjl5YkdRPQ&#x3D;&#x3D;</example>
        [DataMember(Name = "postbackData", IsRequired = true, EmitDefaultValue = true)]
        public byte[] PostbackData { get; set; }

        /// <summary>
        /// The URL to open in browser.
        /// </summary>
        /// <value>The URL to open in browser.</value>
        /// <example>https://dev.bandwidth.com</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RbmActionOpenUrl {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  PostbackData: ").Append(PostbackData).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if (this.Text != null && this.Text.Length > 25)
            {
                yield return new ValidationResult("Invalid value for Text, length must be less than 25.", new [] { "Text" });
            }

            // PostbackData (byte[]) maxLength
            if (this.PostbackData != null && this.PostbackData.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for PostbackData, length must be less than 2048.", new [] { "PostbackData" });
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 2048)
            {
                yield return new ValidationResult("Invalid value for Url, length must be less than 2048.", new [] { "Url" });
            }

            yield break;
        }
    }

}
