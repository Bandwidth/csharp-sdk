/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// The data returned in a multichannel message response.
    /// </summary>
    [DataContract(Name = "multiChannelMessageResponseData")]
    public partial class MultiChannelMessageResponseData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", IsRequired = true, EmitDefaultValue = true)]
        public MessageDirectionEnum Direction { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelMessageResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultiChannelMessageResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelMessageResponseData" /> class.
        /// </summary>
        /// <param name="id">The ID of the message. (required).</param>
        /// <param name="time">The time the message was received by the Bandwidth API. (required).</param>
        /// <param name="direction">direction (required).</param>
        /// <param name="to">The destination phone number(s) of the message, in E164 format. (required).</param>
        /// <param name="channelList">A list of message bodies. The messages will be attempted in the order they are listed. Once a message sends successfully, the others will be ignored. (required).</param>
        /// <param name="tag">A custom string that will be included in callback events of the message. Max 1024 characters..</param>
        /// <param name="priority">priority.</param>
        /// <param name="expiration">A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future..</param>
        public MultiChannelMessageResponseData(string id = default(string), DateTime time = default(DateTime), MessageDirectionEnum direction = default(MessageDirectionEnum), List<string> to = default(List<string>), List<MultiChannelMessageResponseDataChannelListInner> channelList = default(List<MultiChannelMessageResponseDataChannelListInner>), string tag = default(string), PriorityEnum? priority = default(PriorityEnum?), DateTime expiration = default(DateTime))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MultiChannelMessageResponseData and cannot be null");
            }
            this.Id = id;
            this.Time = time;
            this.Direction = direction;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for MultiChannelMessageResponseData and cannot be null");
            }
            this.To = to;
            // to ensure "channelList" is required (not null)
            if (channelList == null)
            {
                throw new ArgumentNullException("channelList is a required property for MultiChannelMessageResponseData and cannot be null");
            }
            this.ChannelList = channelList;
            this.Tag = tag;
            this.Priority = priority;
            this.Expiration = expiration;
        }

        /// <summary>
        /// The ID of the message.
        /// </summary>
        /// <value>The ID of the message.</value>
        /// <example>1589228074636lm4k2je7j7jklbn2</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The time the message was received by the Bandwidth API.
        /// </summary>
        /// <value>The time the message was received by the Bandwidth API.</value>
        /// <example>2025-01-01T18:20:16Z</example>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// The destination phone number(s) of the message, in E164 format.
        /// </summary>
        /// <value>The destination phone number(s) of the message, in E164 format.</value>
        /// <example>[&quot;+15554443333&quot;]</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// A list of message bodies. The messages will be attempted in the order they are listed. Once a message sends successfully, the others will be ignored.
        /// </summary>
        /// <value>A list of message bodies. The messages will be attempted in the order they are listed. Once a message sends successfully, the others will be ignored.</value>
        [DataMember(Name = "channelList", IsRequired = true, EmitDefaultValue = true)]
        public List<MultiChannelMessageResponseDataChannelListInner> ChannelList { get; set; }

        /// <summary>
        /// A custom string that will be included in callback events of the message. Max 1024 characters.
        /// </summary>
        /// <value>A custom string that will be included in callback events of the message. Max 1024 characters.</value>
        /// <example>custom string</example>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future.
        /// </summary>
        /// <value>A string with the date/time value that the message will automatically expire by. This must be a valid RFC-3339 value, e.g., 2021-03-14T01:59:26Z or 2021-03-13T20:59:26-05:00. Must be a date-time in the future.</value>
        /// <example>2021-02-01T11:29:18-05:00</example>
        [DataMember(Name = "expiration", EmitDefaultValue = false)]
        public DateTime Expiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiChannelMessageResponseData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ChannelList: ").Append(ChannelList).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
