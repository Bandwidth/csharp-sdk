/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// RbmCardContent
    /// </summary>
    [DataContract(Name = "rbmCardContent")]
    public partial class RbmCardContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RbmCardContent" /> class.
        /// </summary>
        /// <param name="title">The title of the card. Must be 200 characters or less..</param>
        /// <param name="description">The description of the card. Must be 2000 characters or less..</param>
        /// <param name="media">media.</param>
        /// <param name="suggestions">An array of suggested actions for the recipient that will be displayed on the rich card..</param>
        public RbmCardContent(string title = default(string), string description = default(string), RbmCardContentMedia media = default(RbmCardContentMedia), List<MultiChannelAction> suggestions = default(List<MultiChannelAction>))
        {
            this.Title = title;
            this.Description = description;
            this.Media = media;
            this.Suggestions = suggestions;
        }

        /// <summary>
        /// The title of the card. Must be 200 characters or less.
        /// </summary>
        /// <value>The title of the card. Must be 200 characters or less.</value>
        /// <example>Bandwidth</example>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the card. Must be 2000 characters or less.
        /// </summary>
        /// <value>The description of the card. Must be 2000 characters or less.</value>
        /// <example>Bandwidth is a communications platform as a service (CPaaS) company.</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public RbmCardContentMedia Media { get; set; }

        /// <summary>
        /// An array of suggested actions for the recipient that will be displayed on the rich card.
        /// </summary>
        /// <value>An array of suggested actions for the recipient that will be displayed on the rich card.</value>
        [DataMember(Name = "suggestions", EmitDefaultValue = false)]
        public List<MultiChannelAction> Suggestions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RbmCardContent {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Suggestions: ").Append(Suggestions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 200.", new [] { "Title" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 2000.", new [] { "Description" });
            }

            yield break;
        }
    }

}
