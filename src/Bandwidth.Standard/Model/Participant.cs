/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Participant object.
    /// </summary>
    [DataContract(Name = "participant")]
    public partial class Participant : IEquatable<Participant>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DeviceApiVersion
        /// </summary>
        [DataMember(Name = "deviceApiVersion", EmitDefaultValue = false)]
        public DeviceApiVersionEnum? DeviceApiVersion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Participant" /> class.
        /// </summary>
        /// <param name="callbackUrl">Full callback url to use for notifications about this participant..</param>
        /// <param name="publishPermissions">Defines if this participant can publish audio or video..</param>
        /// <param name="subscriptions">subscriptions.</param>
        /// <param name="tag">User defined tag to associate with the participant..</param>
        /// <param name="deviceApiVersion">deviceApiVersion.</param>
        public Participant(string callbackUrl = default(string), List<PublishPermissionsEnum> publishPermissions = default(List<PublishPermissionsEnum>), Subscriptions subscriptions = default(Subscriptions), string tag = default(string), DeviceApiVersionEnum? deviceApiVersion = default(DeviceApiVersionEnum?))
        {
            this.CallbackUrl = callbackUrl;
            this.PublishPermissions = publishPermissions;
            this.Subscriptions = subscriptions;
            this.Tag = tag;
            this.DeviceApiVersion = deviceApiVersion;
        }

        /// <summary>
        /// Unique id of the participant.
        /// </summary>
        /// <value>Unique id of the participant.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Full callback url to use for notifications about this participant.
        /// </summary>
        /// <value>Full callback url to use for notifications about this participant.</value>
        [DataMember(Name = "callbackUrl", EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Defines if this participant can publish audio or video.
        /// </summary>
        /// <value>Defines if this participant can publish audio or video.</value>
        [DataMember(Name = "publishPermissions", EmitDefaultValue = false)]
        public List<PublishPermissionsEnum> PublishPermissions { get; set; }

        /// <summary>
        /// List of session ids this participant is associated with  Capped to one  Upon creation of a Participant, returns as an empty array.
        /// </summary>
        /// <value>List of session ids this participant is associated with  Capped to one  Upon creation of a Participant, returns as an empty array.</value>
        [DataMember(Name = "sessions", EmitDefaultValue = false)]
        public List<string> Sessions { get; private set; }

        /// <summary>
        /// Returns false as Sessions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSessions()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [DataMember(Name = "subscriptions", EmitDefaultValue = false)]
        public Subscriptions Subscriptions { get; set; }

        /// <summary>
        /// User defined tag to associate with the participant.
        /// </summary>
        /// <value>User defined tag to associate with the participant.</value>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Participant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  PublishPermissions: ").Append(PublishPermissions).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  DeviceApiVersion: ").Append(DeviceApiVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Participant);
        }

        /// <summary>
        /// Returns true if Participant instances are equal
        /// </summary>
        /// <param name="input">Instance of Participant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Participant input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.PublishPermissions == input.PublishPermissions ||
                    this.PublishPermissions != null &&
                    input.PublishPermissions != null &&
                    this.PublishPermissions.SequenceEqual(input.PublishPermissions)
                ) && 
                (
                    this.Sessions == input.Sessions ||
                    this.Sessions != null &&
                    input.Sessions != null &&
                    this.Sessions.SequenceEqual(input.Sessions)
                ) && 
                (
                    this.Subscriptions == input.Subscriptions ||
                    (this.Subscriptions != null &&
                    this.Subscriptions.Equals(input.Subscriptions))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.DeviceApiVersion == input.DeviceApiVersion ||
                    this.DeviceApiVersion.Equals(input.DeviceApiVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                if (this.PublishPermissions != null)
                {
                    hashCode = (hashCode * 59) + this.PublishPermissions.GetHashCode();
                }
                if (this.Sessions != null)
                {
                    hashCode = (hashCode * 59) + this.Sessions.GetHashCode();
                }
                if (this.Subscriptions != null)
                {
                    hashCode = (hashCode * 59) + this.Subscriptions.GetHashCode();
                }
                if (this.Tag != null)
                {
                    hashCode = (hashCode * 59) + this.Tag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeviceApiVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
