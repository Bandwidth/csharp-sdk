/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// MultiChannelMessageCallbackData
    /// </summary>
    [DataContract(Name = "multiChannelMessageCallbackData")]
    public partial class MultiChannelMessageCallbackData : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public MultiChannelStatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public MultiChannelMessageDirectionEnum? Direction { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = false)]
        public MultiChannelMessageChannelEnum? Channel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelMessageCallbackData" /> class.
        /// </summary>
        /// <param name="messageId">The ID of the message..</param>
        /// <param name="status">status.</param>
        /// <param name="direction">direction.</param>
        /// <param name="from">The sender ID of the message. This could be an alphanumeric sender ID..</param>
        /// <param name="to">The phone number the message should be sent to in E164 format..</param>
        /// <param name="applicationId">The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard..</param>
        /// <param name="channel">channel.</param>
        /// <param name="tag">A custom string that will be included in callback events of the message. Max 1024 characters..</param>
        public MultiChannelMessageCallbackData(string messageId = default(string), MultiChannelStatusEnum? status = default(MultiChannelStatusEnum?), MultiChannelMessageDirectionEnum? direction = default(MultiChannelMessageDirectionEnum?), string from = default(string), string to = default(string), string applicationId = default(string), MultiChannelMessageChannelEnum? channel = default(MultiChannelMessageChannelEnum?), string tag = default(string))
        {
            this.MessageId = messageId;
            this.Status = status;
            this.Direction = direction;
            this.From = from;
            this.To = to;
            this.ApplicationId = applicationId;
            this.Channel = channel;
            this.Tag = tag;
        }

        /// <summary>
        /// The ID of the message.
        /// </summary>
        /// <value>The ID of the message.</value>
        /// <example>1589228074636lm4k2je7j7jklbn2</example>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        /// The sender ID of the message. This could be an alphanumeric sender ID.
        /// </summary>
        /// <value>The sender ID of the message. This could be an alphanumeric sender ID.</value>
        /// <example>BandwidthRBM</example>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// The phone number the message should be sent to in E164 format.
        /// </summary>
        /// <value>The phone number the message should be sent to in E164 format.</value>
        /// <example>+15552223333</example>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard.
        /// </summary>
        /// <value>The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard.</value>
        /// <example>93de2206-9669-4e07-948d-329f4b722ee2</example>
        [DataMember(Name = "applicationId", EmitDefaultValue = false)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// A custom string that will be included in callback events of the message. Max 1024 characters.
        /// </summary>
        /// <value>A custom string that will be included in callback events of the message. Max 1024 characters.</value>
        /// <example>custom string</example>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiChannelMessageCallbackData {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
