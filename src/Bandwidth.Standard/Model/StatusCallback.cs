/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Represents a status callback for an outbound MT SMS or MMS or RBM message.
    /// </summary>
    [DataContract(Name = "statusCallback")]
    public partial class StatusCallback : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public StatusCallbackTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusCallback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatusCallback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusCallback" /> class.
        /// </summary>
        /// <param name="time">time (required).</param>
        /// <param name="eventTime">Represents the time at which the message was read, for &#x60;message-read&#x60; callbacks..</param>
        /// <param name="type">type (required).</param>
        /// <param name="to">The destination phone number the message was sent to. For status callbacks, this the the Bandwidth user&#39;s client phone number. (required).</param>
        /// <param name="description">A detailed description of the event described by the callback. (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="errorCode">Optional error code, applicable only when type is &#x60;message-failed&#x60;..</param>
        /// <param name="carrierName">The name of the Authorized Message Provider (AMP) that handled this message.  In the US, this is the carrier that the message was sent to. This field is present only when this account feature has been enabled..</param>
        public StatusCallback(DateTime time = default(DateTime), DateTime eventTime = default(DateTime), StatusCallbackTypeEnum type = default(StatusCallbackTypeEnum), string to = default(string), string description = default(string), StatusCallbackMessage message = default(StatusCallbackMessage), int errorCode = default(int), string carrierName = default(string))
        {
            this.Time = time;
            this.Type = type;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for StatusCallback and cannot be null");
            }
            this.To = to;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for StatusCallback and cannot be null");
            }
            this.Description = description;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for StatusCallback and cannot be null");
            }
            this.Message = message;
            this.EventTime = eventTime;
            this.ErrorCode = errorCode;
            this.CarrierName = carrierName;
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        /// <example>2024-12-02T20:15:57.278Z</example>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Represents the time at which the message was read, for &#x60;message-read&#x60; callbacks.
        /// </summary>
        /// <value>Represents the time at which the message was read, for &#x60;message-read&#x60; callbacks.</value>
        /// <example>2024-12-02T20:15:58.278Z</example>
        [DataMember(Name = "eventTime", EmitDefaultValue = false)]
        public DateTime EventTime { get; set; }

        /// <summary>
        /// The destination phone number the message was sent to. For status callbacks, this the the Bandwidth user&#39;s client phone number.
        /// </summary>
        /// <value>The destination phone number the message was sent to. For status callbacks, this the the Bandwidth user&#39;s client phone number.</value>
        /// <example>+15552223333</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// A detailed description of the event described by the callback.
        /// </summary>
        /// <value>A detailed description of the event described by the callback.</value>
        /// <example>Message delivered to carrier.</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public StatusCallbackMessage Message { get; set; }

        /// <summary>
        /// Optional error code, applicable only when type is &#x60;message-failed&#x60;.
        /// </summary>
        /// <value>Optional error code, applicable only when type is &#x60;message-failed&#x60;.</value>
        /// <example>4405</example>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public int ErrorCode { get; set; }

        /// <summary>
        /// The name of the Authorized Message Provider (AMP) that handled this message.  In the US, this is the carrier that the message was sent to. This field is present only when this account feature has been enabled.
        /// </summary>
        /// <value>The name of the Authorized Message Provider (AMP) that handled this message.  In the US, this is the carrier that the message was sent to. This field is present only when this account feature has been enabled.</value>
        /// <example>AT&amp;T</example>
        [DataMember(Name = "carrierName", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusCallback {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
