/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// RbmStandaloneCard
    /// </summary>
    [DataContract(Name = "rbmStandaloneCard")]
    public partial class RbmStandaloneCard : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", IsRequired = true, EmitDefaultValue = true)]
        public StandaloneCardOrientationEnum Orientation { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailImageAlignment
        /// </summary>
        [DataMember(Name = "thumbnailImageAlignment", IsRequired = true, EmitDefaultValue = true)]
        public ThumbnailAlignmentEnum ThumbnailImageAlignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RbmStandaloneCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RbmStandaloneCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RbmStandaloneCard" /> class.
        /// </summary>
        /// <param name="orientation">orientation (required).</param>
        /// <param name="thumbnailImageAlignment">thumbnailImageAlignment (required).</param>
        /// <param name="cardContent">cardContent (required).</param>
        /// <param name="suggestions">An array of suggested actions for the recipient..</param>
        public RbmStandaloneCard(StandaloneCardOrientationEnum orientation = default(StandaloneCardOrientationEnum), ThumbnailAlignmentEnum thumbnailImageAlignment = default(ThumbnailAlignmentEnum), RbmCardContent cardContent = default(RbmCardContent), List<MultiChannelAction> suggestions = default(List<MultiChannelAction>))
        {
            this.Orientation = orientation;
            this.ThumbnailImageAlignment = thumbnailImageAlignment;
            // to ensure "cardContent" is required (not null)
            if (cardContent == null)
            {
                throw new ArgumentNullException("cardContent is a required property for RbmStandaloneCard and cannot be null");
            }
            this.CardContent = cardContent;
            this.Suggestions = suggestions;
        }

        /// <summary>
        /// Gets or Sets CardContent
        /// </summary>
        [DataMember(Name = "cardContent", IsRequired = true, EmitDefaultValue = true)]
        public RbmCardContent CardContent { get; set; }

        /// <summary>
        /// An array of suggested actions for the recipient.
        /// </summary>
        /// <value>An array of suggested actions for the recipient.</value>
        [DataMember(Name = "suggestions", EmitDefaultValue = false)]
        public List<MultiChannelAction> Suggestions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RbmStandaloneCard {\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  ThumbnailImageAlignment: ").Append(ThumbnailImageAlignment).Append("\n");
            sb.Append("  CardContent: ").Append(CardContent).Append("\n");
            sb.Append("  Suggestions: ").Append(Suggestions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
