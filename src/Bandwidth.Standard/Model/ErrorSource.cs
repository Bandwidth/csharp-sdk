/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Specifies relevant sources of the error, if any.
    /// </summary>
    [DataContract(Name = "errorSource")]
    public partial class ErrorSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorSource" /> class.
        /// </summary>
        /// <param name="varParameter">The relevant URI query parameter causing the error.</param>
        /// <param name="field">The request body field that led to the error.</param>
        /// <param name="header">The header field that contributed to the error.</param>
        /// <param name="reference">A resource ID or path linked to the error.</param>
        public ErrorSource(string varParameter = default(string), string field = default(string), string header = default(string), string reference = default(string))
        {
            this.Parameter = varParameter;
            this.Field = field;
            this.Header = header;
            this.Reference = reference;
        }

        /// <summary>
        /// The relevant URI query parameter causing the error
        /// </summary>
        /// <value>The relevant URI query parameter causing the error</value>
        [DataMember(Name = "parameter", EmitDefaultValue = false)]
        public string Parameter { get; set; }

        /// <summary>
        /// The request body field that led to the error
        /// </summary>
        /// <value>The request body field that led to the error</value>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        /// The header field that contributed to the error
        /// </summary>
        /// <value>The header field that contributed to the error</value>
        [DataMember(Name = "header", EmitDefaultValue = false)]
        public string Header { get; set; }

        /// <summary>
        /// A resource ID or path linked to the error
        /// </summary>
        /// <value>A resource ID or path linked to the error</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorSource {\n");
            sb.Append("  Parameter: ").Append(Parameter).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
