/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// VerificationDenialWebhook
    /// </summary>
    [DataContract(Name = "verificationDenialWebhook")]
    public partial class VerificationDenialWebhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerificationDenialWebhook" /> class.
        /// </summary>
        /// <param name="accountId">User&#39;s account ID..</param>
        /// <param name="additionalDenialReasons">An optional list of denial reasons in addition to declineReasonDescription when multiple reasons apply..</param>
        /// <param name="declineReasonDescription">Explanation for why a verification request was declined..</param>
        /// <param name="denialStatusCode">Reason code for denial..</param>
        /// <param name="internalTicketNumber">Unique identifier (UUID) generated by Bandwidth to assist in tracking the verification status of a toll-free number..</param>
        /// <param name="phoneNumber">Toll-free telephone number in E.164 format..</param>
        /// <param name="resubmitAllowed">Whether a Toll-Free Verification request qualifies for resubmission via PUT..</param>
        /// <param name="status">status (default to &quot;UNVERIFIED&quot;).</param>
        /// <param name="blocked">Whether a Toll-Free Verification is blocked. This attribute will only be defined when the number is blocked..</param>
        /// <param name="blockedReason">The reason why the Toll-Free Verification is blocked. This attribute will only be defined when the number is blocked..</param>
        public VerificationDenialWebhook(string accountId = default(string), List<AdditionalDenialReason> additionalDenialReasons = default(List<AdditionalDenialReason>), string declineReasonDescription = default(string), int denialStatusCode = default(int), Guid internalTicketNumber = default(Guid), string phoneNumber = default(string), bool resubmitAllowed = default(bool), string status = @"UNVERIFIED", bool blocked = default(bool), string blockedReason = default(string))
        {
            this.AccountId = accountId;
            this.AdditionalDenialReasons = additionalDenialReasons;
            this.DeclineReasonDescription = declineReasonDescription;
            this.DenialStatusCode = denialStatusCode;
            this.InternalTicketNumber = internalTicketNumber;
            this.PhoneNumber = phoneNumber;
            this.ResubmitAllowed = resubmitAllowed;
            // use default value if no "status" provided
            this.Status = status ?? @"UNVERIFIED";
            this.Blocked = blocked;
            this.BlockedReason = blockedReason;
        }

        /// <summary>
        /// User&#39;s account ID.
        /// </summary>
        /// <value>User&#39;s account ID.</value>
        /// <example>1234567</example>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// An optional list of denial reasons in addition to declineReasonDescription when multiple reasons apply.
        /// </summary>
        /// <value>An optional list of denial reasons in addition to declineReasonDescription when multiple reasons apply.</value>
        /// <example>[{&quot;statusCode&quot;:512,&quot;reason&quot;:&quot;Reason A&quot;,&quot;resubmitAllowed&quot;:true},{&quot;statusCode&quot;:513,&quot;reason&quot;:&quot;Reason B&quot;,&quot;resubmitAllowed&quot;:true}]</example>
        [DataMember(Name = "additionalDenialReasons", EmitDefaultValue = false)]
        public List<AdditionalDenialReason> AdditionalDenialReasons { get; set; }

        /// <summary>
        /// Explanation for why a verification request was declined.
        /// </summary>
        /// <value>Explanation for why a verification request was declined.</value>
        /// <example>Invalid Information - Can&#39;t Validate URL - Website is not accessible / not available</example>
        [DataMember(Name = "declineReasonDescription", EmitDefaultValue = false)]
        public string DeclineReasonDescription { get; set; }

        /// <summary>
        /// Reason code for denial.
        /// </summary>
        /// <value>Reason code for denial.</value>
        /// <example>511</example>
        [DataMember(Name = "denialStatusCode", EmitDefaultValue = false)]
        public int DenialStatusCode { get; set; }

        /// <summary>
        /// Unique identifier (UUID) generated by Bandwidth to assist in tracking the verification status of a toll-free number.
        /// </summary>
        /// <value>Unique identifier (UUID) generated by Bandwidth to assist in tracking the verification status of a toll-free number.</value>
        /// <example>acde070d-8c4c-4f0d-9d8a-162843c10333</example>
        [DataMember(Name = "internalTicketNumber", EmitDefaultValue = false)]
        public Guid InternalTicketNumber { get; set; }

        /// <summary>
        /// Toll-free telephone number in E.164 format.
        /// </summary>
        /// <value>Toll-free telephone number in E.164 format.</value>
        /// <example>+18005555555</example>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Whether a Toll-Free Verification request qualifies for resubmission via PUT.
        /// </summary>
        /// <value>Whether a Toll-Free Verification request qualifies for resubmission via PUT.</value>
        /// <example>true</example>
        [DataMember(Name = "resubmitAllowed", EmitDefaultValue = true)]
        public bool ResubmitAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /// <example>UNVERIFIED</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Whether a Toll-Free Verification is blocked. This attribute will only be defined when the number is blocked.
        /// </summary>
        /// <value>Whether a Toll-Free Verification is blocked. This attribute will only be defined when the number is blocked.</value>
        /// <example>true</example>
        [DataMember(Name = "blocked", EmitDefaultValue = true)]
        public bool Blocked { get; set; }

        /// <summary>
        /// The reason why the Toll-Free Verification is blocked. This attribute will only be defined when the number is blocked.
        /// </summary>
        /// <value>The reason why the Toll-Free Verification is blocked. This attribute will only be defined when the number is blocked.</value>
        /// <example>Toll-free number was used to send spam messages</example>
        [DataMember(Name = "blockedReason", EmitDefaultValue = false)]
        public string BlockedReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerificationDenialWebhook {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AdditionalDenialReasons: ").Append(AdditionalDenialReasons).Append("\n");
            sb.Append("  DeclineReasonDescription: ").Append(DeclineReasonDescription).Append("\n");
            sb.Append("  DenialStatusCode: ").Append(DenialStatusCode).Append("\n");
            sb.Append("  InternalTicketNumber: ").Append(InternalTicketNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  ResubmitAllowed: ").Append(ResubmitAllowed).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  BlockedReason: ").Append(BlockedReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 12)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be less than 12.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 12)
            {
                yield return new ValidationResult("Invalid value for PhoneNumber, length must be greater than 12.", new [] { "PhoneNumber" });
            }

            if (this.PhoneNumber != null) {
                // PhoneNumber (string) pattern
                Regex regexPhoneNumber = new Regex(@"^\+1(800|833|844|855|866|877|888)[2-9]\d{6}$", RegexOptions.CultureInvariant);
                if (!regexPhoneNumber.Match(this.PhoneNumber).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, must match a pattern of " + regexPhoneNumber, new [] { "PhoneNumber" });
                }
            }

            yield break;
        }
    }

}
