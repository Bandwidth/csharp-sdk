/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// CallTranscriptionResponse
    /// </summary>
    [DataContract(Name = "callTranscriptionResponse")]
    public partial class CallTranscriptionResponse : IEquatable<CallTranscriptionResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallTranscriptionResponse" /> class.
        /// </summary>
        /// <param name="accountId">The user account associated with the call..</param>
        /// <param name="callId">The call id associated with the event..</param>
        /// <param name="transcriptionId">The programmable voice API transcription ID..</param>
        /// <param name="tracks">tracks.</param>
        public CallTranscriptionResponse(string accountId = default(string), string callId = default(string), string transcriptionId = default(string), List<CallTranscription> tracks = default(List<CallTranscription>))
        {
            this.AccountId = accountId;
            this.CallId = callId;
            this.TranscriptionId = transcriptionId;
            this.Tracks = tracks;
        }

        /// <summary>
        /// The user account associated with the call.
        /// </summary>
        /// <value>The user account associated with the call.</value>
        /// <example>9900000</example>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// The call id associated with the event.
        /// </summary>
        /// <value>The call id associated with the event.</value>
        /// <example>c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85</example>
        [DataMember(Name = "callId", EmitDefaultValue = false)]
        public string CallId { get; set; }

        /// <summary>
        /// The programmable voice API transcription ID.
        /// </summary>
        /// <value>The programmable voice API transcription ID.</value>
        /// <example>t-3f758f24-c7a2fc78-7c91-401a-8b2e-e542f9c40d6b</example>
        [DataMember(Name = "transcriptionId", EmitDefaultValue = false)]
        public string TranscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets Tracks
        /// </summary>
        /// <example>[{&quot;detectedLanguage&quot;:&quot;en-US&quot;,&quot;track&quot;:&quot;inbound&quot;,&quot;transcript&quot;:&quot;Hello World! This is an example.&quot;,&quot;confidence&quot;:0.9}]</example>
        [DataMember(Name = "tracks", EmitDefaultValue = false)]
        public List<CallTranscription> Tracks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallTranscriptionResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  TranscriptionId: ").Append(TranscriptionId).Append("\n");
            sb.Append("  Tracks: ").Append(Tracks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallTranscriptionResponse);
        }

        /// <summary>
        /// Returns true if CallTranscriptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CallTranscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallTranscriptionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.CallId == input.CallId ||
                    (this.CallId != null &&
                    this.CallId.Equals(input.CallId))
                ) && 
                (
                    this.TranscriptionId == input.TranscriptionId ||
                    (this.TranscriptionId != null &&
                    this.TranscriptionId.Equals(input.TranscriptionId))
                ) && 
                (
                    this.Tracks == input.Tracks ||
                    this.Tracks != null &&
                    input.Tracks != null &&
                    this.Tracks.SequenceEqual(input.Tracks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.CallId != null)
                {
                    hashCode = (hashCode * 59) + this.CallId.GetHashCode();
                }
                if (this.TranscriptionId != null)
                {
                    hashCode = (hashCode * 59) + this.TranscriptionId.GetHashCode();
                }
                if (this.Tracks != null)
                {
                    hashCode = (hashCode * 59) + this.Tracks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
