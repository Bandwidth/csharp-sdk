/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "address")]
    public partial class Address : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="name">The name of the business using the toll-free number. (required).</param>
        /// <param name="addr1">The address of the business using the toll-free number. (required).</param>
        /// <param name="addr2">The address of the business using the toll-free number..</param>
        /// <param name="city">The city of the business using the toll-free number. (required).</param>
        /// <param name="state">The state of the business using the toll-free number. (required).</param>
        /// <param name="zip">The zip of the business using the toll-free number. (required).</param>
        /// <param name="url">The website of the business using the toll-free number. (required).</param>
        public Address(string name = default(string), string addr1 = default(string), string addr2 = default(string), string city = default(string), string state = default(string), string zip = default(string), string url = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Address and cannot be null");
            }
            this.Name = name;
            // to ensure "addr1" is required (not null)
            if (addr1 == null)
            {
                throw new ArgumentNullException("addr1 is a required property for Address and cannot be null");
            }
            this.Addr1 = addr1;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for Address and cannot be null");
            }
            this.City = city;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for Address and cannot be null");
            }
            this.State = state;
            // to ensure "zip" is required (not null)
            if (zip == null)
            {
                throw new ArgumentNullException("zip is a required property for Address and cannot be null");
            }
            this.Zip = zip;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for Address and cannot be null");
            }
            this.Url = url;
            this.Addr2 = addr2;
        }

        /// <summary>
        /// The name of the business using the toll-free number.
        /// </summary>
        /// <value>The name of the business using the toll-free number.</value>
        /// <example>Bandwidth Inc.</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The address of the business using the toll-free number.
        /// </summary>
        /// <value>The address of the business using the toll-free number.</value>
        /// <example>2230 Bandmate Way</example>
        [DataMember(Name = "addr1", IsRequired = true, EmitDefaultValue = true)]
        public string Addr1 { get; set; }

        /// <summary>
        /// The address of the business using the toll-free number.
        /// </summary>
        /// <value>The address of the business using the toll-free number.</value>
        /// <example>2230 Bandmate Way</example>
        [DataMember(Name = "addr2", EmitDefaultValue = true)]
        public string Addr2 { get; set; }

        /// <summary>
        /// The city of the business using the toll-free number.
        /// </summary>
        /// <value>The city of the business using the toll-free number.</value>
        /// <example>Raleigh</example>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The state of the business using the toll-free number.
        /// </summary>
        /// <value>The state of the business using the toll-free number.</value>
        /// <example>NC</example>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The zip of the business using the toll-free number.
        /// </summary>
        /// <value>The zip of the business using the toll-free number.</value>
        /// <example>27606</example>
        [DataMember(Name = "zip", IsRequired = true, EmitDefaultValue = true)]
        public string Zip { get; set; }

        /// <summary>
        /// The website of the business using the toll-free number.
        /// </summary>
        /// <value>The website of the business using the toll-free number.</value>
        /// <example>https://www.example.com/path/to/resource</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Addr1: ").Append(Addr1).Append("\n");
            sb.Append("  Addr2: ").Append(Addr2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 500.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Addr1 (string) maxLength
            if (this.Addr1 != null && this.Addr1.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Addr1, length must be less than 500.", new [] { "Addr1" });
            }

            // Addr1 (string) minLength
            if (this.Addr1 != null && this.Addr1.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Addr1, length must be greater than 1.", new [] { "Addr1" });
            }

            // Addr2 (string) maxLength
            if (this.Addr2 != null && this.Addr2.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Addr2, length must be less than 500.", new [] { "Addr2" });
            }

            // Addr2 (string) minLength
            if (this.Addr2 != null && this.Addr2.Length < 0)
            {
                yield return new ValidationResult("Invalid value for Addr2, length must be greater than 0.", new [] { "Addr2" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 500)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 500.", new [] { "City" });
            }

            // City (string) minLength
            if (this.City != null && this.City.Length < 1)
            {
                yield return new ValidationResult("Invalid value for City, length must be greater than 1.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 500)
            {
                yield return new ValidationResult("Invalid value for State, length must be less than 500.", new [] { "State" });
            }

            // State (string) minLength
            if (this.State != null && this.State.Length < 1)
            {
                yield return new ValidationResult("Invalid value for State, length must be greater than 1.", new [] { "State" });
            }

            if (this.Zip != null) {
                // Zip (string) pattern
                Regex regexZip = new Regex(@"[- A-Za-z0-9]{0,500}", RegexOptions.CultureInvariant);
                if (!regexZip.Match(this.Zip).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Zip, must match a pattern of " + regexZip, new [] { "Zip" });
                }
            }

            // Url (string) maxLength
            if (this.Url != null && this.Url.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Url, length must be less than 500.", new [] { "Url" });
            }

            // Url (string) minLength
            if (this.Url != null && this.Url.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Url, length must be greater than 1.", new [] { "Url" });
            }

            yield break;
        }
    }

}
