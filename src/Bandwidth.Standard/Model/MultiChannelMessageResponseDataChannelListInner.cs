/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// MultiChannelMessageResponseDataChannelListInner
    /// </summary>
    [DataContract(Name = "multiChannelMessageResponseData_channelList_inner")]
    public partial class MultiChannelMessageResponseDataChannelListInner : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public MultiChannelMessageChannelEnum Channel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelMessageResponseDataChannelListInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MultiChannelMessageResponseDataChannelListInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelMessageResponseDataChannelListInner" /> class.
        /// </summary>
        /// <param name="from">The sender ID of the message. This could be an alphanumeric sender ID. (required).</param>
        /// <param name="applicationId">The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard. (required).</param>
        /// <param name="channel">channel (required).</param>
        /// <param name="content">content (required).</param>
        /// <param name="owner">The Bandwidth senderId associated with the message. Identical to &#39;from&#39;. (required).</param>
        public MultiChannelMessageResponseDataChannelListInner(string from = default(string), string applicationId = default(string), MultiChannelMessageChannelEnum channel = default(MultiChannelMessageChannelEnum), MultiChannelChannelListObjectContent content = default(MultiChannelChannelListObjectContent), string owner = default(string))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for MultiChannelMessageResponseDataChannelListInner and cannot be null");
            }
            this.From = from;
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for MultiChannelMessageResponseDataChannelListInner and cannot be null");
            }
            this.ApplicationId = applicationId;
            this.Channel = channel;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for MultiChannelMessageResponseDataChannelListInner and cannot be null");
            }
            this.Content = content;
            // to ensure "owner" is required (not null)
            if (owner == null)
            {
                throw new ArgumentNullException("owner is a required property for MultiChannelMessageResponseDataChannelListInner and cannot be null");
            }
            this.Owner = owner;
        }

        /// <summary>
        /// The sender ID of the message. This could be an alphanumeric sender ID.
        /// </summary>
        /// <value>The sender ID of the message. This could be an alphanumeric sender ID.</value>
        /// <example>BandwidthRBM</example>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard.
        /// </summary>
        /// <value>The ID of the Application your from number or senderId is associated with in the Bandwidth Phone Number Dashboard.</value>
        /// <example>93de2206-9669-4e07-948d-329f4b722ee2</example>
        [DataMember(Name = "applicationId", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public MultiChannelChannelListObjectContent Content { get; set; }

        /// <summary>
        /// The Bandwidth senderId associated with the message. Identical to &#39;from&#39;.
        /// </summary>
        /// <value>The Bandwidth senderId associated with the message. Identical to &#39;from&#39;.</value>
        [DataMember(Name = "owner", IsRequired = true, EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultiChannelMessageResponseDataChannelListInner {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
