/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// The possible status callbacks when sending an MT SMS or MMS or RBM message: - &#x60;message-sending&#x60; indicates that Bandwidth is sending the message to the upstream provider. - &#x60;message-delivered&#x60; indicates that the message was successfully sent. - &#x60;message-failed&#x60; indicates that the message could not be sent to the intended recipient. - &#x60;message-read&#x60; indicates that the RBM message was read by the recipient.
    /// </summary>
    /// <value>The possible status callbacks when sending an MT SMS or MMS or RBM message: - &#x60;message-sending&#x60; indicates that Bandwidth is sending the message to the upstream provider. - &#x60;message-delivered&#x60; indicates that the message was successfully sent. - &#x60;message-failed&#x60; indicates that the message could not be sent to the intended recipient. - &#x60;message-read&#x60; indicates that the RBM message was read by the recipient.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum StatusCallbackTypeEnum
    {
        /// <summary>
        /// Enum Sending for value: message-sending
        /// </summary>
        [EnumMember(Value = "message-sending")]
        Sending = 1,

        /// <summary>
        /// Enum Delivered for value: message-delivered
        /// </summary>
        [EnumMember(Value = "message-delivered")]
        Delivered = 2,

        /// <summary>
        /// Enum Failed for value: message-failed
        /// </summary>
        [EnumMember(Value = "message-failed")]
        Failed = 3,

        /// <summary>
        /// Enum Read for value: message-read
        /// </summary>
        [EnumMember(Value = "message-read")]
        Read = 4
    }

}
