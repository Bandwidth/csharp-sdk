/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Bandwidth.Standard.Client.OpenAPIDateConverter;

namespace Bandwidth.Standard.Model
{
    /// <summary>
    /// Represents an inbound callback.
    /// </summary>
    [DataContract(Name = "inboundCallback")]
    public partial class InboundCallback : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public InboundCallbackTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundCallback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InboundCallback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InboundCallback" /> class.
        /// </summary>
        /// <param name="time">time (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="to">The destination phone number the message was sent to.  For inbound callbacks, this is the Bandwidth number or alphanumeric identifier that received the message.  (required).</param>
        /// <param name="description">A detailed description of the event described by the callback. (required).</param>
        /// <param name="message">message (required).</param>
        /// <param name="carrierName">The name of the Authorized Message Provider (AMP) that handled this message.  In the US, this is the carrier that the message was sent to. This field is present only when this account feature has been enabled..</param>
        public InboundCallback(DateTime time = default(DateTime), InboundCallbackTypeEnum type = default(InboundCallbackTypeEnum), string to = default(string), string description = default(string), InboundCallbackMessage message = default(InboundCallbackMessage), string carrierName = default(string))
        {
            this.Time = time;
            this.Type = type;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for InboundCallback and cannot be null");
            }
            this.To = to;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for InboundCallback and cannot be null");
            }
            this.Description = description;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for InboundCallback and cannot be null");
            }
            this.Message = message;
            this.CarrierName = carrierName;
        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        /// <example>2024-12-02T20:15:57.278Z</example>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Time { get; set; }

        /// <summary>
        /// The destination phone number the message was sent to.  For inbound callbacks, this is the Bandwidth number or alphanumeric identifier that received the message. 
        /// </summary>
        /// <value>The destination phone number the message was sent to.  For inbound callbacks, this is the Bandwidth number or alphanumeric identifier that received the message. </value>
        /// <example>+15552223333</example>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// A detailed description of the event described by the callback.
        /// </summary>
        /// <value>A detailed description of the event described by the callback.</value>
        /// <example>Incoming message received</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public InboundCallbackMessage Message { get; set; }

        /// <summary>
        /// The name of the Authorized Message Provider (AMP) that handled this message.  In the US, this is the carrier that the message was sent to. This field is present only when this account feature has been enabled.
        /// </summary>
        /// <value>The name of the Authorized Message Provider (AMP) that handled this message.  In the US, this is the carrier that the message was sent to. This field is present only when this account feature has been enabled.</value>
        /// <example>AT&amp;T</example>
        [DataMember(Name = "carrierName", EmitDefaultValue = false)]
        public string CarrierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InboundCallback {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
