/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Moq;
using System.Net;

namespace Bandwidth.Standard.Test.Api
{
    /// <summary>
    ///  Class for testing TranscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TranscriptionsApiTests : IDisposable
    {
        private TranscriptionsApi instance;
        private Mock<ISynchronousClient> mockClient;
        private Mock<IAsynchronousClient> mockAsynchronousClient;
        private Configuration fakeConfiguration;

        public TranscriptionsApiTests()
        {
            mockClient = new Mock<ISynchronousClient>();
            mockAsynchronousClient = new Mock<IAsynchronousClient>();
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://voice.bandwidth.com/api/v2";
            fakeConfiguration.Username = "username";
            fakeConfiguration.Password = "password";
            instance = new TranscriptionsApi(mockClient.Object, mockAsynchronousClient.Object, fakeConfiguration);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TranscriptionsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<TranscriptionsApi>(instance);
        }

        /// <summary>
        /// Test DeleteRealTimeTranscription
        /// </summary>
        [Fact]
        public void DeleteRealTimeTranscriptionTest()
        {
            string accountId = "9900000";
            string callId = "c-12345";
            string transcriptionId = "t-12345";

            //var apiResponse = new ApiResponse<null>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/transcriptions/{transcriptionId}", It.IsAny<RequestOptions>(), fakeConfiguration));
            instance.DeleteRealTimeTranscription(accountId, callId, transcriptionId);
        }

        /// <summary>
        /// Test GetRealTimeTranscription
        /// </summary>
        //[Fact]
        //public void GetRealTimeTranscriptionTest()
        //{
        //    string accountId = "9900000";
        //    string callId = "c-12345";
        //    string transcriptionId = "t-12345";

        //    var callTranscriptionResponse = new CallTranscriptionResponse();

        //    var apiResponse = new ApiResponse<CallTranscriptionResponse>(HttpStatusCode.OK, callTranscriptionResponse);
        //    mockClient.Setup(x => x.Get<CallTranscriptionResponse>("/accounts/{accountId}/calls/{callId}/transcriptions/{transcriptionId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
        //    var response = instance.GetRealTimeTranscription(accountId, callId, transcriptionId);

        //    Assert.IsType<ApiResponse<CallTranscriptionResponse>>(response);
        //    Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        //}

        /// <summary>
        /// Test ListRealTimeTranscriptions
        /// </summary>
        //[Fact]
        //public void ListRealTimeTranscriptionsTest()
        //{
        //    string accountId = "9900000";
        //    string callId = "c-12345";

        //    var listTranscriptionResponse = new List<CallTranscriptionMetadata>();

        //    var apiResponse = new ApiResponse<CallTranscriptionResponse>(HttpStatusCode.OK, listTranscriptionResponse);
        //    mockClient.Setup(x => x.Get<CallTranscriptionResponse>("/accounts/{accountId}/calls/{callId}/transcriptions", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
        //    var response = instance.ListRealTimeTranscriptions(accountId, callId);

        //    Assert.IsType<ApiResponse<CallTranscriptionResponse>>(response);
        //    Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        //}
    }
}
