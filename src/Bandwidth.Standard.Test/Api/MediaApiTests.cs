/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Moq;
using System.Net;

namespace Bandwidth.Standard.Test.Api
{
    /// <summary>
    ///  Class for testing MediaApi
    /// </summary>
    public class MediaApiTests : IDisposable
    {
        private MediaApi instance;
        private Mock<ISynchronousClient> mockClient;
        private Mock<IAsynchronousClient> mockAsynchronousClient;
        private Configuration fakeConfiguration;

        public MediaApiTests()
        {
            mockClient = new Mock<ISynchronousClient>();
            mockAsynchronousClient = new Mock<IAsynchronousClient>();
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://messaging.bandwidth.com/api/v2";
            fakeConfiguration.Username = "username";
            fakeConfiguration.Password = "password";
            instance = new MediaApi(mockClient.Object, mockAsynchronousClient.Object, fakeConfiguration);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MediaApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<MediaApi>(instance);
        }

        /// <summary>
        /// Test DeleteMedia
        /// </summary>
        [Fact]
        public void DeleteMediaTest()
        {
            string accountId = "9900000";
            string mediaId = "14762070468292kw2fuqty55yp2b2/0/bw.png";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Delete<Object>("/users/{accountId}/media/{mediaId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.DeleteMediaWithHttpInfo(accountId, mediaId);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        /// <summary>
        /// Test GetMedia
        /// </summary>
        [Fact]
        public void GetMediaTest()
        {
            string accountId = "9900000";
            string mediaId = "14762070468292kw2fuqty55yp2b2/0/bw.png";
            string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string relativePath = "../../../Fixtures/csharp_cat.jpeg";
            string filePath = Path.Combine(baseDirectory, relativePath);
            System.IO.Stream body = new System.IO.FileStream(filePath, FileMode.Open);

            var apiResponse = new ApiResponse<System.IO.Stream>(HttpStatusCode.OK, body);
            mockClient.Setup(x => x.Get<System.IO.Stream>("/users/{accountId}/media/{mediaId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.GetMediaWithHttpInfo(accountId, mediaId);

            Assert.IsAssignableFrom<ApiResponse<System.IO.Stream>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        /// <summary>
        /// Test ListMedia
        /// </summary>
        [Fact]
        public void ListMediaTest()
        {
            string accountId = "9900000";
            Media media = new Media(content: "content", contentLength: 1, mediaName: "test");
            List<Media> mediaList = new List<Media>() { media };

            var apiResponse = new ApiResponse<List<Media>>(HttpStatusCode.OK, mediaList);
            mockClient.Setup(x => x.Get<List<Media>>("/users/{accountId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.ListMediaWithHttpInfo(accountId);

            Assert.IsType<ApiResponse<List<Media>>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        /// <summary>
        /// Test UploadMedia
        /// </summary>
        [Fact]
        public void UploadMediaTest()
        {
            string accountId = "9900000";
            string mediaId = "14762070468292kw2fuqty55yp2b2/0/bw.png";
            string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string relativePath = "../../../Fixtures/csharp_cat.jpeg";
            string filePath = Path.Combine(baseDirectory, relativePath);
            System.IO.Stream body = new System.IO.FileStream(filePath, FileMode.Open);
            string contentType = "image/jpeg";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Put<Object>("/users/{accountId}/media/{mediaId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.UploadMediaWithHttpInfo(accountId, mediaId, body, contentType);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }
    }
}
