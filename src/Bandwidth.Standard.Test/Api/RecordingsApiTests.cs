/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Moq;
using System.Net;

namespace Bandwidth.Standard.Test.Api
{
    /// <summary>
    ///  Class for testing RecordingsApi
    /// </summary>
    public class RecordingsApiTests : IDisposable
    {
        private RecordingsApi instance;
        private Mock<ISynchronousClient> mockClient;
        private Mock<IAsynchronousClient> mockAsynchronousClient;
        private Configuration fakeConfiguration;

        public RecordingsApiTests()
        {
            mockClient = new Mock<ISynchronousClient>();
            mockAsynchronousClient = new Mock<IAsynchronousClient>();
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://voice.bandwidth.com/api/v2";
            fakeConfiguration.Username = "username";
            fakeConfiguration.Password = "password";
            instance = new RecordingsApi(mockClient.Object, mockAsynchronousClient.Object, fakeConfiguration);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecordingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<RecordingsApi>(instance);
        }

        /// <summary>
        /// Test DeleteCallTranscription
        /// </summary>
        [Fact]
        public void DeleteCallTranscriptionTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.DeleteCallTranscriptionWithHttpInfo(accountId, callId, recordingId);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        /// <summary>
        /// Test Unauthorized DeleteCallTranscription
        /// </summary>
        [Fact]
        public void DeleteCallTranscriptionUnauthorizedRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DeleteCallTranscriptionWithHttpInfo(accountId, callId, recordingId));

            Assert.Equal("Error calling DeleteCallTranscription: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        /// Test Forbidden DeleteCallTranscription
        /// </summary>
        [Fact]
        public void DeleteCallTranscriptionForbiddenRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            fakeConfiguration.Username = "ForbiddenUsername";
            fakeConfiguration.Password = "ForbiddenPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DeleteCallTranscriptionWithHttpInfo(accountId, callId, recordingId));

            Assert.Equal("Error calling DeleteCallTranscription: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }

        /// <summary>
        /// Test DeleteRecording
        /// </summary>
        [Fact]
        public void DeleteRecordingTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.DeleteRecordingWithHttpInfo(accountId, callId, recordingId);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        /// <summary>
        /// Test Unauthorized DeleteRecording
        /// </summary>
        [Fact]
        public void DeleteRecordingUnauthorizedRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DeleteRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling DeleteRecording: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        } 

        /// <summary>
        /// Test forbidden DeleteRecording
        /// </summary>
        [Fact]
        public void DeleteRecordingForbiddenRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            fakeConfiguration.Username = "forbiddenUsername";
            fakeConfiguration.Password = "forbiddenPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DeleteRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling DeleteRecording: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        } 

        /// <summary>
        /// Test DeleteRecordingMedia
        /// </summary>
        [Fact]
        public void DeleteRecordingMediaTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.DeleteRecordingMediaWithHttpInfo(accountId, callId, recordingId);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        /// <summary>
        /// Test Unauthorized DeleteRecordingMedia
        /// </summary>
        [Fact]
        public void DeleteRecordingMediaUnauthorizedRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d8";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d8";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DeleteRecordingMediaWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling DeleteRecordingMedia: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        /// Test forbidden DeleteRecordingMedia
        /// </summary> 
        [Fact]
        public void DeleteRecordingMediaForbiddenRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d8";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d8";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Delete<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DeleteRecordingMediaWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling DeleteRecordingMedia: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }

        /// <summary>
        /// Test DownloadCallRecording
        /// </summary>
        [Fact]
        public void DownloadCallRecordingTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string relativePath = "../../../Fixtures/csharp_test_recording.wav";
            string filePath = Path.Combine(baseDirectory, relativePath);
            System.IO.Stream body = new System.IO.FileStream(filePath, FileMode.Open);

            var apiResponse = new ApiResponse<System.IO.Stream>(HttpStatusCode.OK, body);
            mockClient.Setup(x => x.Get<System.IO.Stream>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.DownloadCallRecordingWithHttpInfo(accountId, callId, recordingId);

            Assert.IsAssignableFrom<ApiResponse<System.IO.Stream>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            body.Close();
        }

        /// <summary>
        /// Test Unauthorized DownloadCallRecording
        /// </summary>
        [Fact]
        public void DownloadCallRecordingUnauthorizedRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b21-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b21-b22865662d85";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<System.IO.Stream>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Get<System.IO.Stream>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DownloadCallRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling DownloadCallRecording: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }


        /// <summary>
        /// Test forbidden DownloadCallRecording
        /// </summary>
        [Fact]
        public void DownloadCallRecordingForbiddenRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a-b215-b22865662d85";
            fakeConfiguration.Username = "forbiddenUsername";
            fakeConfiguration.Password = "forbiddenPassword";

            var apiResponse = new ApiResponse<System.IO.Stream>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Get<System.IO.Stream>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/media", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.DownloadCallRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling DownloadCallRecording: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }

        /// <summary>
        /// Test GetCallRecording
        /// </summary>
        [Fact]
        public void GetCallRecordingTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            CallRecordingMetadata callRecordingMetadata = new CallRecordingMetadata(
                applicationId: "04e88489-df02-4e34-a0ee-27a91849555f",
                accountId: "920012",
                callId: "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                parentCallId: "c-95ac8d6e-1a31c52e-b38f-4198-93c1-51633ec68f8d",
                recordingId: "r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833",
                to: "+15555555555",
                from: "+15555555555",
                transferCallerId: "+15555555555",
                transferTo: "+15555555555",
                duration: "PT13.67S",
                direction: CallDirectionEnum.Inbound,
                channels: 1,
                startTime: new DateTime(2022, 06, 21, 19, 13, 21, DateTimeKind.Utc),
                endTime: new DateTime(2022, 06, 21, 19, 13, 21, DateTimeKind.Utc),
                fileFormat: FileFormatEnum.Wav,
                status: "completed",
                mediaUrl: "https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media",
                transcription: new TranscriptionMetadata(
                    id: "t-387bd648-18f3-4823-9d16-746bca0003c9",
                    status: "completed",
                    completedTime: "2022-06-13T18:46:29.715Z",
                    url: "https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/recordings/r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/transcription"
                )
            );

            var apiResponse = new ApiResponse<CallRecordingMetadata>(HttpStatusCode.OK, callRecordingMetadata);
            mockClient.Setup(x => x.Get<CallRecordingMetadata>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.GetCallRecordingWithHttpInfo(accountId, callId, recordingId);

            Assert.IsType<ApiResponse<CallRecordingMetadata>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        /// <summary>
        /// Test GetCallRecording not Found
        ///</summary>
        [Fact]
        public void GetCallRecordingNotFound()
        {
            string accountId = "9900000";
            string callId = "not a call id";
            string recordingId = "not a recording id";

            var apiResponse = new ApiResponse<CallRecordingMetadata>(HttpStatusCode.NotFound, null);
            mockClient.Setup(x => x.Get<CallRecordingMetadata>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.GetCallRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling GetCallRecording: ", Exception.Message);
            Assert.Equal(404, Exception.ErrorCode);
        } 

        /// <summary>
        /// Test Unauthorized GetCallRecording
        /// </summary>
        [Fact]
        public void GetCallRecordingUnauthorizedRequestTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<CallRecordingMetadata>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Get<CallRecordingMetadata>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.GetCallRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling GetCallRecording: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        ///  Test forbidden GetCallRecording
        /// </summary>
        [Fact]
        public void GetCallRecordingForbiddenRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            fakeConfiguration.Username = "forbiddenUsername";
            fakeConfiguration.Password = "forbiddenPassword";

            var apiResponse = new ApiResponse<CallRecordingMetadata>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Get<CallRecordingMetadata>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.GetCallRecordingWithHttpInfo(accountId, callId, recordingId));
            
            Assert.Equal("Error calling GetCallRecording: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }

        /// <summary>
        /// Test GetCallTranscription
        /// </summary>
        [Fact]
        public void GetCallTranscriptionTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            Transcription transcription = new Transcription(text: "Nice talking to you, friend!", confidence: .9);
            TranscriptionList transcriptionList = new TranscriptionList(transcripts: new List<Transcription> { transcription } );

            var apiResponse = new ApiResponse<TranscriptionList>(HttpStatusCode.OK, transcriptionList);
            mockClient.Setup(x => x.Get<TranscriptionList>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.GetCallTranscriptionWithHttpInfo(accountId, callId, recordingId);

            Assert.IsType<ApiResponse<TranscriptionList>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        /// <summary>
        /// Test ListAccountCallRecordings
        /// </summary>
        [Fact]
        public void ListAccountCallRecordingsTest()
        {
            string accountId = "9900000";
            CallRecordingMetadata callRecordingMetadata = new CallRecordingMetadata(
                applicationId: "04e88489-df02-4e34-a0ee-27a91849555f",
                accountId: "920012",
                callId: "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                parentCallId: "c-95ac8d6e-1a31c52e-b38f-4198-93c1-51633ec68f8d",
                recordingId: "r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833",
                to: "+15555555555",
                from: "+15555555555",
                transferCallerId: "+15555555555",
                transferTo: "+15555555555",
                duration: "PT13.67S",
                direction: CallDirectionEnum.Inbound,
                channels: 1,
                startTime: new DateTime(2022, 06, 21, 19, 13, 21, DateTimeKind.Utc),
                endTime: new DateTime(2022, 06, 21, 19, 13, 21, DateTimeKind.Utc),
                fileFormat: FileFormatEnum.Wav,
                status: "completed",
                mediaUrl: "https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media",
                transcription: new TranscriptionMetadata(
                    id: "t-387bd648-18f3-4823-9d16-746bca0003c9",
                    status: "completed",
                    completedTime: "2022-06-13T18:46:29.715Z",
                    url:"https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/recordings/r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/transcription"
                )
            );

            var apiResponse = new ApiResponse<List<CallRecordingMetadata>>(HttpStatusCode.OK, new List<CallRecordingMetadata>() { callRecordingMetadata });
            mockClient.Setup(x => x.Get<List<CallRecordingMetadata>>("/accounts/{accountId}/recordings", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.ListAccountCallRecordingsWithHttpInfo(
                accountId: accountId,
                to: "+19195551234",
                from: "+19195554321",
                minStartTime: "2022-06-21T19:13:21Z", 
                maxStartTime: "2022-06-21T19:13:21Z"
            );

            Assert.IsType<ApiResponse<List<CallRecordingMetadata>>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }

        /// <summary>
        /// Test Unauthorized ListAccountCallRecordings
        /// </summary>
        [Fact]
        public void ListAccountCallRecordingsUnauthorizedRequestTest()
        {
            string accountId = "9900000";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<List<CallRecordingMetadata>>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Get<List<CallRecordingMetadata>>("/accounts/{accountId}/recordings", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.ListAccountCallRecordingsWithHttpInfo(
                accountId: accountId,
                to: "+19195551234",
                from: "+19195554321",
                minStartTime: "2022-06-21T19:13:21Z", 
                maxStartTime: "2022-06-21T19:13:21Z"
            ));

            Assert.Equal("Error calling ListAccountCallRecordings: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        /// Test forbidden ListAccountCallRecordings
        /// </summary>
        [Fact]
        public void ListAccountCallRecordingsForbiddenRequestTest()
        {
            string accountId = "9900000";

            var apiResponse = new ApiResponse<List<CallRecordingMetadata>>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Get<List<CallRecordingMetadata>>("/accounts/{accountId}/recordings", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.ListAccountCallRecordingsWithHttpInfo(
                accountId: accountId,
                to: "+19195551234",
                from: "+19195554321",
                minStartTime: "2022-06-21T19:13:21Z", 
                maxStartTime: "2022-06-21T19:13:21Z"
            ));

            Assert.Equal("Error calling ListAccountCallRecordings: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }


        /// <summary>
        /// Test ListCallRecordings
        /// </summary>
        [Fact]
        public void ListCallRecordingsTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            CallRecordingMetadata callRecordingMetadata = new CallRecordingMetadata(
                applicationId: "04e88489-df02-4e34-a0ee-27a91849555f",
                accountId: "920012",
                callId: "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85",
                parentCallId: "c-95ac8d6e-1a31c52e-b38f-4198-93c1-51633ec68f8d",
                recordingId: "r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833",
                to: "+15555555555",
                from: "+15555555555",
                transferCallerId: "+15555555555",
                transferTo: "+15555555555",
                duration: "PT13.67S",
                direction: CallDirectionEnum.Inbound,
                channels: 1,
                startTime: new DateTime(2022, 06, 21, 19, 13, 21, DateTimeKind.Utc),
                endTime: new DateTime(2022, 06, 21, 19, 13, 21, DateTimeKind.Utc),
                fileFormat: FileFormatEnum.Wav,
                status: "completed",
                mediaUrl: "https://voice.bandwidth.com/api/v2/accounts/9900000/conferences/conf-fe23a767-a75a5b77-20c5-4cca-b581-cbbf0776eca9/recordings/r-fbe05094-9fd2afe9-bf5b-4c68-820a-41a01c1c5833/media",
                transcription: new TranscriptionMetadata(
                    id: "t-387bd648-18f3-4823-9d16-746bca0003c9",
                    status: "completed",
                    completedTime: "2022-06-13T18:46:29.715Z",
                    url: "https://voice.bandwidth.com/api/v2/accounts/9900000/calls/c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/recordings/r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85/transcription"
                )
            );

            var apiResponse = new ApiResponse<List<CallRecordingMetadata>>(HttpStatusCode.OK, new List<CallRecordingMetadata>() { callRecordingMetadata });
            mockClient.Setup(x => x.Get<List<CallRecordingMetadata>>("/accounts/{accountId}/calls/{callId}/recordings", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.ListCallRecordingsWithHttpInfo(accountId, callId);

            Assert.IsType<ApiResponse<List<CallRecordingMetadata>>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);

        }

        /// <summary>
        /// Test TranscribeCallRecording
        /// </summary>
        [Fact]
        public void TranscribeCallRecordingTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            TranscribeRecording transcribeRecording = new TranscribeRecording(
                callbackUrl: "https://myServer.example/bandwidth/webhooks/transcriptionAvailable",
                callbackMethod: CallbackMethodEnum.POST,
                username: "mySecretUsername",
                password: "mySecretPassword",
                tag: "exampleTag",
                callbackTimeout: 15,
                detectLanguage: true
            );

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.NoContent, null);
            mockClient.Setup(x => x.Post<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.TranscribeCallRecordingWithHttpInfo(accountId, callId, recordingId, transcribeRecording);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.NoContent, response.StatusCode);
        }

        /// <summary>
        /// Test Unauthorized TranscribeCallRecording
        /// </summary>
        [Fact]
        public void TranscribeCallRecordingUnauthorizedRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            TranscribeRecording transcribeRecording = new TranscribeRecording(
                callbackUrl: "https://myServer.example/bandwidth/webhooks/transcriptionAvailable",
                callbackMethod: CallbackMethodEnum.POST,
                username: "mySecretUsername",
                password: "mySecretPassword",
                tag: "exampleTag",
                callbackTimeout: 15,
                detectLanguage: true
            );
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Post<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.TranscribeCallRecordingWithHttpInfo(accountId, callId, recordingId, transcribeRecording));

            Assert.Equal("Error calling TranscribeCallRecording: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        /// Test forbidden TranscribeCallRecording
        /// </summary>
        [Fact]
        public void TranscribeCallRecordingForbiddenRequest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            string recordingId = "r-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            TranscribeRecording transcribeRecording = new TranscribeRecording(
                callbackUrl: "https://myServer.example/bandwidth/webhooks/transcriptionAvailable",
                callbackMethod: CallbackMethodEnum.POST,
                username: "mySecretUsername",
                password: "mySecretPassword",
                tag: "exampleTag",
                callbackTimeout: 15,
                detectLanguage: true
            );
            fakeConfiguration.Username = "forbiddenUsername";
            fakeConfiguration.Password = "forbiddenPassword";

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Post<Object>("/accounts/{accountId}/calls/{callId}/recordings/{recordingId}/transcription", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.TranscribeCallRecordingWithHttpInfo(accountId, callId, recordingId, transcribeRecording));

            Assert.Equal("Error calling TranscribeCallRecording: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }

        /// <summary>
        /// Test UpdateCallRecordingState
        /// </summary>
        [Fact]
        public void UpdateCallRecordingStateTest()
        {
            string accountId = "9900000";
            string callId = "c-15ac29a2-1331029c-2cb0-4a07-b215-b22865662d85";
            UpdateCallRecording updateCallRecording = new UpdateCallRecording(RecordingStateEnum.Paused);

            var apiResponse = new ApiResponse<Object>(HttpStatusCode.OK, null);
            mockClient.Setup(x => x.Put<Object>("/accounts/{accountId}/calls/{callId}/recording", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.UpdateCallRecordingStateWithHttpInfo(accountId, callId, updateCallRecording);

            Assert.IsType<ApiResponse<Object>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
        }
    }
}
