/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
// uncomment below to import models
//using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Test.Api
{
    /// <summary>
    ///  Class for testing RecordingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RecordingsApiTests : IDisposable
    {
        private RecordingsApi instance;

        public RecordingsApiTests()
        {
            instance = new RecordingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecordingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' RecordingsApi
            //Assert.IsType<RecordingsApi>(instance);
        }

        /// <summary>
        /// Test DeleteCallTranscription
        /// </summary>
        [Fact]
        public void DeleteCallTranscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //instance.DeleteCallTranscription(accountId, callId, recordingId);
        }

        /// <summary>
        /// Test DeleteRecording
        /// </summary>
        [Fact]
        public void DeleteRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //instance.DeleteRecording(accountId, callId, recordingId);
        }

        /// <summary>
        /// Test DeleteRecordingMedia
        /// </summary>
        [Fact]
        public void DeleteRecordingMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //instance.DeleteRecordingMedia(accountId, callId, recordingId);
        }

        /// <summary>
        /// Test DownloadCallRecording
        /// </summary>
        [Fact]
        public void DownloadCallRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //var response = instance.DownloadCallRecording(accountId, callId, recordingId);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetCallRecording
        /// </summary>
        [Fact]
        public void GetCallRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //var response = instance.GetCallRecording(accountId, callId, recordingId);
            //Assert.IsType<CallRecordingMetadata>(response);
        }

        /// <summary>
        /// Test GetCallTranscription
        /// </summary>
        [Fact]
        public void GetCallTranscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //var response = instance.GetCallTranscription(accountId, callId, recordingId);
            //Assert.IsType<TranscriptionList>(response);
        }

        /// <summary>
        /// Test ListAccountCallRecordings
        /// </summary>
        [Fact]
        public void ListAccountCallRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string to = null;
            //string from = null;
            //string minStartTime = null;
            //string maxStartTime = null;
            //var response = instance.ListAccountCallRecordings(accountId, to, from, minStartTime, maxStartTime);
            //Assert.IsType<List<CallRecordingMetadata>>(response);
        }

        /// <summary>
        /// Test ListCallRecordings
        /// </summary>
        [Fact]
        public void ListCallRecordingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //var response = instance.ListCallRecordings(accountId, callId);
            //Assert.IsType<List<CallRecordingMetadata>>(response);
        }

        /// <summary>
        /// Test TranscribeCallRecording
        /// </summary>
        [Fact]
        public void TranscribeCallRecordingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //string recordingId = null;
            //TranscribeRecording transcribeRecording = null;
            //instance.TranscribeCallRecording(accountId, callId, recordingId, transcribeRecording);
        }

        /// <summary>
        /// Test UpdateCallRecordingState
        /// </summary>
        [Fact]
        public void UpdateCallRecordingStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string accountId = null;
            //string callId = null;
            //UpdateCallRecording updateCallRecording = null;
            //instance.UpdateCallRecordingState(accountId, callId, updateCallRecording);
        }
    }
}
