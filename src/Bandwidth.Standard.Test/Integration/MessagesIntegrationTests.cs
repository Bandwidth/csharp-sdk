
 /* Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Moq;
using System.Net;

namespace Bandwidth.Standard.Test.Integration
{
    /// <summary>
    ///  Class for testing MessagesApi
    /// </summary>
    public class MessagesIntegrationTests : IDisposable
    {
        private MessagesApi instance;
        private MessagesApi unauthorizedInstance;
        private Configuration fakeConfiguration;
        private string accountId;
        private MessageRequest messageRequest;

        public MessagesIntegrationTests()
        {
            // API Client
            accountId = Environment.GetEnvironmentVariable("BW_ACCOUNT_ID");
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://messaging.bandwidth.com/api/v2";
            fakeConfiguration.Username = Environment.GetEnvironmentVariable("BW_USERNAME");
            fakeConfiguration.Password = Environment.GetEnvironmentVariable("BW_PASSWORD");
            instance = new MessagesApi(fakeConfiguration);

            // Unauthorized API Client
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://messaging.bandwidth.com/api/v2";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";
            unauthorizedInstance = new MessagesApi(fakeConfiguration);

            // Message Request
            messageRequest = new MessageRequest(
                applicationId: Environment.GetEnvironmentVariable("BW_MESSAGING_APPLICATION_ID"),
                to: new List<string> {Environment.GetEnvironmentVariable("USER_NUMBER") },
                from: Environment.GetEnvironmentVariable("BW_NUMBER"),
                text: "c# integration test",
                media: new List<string> { "https://cdn2.thecatapi.com/images/MTY3ODIyMQ.jpg" },
                tag: "c# integration test",
                priority: PriorityEnum.Default
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MessagesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<MessagesApi>(instance);
        }

        /// <summary>
        /// Test CreateMessage
        /// </summary>
        [Fact]
        public void CreateMessageTest()
        {
            var response = instance.CreateMessageWithHttpInfo(accountId, messageRequest);
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);

            var message = response.Data;

            Assert.NotNull(message.ApplicationId);
            Assert.NotNull(message.To);
            Assert.NotNull(message.From);
            Assert.NotNull(message.Owner);
            Assert.NotNull(message.Text);
            Assert.NotNull(message.Media);
            Assert.NotNull(message.Tag);
            Assert.IsType<PriorityEnum>(message.Priority);
            Assert.NotNull(message.Priority);
            Assert.Equal(1, message.SegmentCount);
            Assert.IsType<DateTime>(message.Time);

        }

        /// <summary>
        /// Test failed CreateMessage Request
        /// </summary>
        [Fact]
        public void CreateMessageBadRequest()
        {
            messageRequest.ApplicationId = null; // Bad Request

            ApiException Exception = Assert.Throws<ApiException>(() => instance.CreateMessage(accountId, messageRequest));
            Assert.Equal(400, Exception.ErrorCode); // no exception thrown
        }

        /// <summary>
        /// Test Unauthorized CreateMessage Request
        /// </summary>
        [Fact]
        public void CreateMessageUnauthorizedRequest()
        {
            ApiException Exception = Assert.Throws<ApiException>(() => unauthorizedInstance.CreateMessage(accountId, messageRequest));
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        /// Test Create Message invalid media
        /// </summary>
        [Fact]
        public void CreateMessageInvalidMedia()
        {
            messageRequest.Media = new List<string> { "not media" }; // Bad Request

            ApiException Exception = Assert.Throws<ApiException>(() => instance.CreateMessageWithHttpInfo(accountId, messageRequest));
            Assert.Equal(400, Exception.ErrorCode);
        }

        /// <summary>
        /// Test ListMessages
        /// </summary>
        [Fact]
        public void ListMessagesTest()
        {
            var response = instance.ListMessagesWithHttpInfo(
                accountId: accountId,
                messageDirection: ListMessageDirectionEnum.OUTBOUND,
                messageStatus: MessageStatusEnum.DELIVERED,
                messageType: MessageTypeEnum.Sms
            );

            Assert.IsType<ApiResponse<MessagesList>>(response);
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotEqual(0, response.Data.TotalCount);
            Assert.IsType<List<ListMessageItem>>(response.Data.Messages);
            Assert.IsType<ListMessageItem>(response.Data.Messages[0]);

            var message = response.Data.Messages[0];

            Assert.Equal(accountId, message.AccountId);
            Assert.Matches("^\\+[1-9]\\d{1,14}$", message.DestinationTn);
            Assert.Equal(ListMessageDirectionEnum.OUTBOUND, message.MessageDirection);
            Assert.Matches("^.+$", message.MessageId);
            Assert.IsType<MessageStatusEnum>(message.MessageStatus);
            Assert.IsType<MessageTypeEnum>(message.MessageType);
            Assert.NotEqual(0, message.SegmentCount);
            Assert.Matches("^\\+[1-9]\\d{1,14}$", message.SourceTn);
            Assert.IsType<DateTime>(message.ReceiveTime);
        }

        /// <summary>
        /// Test failed ListMessages Request
        /// </summary>
        [Fact]
        public void ListMessagesBadRequest()
        {
            ApiException Exception = Assert.Throws<ApiException>(() => instance.ListMessages(
                accountId: accountId
            ));

            Assert.Equal(400, Exception.ErrorCode);
        }

        /// <summary>
        /// Test Unauthorized ListMessages Request
        /// </summary>
        [Fact]
        public void ListMessagesUnauthorizedRequest()
        {
            ApiException Exception = Assert.Throws<ApiException>(() => unauthorizedInstance.ListMessages(
                accountId: accountId
            ));

            Assert.Equal(401, Exception.ErrorCode);
        }
    }
}
