/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Moq;
using System.Net;

namespace Bandwidth.Standard.Test.Integration
{
    /// <summary>
    ///  Class for testing MediaApi
    /// </summary>
    public class MediaIntegrationTests : IDisposable
    {
        private MediaApi instance;
        private MediaApi unauthorizedInstance;
        private Configuration fakeConfiguration;
        private string accountId;
        private string mediaId;
        private System.IO.Stream mediaBody;
        private string contentType;


        public MediaIntegrationTests()
        {

            mediaId = $"text-media-id-{Guid.NewGuid()}";
            //API Client
            accountId = Environment.GetEnvironmentVariable("BW_ACCOUNT_ID");
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://voice.bandwidth.com/api/v2";
            fakeConfiguration.Username = Environment.GetEnvironmentVariable("BW_USERNAME");
            fakeConfiguration.Password = Environment.GetEnvironmentVariable("BW_PASSWORD");
            instance = new MediaApi(fakeConfiguration);


            // Unauthorized API Client
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://messaging.bandwidth.com/api/v2";
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";
            unauthorizedInstance = new MediaApi(fakeConfiguration);

            // Create a media file to use for testing

            string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string relativePath = "../../../Fixtures/csharp_cat.jpeg";
            string filePath = Path.Combine(baseDirectory, relativePath);
            mediaBody = new System.IO.FileStream(filePath, FileMode.Open);
            contentType = "image/jpeg";
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MediaApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<MediaApi>(instance);
        }


        /// <summary>
        /// Test Upload Media
        /// </summary>
        [Fact]
        public void UploadMediaTest()
        {
            var responseWithHttpInfo = instance.UploadMediaWithHttpInfo(accountId, mediaId, mediaBody, contentType);

            Assert.IsType<ApiResponse<Object>>(responseWithHttpInfo);
            Assert.Equal(HttpStatusCode.NoContent, responseWithHttpInfo.StatusCode);

            instance.UploadMedia(accountId, mediaId, mediaBody, contentType);
            mediaBody.Close();
        }

        /// <summary>
        /// Test List Media
        /// </summary>
        [Fact]
        public void ListMediaTest()
        {
            var responseWithHttpInfo = instance.ListMediaWithHttpInfo(accountId);
            Assert.Equal(HttpStatusCode.OK, responseWithHttpInfo.StatusCode);

            var response = instance.ListMedia(accountId);
            Assert.IsType<List<Media>>(response);
            Assert.IsType<Media>(response[0]);
        }

        /// <summary>
        /// Test Get Media
        /// </summary>
        [Fact]
        public void GetMediaTest()
        {  
            var uploadResponse = instance.UploadMediaWithHttpInfo(accountId, mediaId, mediaBody, contentType);

            var responseWithHttpInfo = instance.GetMediaWithHttpInfo(accountId, mediaId);
            Assert.Equal(HttpStatusCode.OK, responseWithHttpInfo.StatusCode);

            var response = instance.GetMedia(accountId, mediaId);
            Assert.IsAssignableFrom<System.IO.Stream>(response);
            mediaBody.Close();
        }

        /// <summary>
        /// Test Delete Media
        /// </summary>
        [Fact]
        public void DeleteMediaTest()
        {
            var uploadResponse = instance.UploadMediaWithHttpInfo(accountId, mediaId, mediaBody, contentType);

            var responseWithHttpInfo = instance.DeleteMediaWithHttpInfo(accountId, mediaId);
            Assert.Equal(HttpStatusCode.NoContent, responseWithHttpInfo.StatusCode);

            instance.DeleteMedia(accountId, mediaId);
            mediaBody.Close();
        }

        /// <summary>
        /// Test Get media with Bandwidth Ids
        /// </summary>
        [Fact]
        public void getMediaWithBandwidthIdsTest()
        {
            // use a nonexistent mediaId - results in a 404
            mediaId = "abcd1234-e5f6-1111-2222-3456ghi7890/image123456.jpg";

            ApiException exception = Assert.Throws<ApiException>(() => instance.GetMediaWithHttpInfo(accountId, mediaId));
            Assert.Equal(404, exception.ErrorCode);
        }
    }
}
