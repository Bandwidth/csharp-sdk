using System;
using System.Net;
using System.Collections.Generic;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Test.Smoke
{
    /// <summary>
    ///  Class for testing MultiChannelApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MultiChannelApiTests : IDisposable
    {
        private MultiChannelApi instance;
        private string accountId;
        private Configuration configuration;

        public MultiChannelApiTests()
        {
            accountId = Environment.GetEnvironmentVariable("BW_ACCOUNT_ID");

            // Authorized API Client
            configuration = new Configuration();
            configuration.Username = Environment.GetEnvironmentVariable("BW_USERNAME");
            configuration.Password = Environment.GetEnvironmentVariable("BW_PASSWORD");
            instance = new MultiChannelApi(configuration);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MultiChannelApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<MultiChannelApi>(instance);
        }

        /// <summary>
        /// Test CreateMultiChannelMessage
        /// </summary>
        [Fact]
        public void CreateMultiChannelMessageTest()
        {
            MultiChannelChannelListObject channelListObject = new MultiChannelChannelListObject(
                from: Environment.GetEnvironmentVariable("BW_NUMBER"),
                applicationId: Environment.GetEnvironmentVariable("BW_MESSAGING_APPLICATION_ID"),
                channel: MultiChannelMessageChannelEnum.RBM,
                content: new MultiChannelChannelListObjectContent(new RbmMessageContentText(text: "Hello World!"))
            );

            MultiChannelMessageRequest multiChannelMessageRequest = new MultiChannelMessageRequest(
                to: Environment.GetEnvironmentVariable("USER_NUMBER"),
                tag: "tag",
                priority: PriorityEnum.High,
                expiration: DateTime.UtcNow.AddMinutes(1),
                channelList: new List<MultiChannelChannelListObject> { channelListObject }
            );

            var response = instance.CreateMultiChannelMessageWithHttpInfo(accountId, multiChannelMessageRequest);
            Assert.IsType<ApiResponse<CreateMultiChannelMessageResponse>>(response);
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);
        }
    }
}
