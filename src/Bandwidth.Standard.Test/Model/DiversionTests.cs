/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing Diversion
    /// </summary>
    public class DiversionTests : IDisposable
    {
        private Diversion instance;

        public DiversionTests()
        {
            instance = new Diversion();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Diversion
        /// </summary>
        [Fact]
        public void DiversionInstanceTest()
        {
            Assert.IsType<Diversion>(instance);
        }


        /// <summary>
        /// Test the property 'Reason'
        /// </summary>
        [Fact]
        public void ReasonTest()
        {
            instance.Reason = "unavailable";
            Assert.IsType<string>(instance.Reason);
            Assert.Equal("unavailable", instance.Reason);
        }
        /// <summary>
        /// Test the property 'Privacy'
        /// </summary>
        [Fact]
        public void PrivacyTest()
        {
            instance.Privacy = "off";
            Assert.IsType<string>(instance.Privacy);
            Assert.Equal("off", instance.Privacy);
        }
        /// <summary>
        /// Test the property 'Screen'
        /// </summary>
        [Fact]
        public void ScreenTest()
        {
            instance.Screen = "no";
            Assert.IsType<string>(instance.Screen);
            Assert.Equal("no", instance.Screen);
        }
        /// <summary>
        /// Test the property 'Counter'
        /// </summary>
        [Fact]
        public void CounterTest()
        {
            instance.Counter = "2";
            Assert.IsType<string>(instance.Counter);
            Assert.Equal("2", instance.Counter);
        }
        /// <summary>
        /// Test the property 'Limit'
        /// </summary>
        [Fact]
        public void LimitTest()
        {
            instance.Limit = "3";
            Assert.IsType<string>(instance.Limit);
            Assert.Equal("3", instance.Limit);
        }
        /// <summary>
        /// Test the property 'Unknown'
        /// </summary>
        [Fact]
        public void UnknownTest()
        {
            instance.Unknown = "unknownValue";
            Assert.IsType<string>(instance.Unknown);
            Assert.Equal("unknownValue", instance.Unknown);
        }
        /// <summary>
        /// Test the property 'OrigTo'
        /// </summary>
        [Fact]
        public void OrigToTest()
        {
            instance.OrigTo = "+15558884444";
            Assert.IsType<string>(instance.OrigTo);
            Assert.Equal("+15558884444", instance.OrigTo);
        }

    }

}
