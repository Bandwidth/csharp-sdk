/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing MachineDetectionConfiguration
    /// </summary>
    public class MachineDetectionConfigurationTests : IDisposable
    {
        private MachineDetectionConfiguration instance;

        public MachineDetectionConfigurationTests()
        {
            instance = new MachineDetectionConfiguration();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MachineDetectionConfiguration
        /// </summary>
        [Fact]
        public void MachineDetectionConfigurationInstanceTest()
        {
            Assert.IsType<MachineDetectionConfiguration>(instance);
        }


        /// <summary>
        /// Test the property 'Mode'
        /// </summary>
        [Fact]
        public void ModeTest()
        {
            instance.Mode = MachineDetectionModeEnum.Sync;
            Assert.IsType<MachineDetectionModeEnum>(instance.Mode);
            Assert.Equal(MachineDetectionModeEnum.Sync, instance.Mode);
        }
        /// <summary>
        /// Test the property 'DetectionTimeout'
        /// </summary>
        [Fact]
        public void DetectionTimeoutTest()
        {
            instance.DetectionTimeout = 15;
            Assert.IsType<double>(instance.DetectionTimeout);
            Assert.Equal(15, instance.DetectionTimeout);
        }
        /// <summary>
        /// Test the property 'SilenceTimeout'
        /// </summary>
        [Fact]
        public void SilenceTimeoutTest()
        {
            instance.SilenceTimeout = 10;
            Assert.IsType<double>(instance.SilenceTimeout);
            Assert.Equal(10, instance.SilenceTimeout);
        }
        /// <summary>
        /// Test the property 'SpeechThreshold'
        /// </summary>
        [Fact]
        public void SpeechThresholdTest()
        {
            instance.SpeechThreshold = 5;
            Assert.IsType<double>(instance.SpeechThreshold);
            Assert.Equal(5, instance.SpeechThreshold);
        }
        /// <summary>
        /// Test the property 'SpeechEndThreshold'
        /// </summary>
        [Fact]
        public void SpeechEndThresholdTest()
        {
            instance.SpeechEndThreshold = 5;
            Assert.IsType<double>(instance.SpeechEndThreshold);
            Assert.Equal(5, instance.SpeechEndThreshold);
        }
        /// <summary>
        /// Test the property 'MachineSpeechEndThreshold'
        /// </summary>
        [Fact]
        public void MachineSpeechEndThresholdTest()
        {
            instance.MachineSpeechEndThreshold = 5;
            Assert.IsType<double>(instance.MachineSpeechEndThreshold);
            Assert.Equal(5, instance.MachineSpeechEndThreshold);
        }
        /// <summary>
        /// Test the property 'DelayResult'
        /// </summary>
        [Fact]
        public void DelayResultTest()
        {
            instance.DelayResult = false;
            Assert.IsType<bool>(instance.DelayResult);
            Assert.Equal(false, instance.DelayResult);
        }
        /// <summary>
        /// Test the property 'CallbackUrl'
        /// </summary>
        [Fact]
        public void CallbackUrlTest()
        {
            instance.CallbackUrl = "https://test.url/";
            Assert.IsType<string>(instance.CallbackUrl);
            Assert.Equal("https://test.url/", instance.CallbackUrl);
        }
        /// <summary>
        /// Test the property 'CallbackMethod'
        /// </summary>
        [Fact]
        public void CallbackMethodTest()
        {
            instance.CallbackMethod = CallbackMethodEnum.POST;
            Assert.IsType<CallbackMethodEnum>(instance.CallbackMethod);
            Assert.Equal(CallbackMethodEnum.POST, instance.CallbackMethod);
        }
        /// <summary>
        /// Test the property 'Username'
        /// </summary>
        [Fact]
        public void UsernameTest()
        {
            instance.Username = "username";
            Assert.IsType<string>(instance.Username);
            Assert.Equal("username", instance.Username);
        }
        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Fact]
        public void PasswordTest()
        {
            instance.Password = "password";
            Assert.IsType<string>(instance.Password);
            Assert.Equal("password", instance.Password);
        }
        /// <summary>
        /// Test the property 'FallbackUrl'
        /// </summary>
        [Fact]
        public void FallbackUrlTest()
        {
            instance.FallbackUrl = "https://fallbackTest.url/";
            Assert.IsType<string>(instance.FallbackUrl);
            Assert.Equal("https://fallbackTest.url/", instance.FallbackUrl);
        }
        /// <summary>
        /// Test the property 'FallbackMethod'
        /// </summary>
        [Fact]
        public void FallbackMethodTest()
        {
            instance.FallbackMethod = CallbackMethodEnum.POST;
            Assert.IsType<CallbackMethodEnum>(instance.FallbackMethod);
            Assert.Equal(CallbackMethodEnum.POST, instance.FallbackMethod);
        }
        /// <summary>
        /// Test the property 'FallbackUsername'
        /// </summary>
        [Fact]
        public void FallbackUsernameTest()
        {
            instance.FallbackUsername = "fallbackUsername";
            Assert.IsType<string>(instance.FallbackUsername);
            Assert.Equal("fallbackUsername", instance.FallbackUsername);
        }
        /// <summary>
        /// Test the property 'FallbackPassword'
        /// </summary>
        [Fact]
        public void FallbackPasswordTest()
        {
            instance.FallbackPassword = "fallbackPassword";
            Assert.IsType<string>(instance.FallbackPassword);
            Assert.Equal("fallbackPassword", instance.FallbackPassword);
        }

    }

}
