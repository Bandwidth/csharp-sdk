/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test
{
    /// <summary>
    ///  Class for testing MessageDeliveredCallback
    /// </summary>
    public class MessageDeliveredCallbackTests
    {
        private MessageDeliveredCallback instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessageDeliveredCallback();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessageDeliveredCallback
        /// </summary>
        [Test]
        public void MessageDeliveredCallbackInstanceTest()
        {
            Assert.IsInstanceOf(typeof(MessageDeliveredCallback), instance);
        }


        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Test]
        public void TimeTest()
        {
            var time = new DateTime(2020, 1, 1, 0, 0, 0);
            instance.Time = time;
            Assert.IsInstanceOf(typeof(DateTime), instance.Time);
            Assert.AreEqual(time, instance.Time);
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            instance.Type = "message-delivered";
            Assert.IsInstanceOf(typeof(string), instance.Type);
            Assert.AreEqual("message-delivered", instance.Type);
        }
        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Test]
        public void ToTest()
        {
            instance.To = "+15557654321";
            Assert.IsInstanceOf(typeof(string), instance.To);
            Assert.AreEqual("+15557654321", instance.To);
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Test]
        public void DescriptionTest()
        {
            instance.Description = "Message delivered to carrier.";
            Assert.IsInstanceOf(typeof(string), instance.Description);
            Assert.AreEqual("Message delivered to carrier.", instance.Description);
        }
        /// <summary>
        /// Test the property 'Message'
        /// </summary>
        [Test]
        public void MessageTest()
        {
            var date = new DateTime(2020, 1, 1);
            var to = new List<string>(){ "+15557654321" };
            var direction = MessageDirectionEnum.In;
            var messageDeliveredCallbackMessage = new MessageDeliveredCallbackMessage("12345","+15553332222","123-abc", date, 1, direction, to, "+15553332222", "Hello world");
            instance.Message = messageDeliveredCallbackMessage;
            Assert.IsInstanceOf(typeof(MessageDeliveredCallbackMessage), instance.Message);
            Assert.AreEqual(messageDeliveredCallbackMessage, instance.Message);
        }
    }
}
