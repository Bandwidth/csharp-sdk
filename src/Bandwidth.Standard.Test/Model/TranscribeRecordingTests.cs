/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing TranscribeRecording
    /// </summary>
    public class TranscribeRecordingTests : IDisposable
    {
        private TranscribeRecording instance;

        public TranscribeRecordingTests()
        {
            instance = new TranscribeRecording();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TranscribeRecording
        /// </summary>
        [Fact]
        public void TranscribeRecordingInstanceTest()
        {
            Assert.IsType<TranscribeRecording>(instance);
        }


        /// <summary>
        /// Test the property 'CallbackUrl'
        /// </summary>
        [Fact]
        public void CallbackUrlTest()
        {
            instance.CallbackUrl = "https://test.url/";
            Assert.IsType<string>(instance.CallbackUrl);
            Assert.Equal("https://test.url/", instance.CallbackUrl);
        }
        /// <summary>
        /// Test the property 'CallbackMethod'
        /// </summary>
        [Fact]
        public void CallbackMethodTest()
        {
            instance.CallbackMethod = CallbackMethodEnum.POST;
            Assert.IsType<CallbackMethodEnum>(instance.CallbackMethod);
            Assert.Equal(CallbackMethodEnum.POST, instance.CallbackMethod);
        }
        /// <summary>
        /// Test the property 'Username'
        /// </summary>
        [Fact]
        public void UsernameTest()
        {
            instance.Username = "username";
            Assert.IsType<string>(instance.Username);
            Assert.Equal("username", instance.Username);
        }
        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Fact]
        public void PasswordTest()
        {
            instance.Password = "password";
            Assert.IsType<string>(instance.Password);
            Assert.Equal("password", instance.Password);
        }
        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Fact]
        public void TagTest()
        {
            instance.Tag = "test";
            Assert.IsType<string>(instance.Tag);
            Assert.Equal("test", instance.Tag);
        }
        /// <summary>
        /// Test the property 'CallbackTimeout'
        /// </summary>
        [Fact]
        public void CallbackTimeoutTest()
        {
            instance.CallbackTimeout = 5.5;
            Assert.IsType<double>(instance.CallbackTimeout);
            Assert.Equal(5.5, instance.CallbackTimeout);
        }
        /// <summary>
        /// Test the property 'DetectLanguage'
        /// </summary>
        [Fact]
        public void DetectLanguageTest()
        {
            instance.DetectLanguage = true;
            Assert.IsType<bool>(instance.DetectLanguage);
            Assert.Equal(true, instance.DetectLanguage);
        }

    }

}
