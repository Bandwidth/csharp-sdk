/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing CallRecordingMetadata
    /// </summary>
    public class CallRecordingMetadataTests : IDisposable
    {
        private CallRecordingMetadata instance;

        public CallRecordingMetadataTests()
        {
            instance = new CallRecordingMetadata();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CallRecordingMetadata
        /// </summary>
        [Fact]
        public void CallRecordingMetadataInstanceTest()
        {
            Assert.IsType<CallRecordingMetadata>(instance);
        }


        /// <summary>
        /// Test the property 'ApplicationId'
        /// </summary>
        [Fact]
        public void ApplicationIdTest()
        {
            instance.ApplicationId = "123-456-abcd";
            Assert.IsType<string>(instance.ApplicationId);
            Assert.Equal("123-456-abcd", instance.ApplicationId);
        }
        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            instance.AccountId = "920000";
            Assert.IsType<string>(instance.AccountId);
            Assert.Equal("920000", instance.AccountId);
        }
        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Fact]
        public void CallIdTest()
        {
            instance.CallId = "c-1234";
            Assert.IsType<string>(instance.CallId);
            Assert.Equal("c-1234", instance.CallId);
        }
        /// <summary>
        /// Test the property 'ParentCallId'
        /// </summary>
        [Fact]
        public void ParentCallIdTest()
        {
            instance.ParentCallId = "c-5678";
            Assert.IsType<string>(instance.ParentCallId);
            Assert.Equal("c-5678", instance.ParentCallId);
        }
        /// <summary>
        /// Test the property 'RecordingId'
        /// </summary>
        [Fact]
        public void RecordingIdTest()
        {
            instance.RecordingId = "r-1234";
            Assert.IsType<string>(instance.RecordingId);
            Assert.Equal("r-1234", instance.RecordingId);
        }
        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            instance.To = "+15557654321";
            Assert.IsType<string>(instance.To);
            Assert.Equal("+15557654321", instance.To);
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            instance.From = "+15551234567";
            Assert.IsType<string>(instance.From);
            Assert.Equal("+15551234567", instance.From);
        }
        /// <summary>
        /// Test the property 'TransferCallerId'
        /// </summary>
        [Fact]
        public void TransferCallerIdTest()
        {
            instance.TransferCallerId = "+15551234567";
            Assert.IsType<string>(instance.TransferCallerId);
            Assert.Equal("+15551234567", instance.TransferCallerId);
        }
        /// <summary>
        /// Test the property 'TransferTo'
        /// </summary>
        [Fact]
        public void TransferToTest()
        {
            instance.TransferTo = "+15557654321";
            Assert.IsType<string>(instance.TransferTo);
            Assert.Equal("+15557654321", instance.TransferTo);
        }
        /// <summary>
        /// Test the property 'Duration'
        /// </summary>
        [Fact]
        public void DurationTest()
        {
            instance.Duration = "PT13.67S";
            Assert.IsType<string>(instance.Duration);
            Assert.Equal("PT13.67S", instance.Duration);
        }
        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Fact]
        public void DirectionTest()
        {
            instance.Direction = CallDirectionEnum.Inbound;
            Assert.IsType<CallDirectionEnum>(instance.Direction);
            Assert.Equal(CallDirectionEnum.Inbound, instance.Direction);
        }
        /// <summary>
        /// Test the property 'Channels'
        /// </summary>
        [Fact]
        public void ChannelsTest()
        {
            instance.Channels = 1;
            Assert.IsType<int>(instance.Channels);
            Assert.Equal(1, instance.Channels);
        }
        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Fact]
        public void StartTimeTest()
        {
            instance.StartTime = new DateTime(2020, 1, 1);
            Assert.IsType<DateTime>(instance.StartTime);
            Assert.Equal(new DateTime(2020, 1, 1), instance.StartTime);
        }
        /// <summary>
        /// Test the property 'EndTime'
        /// </summary>
        [Fact]
        public void EndTimeTest()
        {
            instance.StartTime = new DateTime(2020, 1, 1);
            Assert.IsType<DateTime>(instance.StartTime);
            Assert.Equal(new DateTime(2020, 1, 1), instance.StartTime);
        }
        /// <summary>
        /// Test the property 'FileFormat'
        /// </summary>
        [Fact]
        public void FileFormatTest()
        {
            instance.StartTime = new DateTime(2020, 1, 1);
            Assert.IsType<DateTime>(instance.StartTime);
            Assert.Equal(new DateTime(2020, 1, 1), instance.StartTime);
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            instance.Status = "complete";
            Assert.IsType<string>(instance.Status);
            Assert.Equal("complete", instance.Status);
        }
        /// <summary>
        /// Test the property 'MediaUrl'
        /// </summary>
        [Fact]
        public void MediaUrlTest()
        {
            instance.MediaUrl = "https://test.url/";
            Assert.IsType<string>(instance.MediaUrl);
            Assert.Equal("https://test.url/", instance.MediaUrl);
        }
        /// <summary>
        /// Test the property 'Transcription'
        /// </summary>
        [Fact]
        public void TranscriptionTest()
        {
            System.DateTime dateTime = DateTime.UtcNow;

            instance.Transcription = new RecordingTranscriptionMetadata("t-123", "complete", dateTime, "https://test.url/");
            Assert.IsType<RecordingTranscriptionMetadata>(instance.Transcription);
            Assert.Equal(new RecordingTranscriptionMetadata("t-123", "complete", dateTime, "https://test.url/"), instance.Transcription);
        }

    }

}
