/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing CreateCall
    /// </summary>
    public class CreateCallTests : IDisposable
    {
        private CreateCall instance;

        public CreateCallTests()
        {
            instance = new CreateCall();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CreateCall
        /// </summary>
        [Fact]
        public void CreateCallInstanceTest()
        {
            Assert.IsType<CreateCall>(instance);
        }


        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            instance.To = "+15557654321";
            Assert.IsType<string>(instance.To);
            Assert.Equal("+15557654321", instance.To);
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            instance.From = "+15551234567";
            Assert.IsType<string>(instance.From);
            Assert.Equal("+15551234567", instance.From);
        }
        /// <summary>
        /// Test the property 'Uui'
        /// </summary>
        [Fact]
        public void UuiTest()
        {
            instance.Uui = "1234567890abcdef";
            Assert.IsType<string>(instance.Uui);
            Assert.Equal("1234567890abcdef", instance.Uui);
        }
        /// <summary>
        /// Test the property 'ApplicationId'
        /// </summary>
        [Fact]
        public void ApplicationIdTest()
        {
            instance.ApplicationId = "123-456-abcd";
            Assert.IsType<string>(instance.ApplicationId);
            Assert.Equal("123-456-abcd", instance.ApplicationId);
        }
        /// <summary>
        /// Test the property 'AnswerUrl'
        /// </summary>
        [Fact]
        public void AnswerUrlTest()
        {
            instance.AnswerUrl = "https://test.com";
            Assert.IsType<string>(instance.AnswerUrl);
            Assert.Equal("https://test.com", instance.AnswerUrl);
        }
        /// <summary>
        /// Test the property 'AnswerMethod'
        /// </summary>
        [Fact]
        public void AnswerMethodTest()
        {
            var method = CallbackMethodEnum.POST;
            instance.AnswerMethod = method;
            Assert.IsType<CallbackMethodEnum>(instance.AnswerMethod);
            Assert.Equal(method, instance.AnswerMethod);
        }
        /// <summary>
        /// Test the property 'Username'
        /// </summary>
        [Fact]
        public void UsernameTest()
        {
            instance.Username = "username";
            Assert.IsType<string>(instance.Username);
            Assert.Equal("username", instance.Username);
        }
        /// <summary>
        /// Test the property 'Password'
        /// </summary>
        [Fact]
        public void PasswordTest()
        {
            instance.Password = "password";
            Assert.IsType<string>(instance.Password);
            Assert.Equal("password", instance.Password);
        }
        /// <summary>
        /// Test the property 'AnswerFallbackUrl'
        /// </summary>
        [Fact]
        public void AnswerFallbackUrlTest()
        {
            instance.AnswerFallbackUrl = "https://fallbackTest.com";
            Assert.IsType<string>(instance.AnswerFallbackUrl);
            Assert.Equal("https://fallbackTest.com", instance.AnswerFallbackUrl);
        }
        /// <summary>
        /// Test the property 'AnswerFallbackMethod'
        /// </summary>
        [Fact]
        public void AnswerFallbackMethodTest()
        {
            var method = CallbackMethodEnum.POST;
            instance.AnswerFallbackMethod = method;
            Assert.IsType<CallbackMethodEnum>(instance.AnswerFallbackMethod);
            Assert.Equal(method, instance.AnswerFallbackMethod);
        }
        /// <summary>
        /// Test the property 'FallbackUsername'
        /// </summary>
        [Fact]
        public void FallbackUsernameTest()
        {
            instance.FallbackUsername = "fallbackUsername";
            Assert.IsType<string>(instance.FallbackUsername);
            Assert.Equal("fallbackUsername", instance.FallbackUsername);
        }
        /// <summary>
        /// Test the property 'FallbackPassword'
        /// </summary>
        [Fact]
        public void FallbackPasswordTest()
        {
            instance.FallbackPassword = "fallbackPassword";
            Assert.IsType<string>(instance.FallbackPassword);
            Assert.Equal("fallbackPassword", instance.FallbackPassword);
        }
        /// <summary>
        /// Test the property 'DisconnectUrl'
        /// </summary>
        [Fact]
        public void DisconnectUrlTest()
        {
            instance.DisconnectUrl = "https://disconnectTest.com";
            Assert.IsType<string>(instance.DisconnectUrl);
            Assert.Equal("https://disconnectTest.com", instance.DisconnectUrl);
        }
        /// <summary>
        /// Test the property 'DisconnectMethod'
        /// </summary>
        [Fact]
        public void DisconnectMethodTest()
        {
            var method = CallbackMethodEnum.POST;
            instance.DisconnectMethod = method;
            Assert.IsType<CallbackMethodEnum>(instance.DisconnectMethod);
            Assert.Equal(method, instance.DisconnectMethod);
        }
        /// <summary>
        /// Test the property 'CallTimeout'
        /// </summary>
        [Fact]
        public void CallTimeoutTest()
        {
            instance.CallTimeout = 30;
            Assert.IsType<double?>(instance.CallTimeout);
            Assert.Equal(30, instance.CallTimeout);
        }
        /// <summary>
        /// Test the property 'CallbackTimeout'
        /// </summary>
        [Fact]
        public void CallbackTimeoutTest()
        {
            instance.CallbackTimeout = 15;
            Assert.IsType<double?>(instance.CallbackTimeout);
            Assert.Equal(15, instance.CallbackTimeout);
        }
        /// <summary>
        /// Test the property 'MachineDetection'
        /// </summary>
        [Fact]
        public void MachineDetectionTest()
        {
            var detectionConfiguration = new MachineDetectionConfiguration(mode: MachineDetectionModeEnum.Async, callbackUrl : "https://test.com", callbackMethod: CallbackMethodEnum.POST, username: "username", password: "password", fallbackUrl: "https://fallbackTest.com", fallbackMethod: CallbackMethodEnum.POST, fallbackUsername: "fallbackUsername", fallbackPassword: "fallbackPassword");
            instance.MachineDetection = detectionConfiguration;
            Assert.IsType<MachineDetectionConfiguration>(instance.MachineDetection);
            Assert.Equal(detectionConfiguration, instance.MachineDetection);
        }
        /// <summary>
        /// Test the property 'Priority'
        /// </summary>
        [Fact]
        public void PriorityTest()
        {
            instance.Priority = 1;
            Assert.IsType<int?>(instance.Priority);
            Assert.Equal(1, instance.Priority);
        }
        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Fact]
        public void TagTest()
        {
            instance.Tag = "test";
            Assert.IsType<string>(instance.Tag);
            Assert.Equal("test", instance.Tag);
        }
    }
}
