/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test
{
    /// <summary>
    ///  Class for testing DisconnectCallback
    /// </summary>
    public class DisconnectCallbackTests
    {
        private DisconnectCallback instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DisconnectCallback();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DisconnectCallback
        /// </summary>
        [Test]
        public void DisconnectCallbackInstanceTest()
        {
            Assert.IsInstanceOf(typeof(DisconnectCallback), instance);
        }


        /// <summary>
        /// Test the property 'EventType'
        /// </summary>
        [Test]
        public void EventTypeTest()
        {
            instance.EventType = "bridgeComplete";
            Assert.IsInstanceOf(typeof(string), instance.EventType);
            Assert.AreEqual("bridgeComplete", instance.EventType);
        }
        /// <summary>
        /// Test the property 'EventTime'
        /// </summary>
        [Test]
        public void EventTimeTest()
        {
            var eventTime = new DateTime(2020, 3, 13);
            instance.EventTime = eventTime;
            Assert.IsInstanceOf(typeof(DateTime), instance.EventTime);
            Assert.AreEqual(eventTime, instance.EventTime);
        }
        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Test]
        public void AccountIdTest()
        {
            instance.AccountId = "920000";
            Assert.IsInstanceOf(typeof(string), instance.AccountId);
            Assert.AreEqual("920000", instance.AccountId);
        }
        /// <summary>
        /// Test the property 'ApplicationId'
        /// </summary>
        [Test]
        public void ApplicationIdTest()
        {
            instance.ApplicationId = "123-456-abcd";
            Assert.IsInstanceOf(typeof(string), instance.ApplicationId);
            Assert.AreEqual("123-456-abcd", instance.ApplicationId);
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Test]
        public void FromTest()
        {
            instance.From = "+15551234567";
            Assert.IsInstanceOf(typeof(string), instance.From);
            Assert.AreEqual("+15551234567", instance.From);
        }
        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Test]
        public void ToTest()
        {
            instance.To = "+15557654321";
            Assert.IsInstanceOf(typeof(string), instance.To);
            Assert.AreEqual("+15557654321", instance.To);
        }
        /// <summary>
        /// Test the property 'CallId'
        /// </summary>
        [Test]
        public void CallIdTest()
        {
            instance.CallId = "c-1234";
            Assert.IsInstanceOf(typeof(string), instance.CallId);
            Assert.AreEqual("c-1234", instance.CallId);  
        }
        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Test]
        public void DirectionTest()
        {
            instance.Direction = CallDirectionEnum.Inbound;
            Assert.IsInstanceOf(typeof(CallDirectionEnum), instance.Direction);
            Assert.AreEqual(CallDirectionEnum.Inbound, instance.Direction);
        }
        /// <summary>
        /// Test the property 'CallUrl'
        /// </summary>
        [Test]
        public void CallUrlTest()
        {
            // TODO unit test for the property 'CallUrl'
        }
        /// <summary>
        /// Test the property 'EnqueuedTime'
        /// </summary>
        [Test]
        public void EnqueuedTimeTest()
        {
            // TODO unit test for the property 'EnqueuedTime'
        }
        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Test]
        public void StartTimeTest()
        {
            // TODO unit test for the property 'StartTime'
        }
        /// <summary>
        /// Test the property 'AnswerTime'
        /// </summary>
        [Test]
        public void AnswerTimeTest()
        {
            // TODO unit test for the property 'AnswerTime'
        }
        /// <summary>
        /// Test the property 'EndTime'
        /// </summary>
        [Test]
        public void EndTimeTest()
        {
            // TODO unit test for the property 'EndTime'
        }
        /// <summary>
        /// Test the property 'Cause'
        /// </summary>
        [Test]
        public void CauseTest()
        {
            // TODO unit test for the property 'Cause'
        }
        /// <summary>
        /// Test the property 'ErrorMessage'
        /// </summary>
        [Test]
        public void ErrorMessageTest()
        {
            // TODO unit test for the property 'ErrorMessage'
        }
        /// <summary>
        /// Test the property 'ErrorId'
        /// </summary>
        [Test]
        public void ErrorIdTest()
        {
            // TODO unit test for the property 'ErrorId'
        }
        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Test]
        public void TagTest()
        {
            instance.Tag = "test";
            Assert.IsInstanceOf(typeof(string), instance.Tag);
            Assert.AreEqual("test", instance.Tag);
        }
    }
}
