/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test
{
    /// <summary>
    ///  Class for testing MessageFailedCallbackMessage
    /// </summary>
    public class MessageFailedCallbackMessageTests
    {
        private MessageFailedCallbackMessage instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessageFailedCallbackMessage();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessageFailedCallbackMessage
        /// </summary>
        [Test]
        public void MessageFailedCallbackMessageInstanceTest()
        {
            Assert.IsInstanceOf(typeof(MessageFailedCallbackMessage), instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'Owner'
        /// </summary>
        [Test]
        public void OwnerTest()
        {
            // TODO unit test for the property 'Owner'
        }
        /// <summary>
        /// Test the property 'ApplicationId'
        /// </summary>
        [Test]
        public void ApplicationIdTest()
        {
            instance.ApplicationId = "123-456-abcd";
            Assert.IsInstanceOf<string>(instance.ApplicationId);
            Assert.AreEqual("123-456-abcd", instance.ApplicationId);
        }
        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Test]
        public void TimeTest()
        {
            var time = new DateTime(2020, 1, 1, 0, 0, 0);
            instance.Time = time;
            Assert.IsInstanceOf(typeof(DateTime), instance.Time);
            Assert.AreEqual(time, instance.Time);
        }
        /// <summary>
        /// Test the property 'SegmentCount'
        /// </summary>
        [Test]
        public void SegmentCountTest()
        {
            // TODO unit test for the property 'SegmentCount'
        }
        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Test]
        public void DirectionTest()
        {
            instance.Direction = MessageDirectionEnum.In;
            Assert.IsInstanceOf<MessageDirectionEnum>(instance.Direction);
            Assert.AreEqual(MessageDirectionEnum.In, instance.Direction);
        }
        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Test]
        public void ToTest()
        {
            var to = new List<string>();
            to.Add("+15557654321");
            instance.To = to;
            Assert.IsInstanceOf<List<string>>(instance.To);
            Assert.AreEqual(to, instance.To);
        }
        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Test]
        public void FromTest()
        {
            instance.From = "+15551234567";
            Assert.IsInstanceOf<string>(instance.From);
            Assert.AreEqual("+15551234567", instance.From);
        }
        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Test]
        public void TextTest()
        {
            // TODO unit test for the property 'Text'
        }
        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Test]
        public void TagTest()
        {
            instance.Tag = "test";
            Assert.IsInstanceOf<string>(instance.Tag);
            Assert.AreEqual("test", instance.Tag);
        }
        /// <summary>
        /// Test the property 'Media'
        /// </summary>
        [Test]
        public void MediaTest()
        {
            // TODO unit test for the property 'Media'
        }
        /// <summary>
        /// Test the property 'Priority'
        /// </summary>
        [Test]
        public void PriorityTest()
        {
            // TODO unit test for the property 'Priority'
        }
    }
}
