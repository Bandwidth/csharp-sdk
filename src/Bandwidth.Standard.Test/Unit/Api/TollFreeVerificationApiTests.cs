/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;

namespace Bandwidth.Standard.Test.Unit.Api
{
    /// <summary>
    ///  Class for testing TollFreeVerificationApi
    /// </summary>
    public class TollFreeVerificationApiTests : IDisposable
    {
        private TollFreeVerificationApi instance;
        private Configuration configuration;

        private string accountId = "9900000";
        private string subscriptionId = "test-id-1234";
        private string tfPhoneNumber = "18005551234";

        private WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema;
        private Dictionary<string, dynamic> verification;

        public TollFreeVerificationApiTests()
        {
            configuration = new Configuration();
            // configuration.BasePath = "http://127.0.0.1:4010";
            configuration.Username = Environment.GetEnvironmentVariable("BW_USERNAME");
            configuration.Password = Environment.GetEnvironmentVariable("BW_PASSWORD");
            instance = new TollFreeVerificationApi(configuration);

            webhookSubscriptionRequestSchema = new WebhookSubscriptionRequestSchema(
                basicAuthentication: new TfvBasicAuthentication(
                    username: "username",
                    password: "password"
                ),
                callbackUrl: "https://example.com",
                sharedSecretKey: "shared-secret-key"
            );

            verification = new Dictionary<string, dynamic>
            {
                { "businessAddress", new Address(
                    name: "name",
                    addr1: "addr1",
                    addr2: "addr2",
                    city: "city",
                    state: "state",
                    zip: "zip",
                    url: "url"
                ) },
                { "businessContact", new Contact(
                    firstName: "John",
                    lastName: "Doe",
                    email: "email@email.com",
                    phoneNumber: "+1234567890"
                ) },
                { "messageVolume", 12 },
                { "useCase", "useCase" },
                { "useCaseSummary", "useCaseSummary" },
                { "productionMessageContent", "productionMessageContent" },
                { "optInWorkflow", new OptInWorkflow(
                    description: "description",
                    imageUrls: new List<string> { "imageUrls" }
                ) },
                { "additionalInformation", "additionalInformation" },
                { "isvReseller", "isvReseller" }
            };
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TollFreeVerificationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<TollFreeVerificationApi>(instance);
        }

        /// <summary>
        /// Test CreateWebhookSubscription
        /// </summary>
        [Fact]
        public void CreateWebhookSubscriptionTest()
        {
            // var response = instance.CreateWebhookSubscriptionWithHttpInfo(accountId, webhookSubscriptionRequestSchema);
            // Assert.IsType<WebhookSubscription>(response);
        }

        /// <summary>
        /// Test DeleteWebhookSubscription
        /// </summary>
        [Fact]
        public void DeleteWebhookSubscriptionTest()
        {
            //string accountId = null;
            //string id = null;
            //instance.DeleteWebhookSubscription(accountId, id);
        }

        /// <summary>
        /// Test GetTollFreeVerificationStatus
        /// </summary>
        [Fact]
        public void GetTollFreeVerificationStatusTest()
        {
            //string accountId = null;
            //string phoneNumber = null;
            //var response = instance.GetTollFreeVerificationStatus(accountId, phoneNumber);
            //Assert.IsType<TfvStatus>(response);
        }

        /// <summary>
        /// Test ListTollFreeUseCases
        /// </summary>
        [Fact]
        public void ListTollFreeUseCasesTest()
        {
            //var response = instance.ListTollFreeUseCases();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test ListWebhookSubscriptions
        /// </summary>
        [Fact]
        public void ListWebhookSubscriptionsTest()
        {
            //string accountId = null;
            //var response = instance.ListWebhookSubscriptions(accountId);
            //Assert.IsType<WebhookSubscriptionsListBody>(response);
        }

        /// <summary>
        /// Test RequestTollFreeVerification
        /// </summary>
        [Fact]
        public void RequestTollFreeVerificationTest()
        {
            //string accountId = null;
            //VerificationRequest verificationRequest = null;
            //instance.RequestTollFreeVerification(accountId, verificationRequest);
        }

        /// <summary>
        /// Test UpdateTollFreeVerificationRequest
        /// </summary>
        [Fact]
        public void UpdateTollFreeVerificationRequestTest()
        {
            //string accountId = null;
            //string phoneNumber = null;
            //TfvSubmissionWrapper tfvSubmissionWrapper = null;
            //instance.UpdateTollFreeVerificationRequest(accountId, phoneNumber, tfvSubmissionWrapper);
        }

        /// <summary>
        /// Test UpdateWebhookSubscription
        /// </summary>
        [Fact]
        public void UpdateWebhookSubscriptionTest()
        {
            //string accountId = null;
            //string id = null;
            //WebhookSubscriptionRequestSchema webhookSubscriptionRequestSchema = null;
            //var response = instance.UpdateWebhookSubscription(accountId, id, webhookSubscriptionRequestSchema);
            //Assert.IsType<WebhookSubscription>(response);
        }
    }
}
