/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Bandwidth.Standard.Client;
using Bandwidth.Standard.Api;
using Bandwidth.Standard.Model;
using Moq;
using System.Net;

namespace Bandwidth.Standard.Test.Unit.Api
{
    /// <summary>
    ///  Class for testing PhoneNumberLookupApi
    /// </summary>
    public class PhoneNumberLookupApiTests : IDisposable
    {
        private PhoneNumberLookupApi instance;
        private Mock<ISynchronousClient> mockClient;
        private Mock<IAsynchronousClient> mockAsynchronousClient;
        private Configuration fakeConfiguration;

        public PhoneNumberLookupApiTests()
        {
            mockClient = new Mock<ISynchronousClient>();
            mockAsynchronousClient = new Mock<IAsynchronousClient>();
            fakeConfiguration = new Configuration();
            fakeConfiguration.BasePath = "https://numbers.bandwidth.com/api/v1";
            fakeConfiguration.Username = "username";
            fakeConfiguration.Password = "password";
            instance = new PhoneNumberLookupApi(mockClient.Object, mockAsynchronousClient.Object, fakeConfiguration);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PhoneNumberLookupApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<PhoneNumberLookupApi>(instance);
        }

        /// <summary>
        /// Test CreateLookup
        /// </summary>
        [Fact]
        public void CreateLookupTest()
        {
            // Parameters for the API call
            string accountId = "9900000";
            LookupRequest lookupRequest = new LookupRequest(new List<string> { "+19195551234" });

            var lookupResponse = new CreateLookupResponse("004223a0-8b17-41b1-bf81-20732adf5590", LookupStatusEnum.COMPLETE);
            var apiResponse = new ApiResponse<CreateLookupResponse>(HttpStatusCode.Accepted, lookupResponse);
            mockClient.Setup(x => x.Post<CreateLookupResponse>("/accounts/{accountId}/tnlookup", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.CreateLookupWithHttpInfo(accountId, lookupRequest);
            
            Assert.IsType<ApiResponse<CreateLookupResponse>>(response);
            Assert.Equal(HttpStatusCode.Accepted, response.StatusCode);
        }

        /// <summary>
        /// Test GetLookupStatus
        /// </summary>
        [Fact]
        public void GetLookupStatusTest()
        {
            string accountId = "9900000";
            string requestId = "004223a0-8b17-41b1-bf81-20732adf559";

            var lookupStatus = new LookupStatus(requestId, LookupStatusEnum.COMPLETE);
            var apiResponse = new ApiResponse<LookupStatus>(HttpStatusCode.Accepted, lookupStatus);
            mockClient.Setup(x => x.Get<LookupStatus>("/accounts/{accountId}/tnlookup/{requestId}", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiResponse);
            var response = instance.GetLookupStatus(accountId, requestId);
            
            Assert.IsType<LookupStatus>(response);
            Assert.Equal(HttpStatusCode.Accepted, apiResponse.StatusCode);
        }

        /// <summary>
        /// Test failed phone number lookup
        /// </summary>
        [Fact]
        public void CreateLookupFailedRequest()
        {
            string accountId = "9900000";
            LookupRequest lookupRequest = new LookupRequest(new List<string> { "not a number" });
            
            var apiPostResponse = new ApiResponse<CreateLookupResponse>(HttpStatusCode.BadRequest, null);
            mockClient.Setup(x => x.Post<CreateLookupResponse>("/accounts/{accountId}/tnlookup", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiPostResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.CreateLookup(accountId, lookupRequest));

            Assert.Equal("Error calling CreateLookup: ", Exception.Message);
            Assert.Equal(400, Exception.ErrorCode);
        }

        /// <summary>
        /// Test duplicate phone number lookup
        /// </summary>
        [Fact]
        public void CreateLookupDuplicateRequest()
        {
            string accountId = "9900000";
            LookupRequest lookupRequest = new LookupRequest(new List<string> { "+19195551234", "+19195551234" });
            
            var apiPostResponse = new ApiResponse<CreateLookupResponse>(HttpStatusCode.BadRequest, null);
            mockClient.Setup(x => x.Post<CreateLookupResponse>("/accounts/{accountId}/tnlookup", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiPostResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.CreateLookup(accountId, lookupRequest));

            Assert.Equal("Error calling CreateLookup: ", Exception.Message);
            Assert.Equal(400, Exception.ErrorCode);
        }  

        /// <summary>
        /// Test Unauthorize request
        /// </summary>
        [Fact]
        public void CreateLookupUnauthorizedRequest()
        {
            string accountId = "9900000";
            LookupRequest lookupRequest = new LookupRequest(new List<string> { "+19195551234" });
            fakeConfiguration.Username = "badUsername";
            fakeConfiguration.Password = "badPassword";
            
            var apiPostResponse = new ApiResponse<CreateLookupResponse>(HttpStatusCode.Unauthorized, null);
            mockClient.Setup(x => x.Post<CreateLookupResponse>("/accounts/{accountId}/tnlookup", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiPostResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.CreateLookup(accountId, lookupRequest));

            Assert.Equal("Error calling CreateLookup: ", Exception.Message);
            Assert.Equal(401, Exception.ErrorCode);
        }

        /// <summary>
        /// Test Forbidden request
        /// </summary>
        [Fact]
        public void CreateLookupForbiddenRequest()
        {
            string accountId = "9900000";
            LookupRequest lookupRequest = new LookupRequest(new List<string> { "+19195551234" });
            fakeConfiguration.Username = "forbiddenUsername";
            fakeConfiguration.Password = "forbiddenPassword";

            var apiPostResponse = new ApiResponse<CreateLookupResponse>(HttpStatusCode.Forbidden, null);
            mockClient.Setup(x => x.Post<CreateLookupResponse>("/accounts/{accountId}/tnlookup", It.IsAny<RequestOptions>(), fakeConfiguration)).Returns(apiPostResponse);
            ApiException Exception = Assert.Throws<ApiException>(() => instance.CreateLookup(accountId, lookupRequest));

            Assert.Equal("Error calling CreateLookup: ", Exception.Message);
            Assert.Equal(403, Exception.ErrorCode);
        }
    }
}
