/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing MultiChannelActionCalendarEvent
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MultiChannelActionCalendarEventTests : IDisposable
    {
        private MultiChannelActionCalendarEvent instance;

        public MultiChannelActionCalendarEventTests()
        {
            instance = new MultiChannelActionCalendarEvent(
                type: RbmActionTypeEnum.CREATECALENDAREVENT,
                text: "Test message",
                postbackData: new byte[] { 1, 2, 3 },
                title: "Test Title",
                startTime: new DateTime(2020, 1, 1),
                endTime: new DateTime(2020, 1, 1),
                description: "Test Description"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MultiChannelActionCalendarEvent
        /// </summary>
        [Fact]
        public void MultiChannelActionCalendarEventInstanceTest()
        {
            Assert.IsType<MultiChannelActionCalendarEvent>(instance);
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            Assert.IsType<RbmActionTypeEnum>(instance.Type);
            Assert.Equal(RbmActionTypeEnum.CREATECALENDAREVENT, instance.Type);
        }

        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Fact]
        public void TextTest()
        {
            Assert.IsType<string>(instance.Text);
            Assert.Equal("Test message", instance.Text);
        }

        /// <summary>
        /// Test the property 'PostbackData'
        /// </summary>
        [Fact]
        public void PostbackDataTest()
        {
            Assert.IsType<byte[]>(instance.PostbackData);
            Assert.Equal(new byte[] { 1, 2, 3 }, instance.PostbackData);
        }

        /// <summary>
        /// Test the property 'Title'
        /// </summary>
        [Fact]
        public void TitleTest()
        {
            Assert.IsType<string>(instance.Title);
            Assert.Equal("Test Title", instance.Title);
        }

        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Fact]
        public void StartTimeTest()
        {
            Assert.IsType<DateTime>(instance.StartTime);
            Assert.Equal(new DateTime(2020, 1, 1), instance.StartTime);
        }

        /// <summary>
        /// Test the property 'EndTime'
        /// </summary>
        [Fact]
        public void EndTimeTest()
        {
            Assert.IsType<DateTime>(instance.EndTime);
            Assert.Equal(new DateTime(2020, 1, 1), instance.EndTime);
        }

        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            Assert.IsType<string>(instance.Description);
            Assert.Equal("Test Description", instance.Description);
        }
    }
}
