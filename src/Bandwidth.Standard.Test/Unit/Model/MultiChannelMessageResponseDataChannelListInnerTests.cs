/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing MultiChannelMessageResponseDataChannelListInner
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MultiChannelMessageResponseDataChannelListInnerTests : IDisposable
    {
        private MultiChannelMessageResponseDataChannelListInner instance;

        public MultiChannelMessageResponseDataChannelListInnerTests()
        {
            instance = new MultiChannelMessageResponseDataChannelListInner(
                from: "1234567890",
                applicationId: "app-1234567890",
                channel: MultiChannelMessageChannelEnum.SMS,
                content: new MultiChannelChannelListObjectContent(
                    new SmsMessageContent(text: "Test message")
                ),
                owner: "owner-1234567890"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MultiChannelMessageResponseDataChannelListInner
        /// </summary>
        [Fact]
        public void MultiChannelMessageResponseDataChannelListInnerInstanceTest()
        {
            Assert.IsType<MultiChannelMessageResponseDataChannelListInner>(instance);
        }

        /// <summary>
        /// Test the property 'From'
        /// </summary>
        [Fact]
        public void FromTest()
        {
            Assert.IsType<string>(instance.From);
            Assert.Equal("1234567890", instance.From);
        }

        /// <summary>
        /// Test the property 'ApplicationId'
        /// </summary>
        [Fact]
        public void ApplicationIdTest()
        {
            Assert.IsType<string>(instance.ApplicationId);
            Assert.Equal("app-1234567890", instance.ApplicationId);
        }

        /// <summary>
        /// Test the property 'Channel'
        /// </summary>
        [Fact]
        public void ChannelTest()
        {
            Assert.IsType<MultiChannelMessageChannelEnum>(instance.Channel);
            Assert.Equal(MultiChannelMessageChannelEnum.SMS, instance.Channel);
        }

        /// <summary>
        /// Test the property 'Content'
        /// </summary>
        [Fact]
        public void ContentTest()
        {
            Assert.IsType<MultiChannelChannelListObjectContent>(instance.Content);
            Assert.IsType<SmsMessageContent>(instance.Content.ActualInstance);
        }

        /// <summary>
        /// Test the property 'Owner'
        /// </summary>
        [Fact]
        public void OwnerTest()
        {
            Assert.IsType<string>(instance.Owner);
            Assert.Equal("owner-1234567890", instance.Owner);
        }
    }
}
