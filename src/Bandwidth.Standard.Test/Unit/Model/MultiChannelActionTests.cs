/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing MultiChannelAction
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MultiChannelActionTests : IDisposable
    {
        private MultiChannelAction instanceRbmActionBase;
        private MultiChannelAction instanceRbmActionDial;
        private MultiChannelAction instanceRbmActionViewLocation;
        private MultiChannelAction instanceMultiChannelActionCalendarEvent;
        private MultiChannelAction instanceRbmActionOpenUrl;

        public MultiChannelActionTests()
        {
            instanceRbmActionBase = new MultiChannelAction(new RbmActionBase(
                type: RbmActionTypeEnum.REPLY,
                text: "TestText",
                postbackData: new byte[] { 1, 2, 3 }
            ));
            instanceRbmActionDial = new MultiChannelAction(new RbmActionDial(
                type: RbmActionTypeEnum.REPLY,
                text: "TestText",
                postbackData: new byte[] { 1, 2, 3 },
                phoneNumber: "TestPhoneNumber"
            ));
            instanceRbmActionViewLocation = new MultiChannelAction(new RbmActionViewLocation(
                type: RbmActionTypeEnum.REPLY,
                text: "TestText",
                postbackData: new byte[] { 1, 2, 3 },
                latitude: 37.7749,
                longitude: -122.4194,
                label: "TestLabel"
            ));
            instanceMultiChannelActionCalendarEvent = new MultiChannelAction(new MultiChannelActionCalendarEvent(
                type: RbmActionTypeEnum.REPLY,
                text: "TestText",
                postbackData: new byte[] { 1, 2, 3 },
                title: "TestTitle",
                startTime: new DateTime(2020, 1, 1),
                endTime: new DateTime(2020, 1, 1),
                description: "TestDescription"
            ));
            instanceRbmActionOpenUrl = new MultiChannelAction(new RbmActionOpenUrl(
                type: RbmActionTypeEnum.REPLY,
                text: "TestText",
                postbackData: new byte[] { 1, 2, 3 },
                url: "https://test.url/"
            ));
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MultiChannelAction
        /// </summary>
        [Fact]
        public void MultiChannelActionInstanceTest()
        {
            Assert.IsType<MultiChannelAction>(instanceRbmActionBase);
            Assert.IsType<RbmActionBase>(instanceRbmActionBase.ActualInstance);
            Assert.IsType<MultiChannelAction>(instanceRbmActionDial);
            Assert.IsType<RbmActionDial>(instanceRbmActionDial.ActualInstance);
            Assert.IsType<MultiChannelAction>(instanceRbmActionViewLocation);
            Assert.IsType<RbmActionViewLocation>(instanceRbmActionViewLocation.ActualInstance);
            Assert.IsType<MultiChannelAction>(instanceMultiChannelActionCalendarEvent);
            Assert.IsType<MultiChannelActionCalendarEvent>(instanceMultiChannelActionCalendarEvent.ActualInstance);
            Assert.IsType<MultiChannelAction>(instanceRbmActionOpenUrl);
            Assert.IsType<RbmActionOpenUrl>(instanceRbmActionOpenUrl.ActualInstance);
        }
    }
}
