/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing VerifyCodeRequest
    /// </summary>
    public class VerifyCodeRequestTests : IDisposable
    {
        private VerifyCodeRequest instance;

        public VerifyCodeRequestTests()
        {
            instance = new VerifyCodeRequest(
                to: "+19195551234",
                code: "123456",
                scope: "2FA",
                expirationTimeInMinutes: 3
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VerifyCodeRequest
        /// </summary>
        [Fact]
        public void VerifyCodeRequestInstanceTest()
        {
            Assert.IsType<VerifyCodeRequest>(instance);
        }


        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            Assert.IsType<string>(instance.To);
            Assert.Equal("+19195551234", instance.To);
        }
        /// <summary>
        /// Test the property 'Scope'
        /// </summary>
        [Fact]
        public void ScopeTest()
        {
            Assert.IsType<string>(instance.Scope);
            Assert.Equal("2FA", instance.Scope);
        }
        /// <summary>
        /// Test the property 'ExpirationTimeInMinutes'
        /// </summary>
        [Fact]
        public void ExpirationTimeInMinutesTest()
        {
            Assert.IsType<decimal>(instance.ExpirationTimeInMinutes);
            Assert.Equal(3, instance.ExpirationTimeInMinutes);
        }
        /// <summary>
        /// Test the property 'Code'
        /// </summary>
        [Fact]
        public void CodeTest()
        {
            Assert.IsType<string>(instance.Code);
            Assert.Equal("123456", instance.Code);
        }

    }

}
