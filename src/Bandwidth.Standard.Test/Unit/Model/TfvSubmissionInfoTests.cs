/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing TfvSubmissionInfo
    /// </summary>
    public class TfvSubmissionInfoTests : IDisposable
    {
        private TfvSubmissionInfo instance;
        private Address businessAddress;
        private Contact businessContact;
        private OptInWorkflow optInWorkflow;

        public TfvSubmissionInfoTests()
        {
            businessAddress = new Address(
                name: "name",
                addr1: "addr1",
                addr2: "addr2",
                city: "city",
                state: "state",
                zip: "zip",
                url: "url"
            );

            businessContact = new Contact(
                firstName: "John",
                lastName: "Doe",
                email: "email@email.com",
                phoneNumber: "+1234567890"
            );

            optInWorkflow = new OptInWorkflow(
                description: "description",
                imageUrls: new List<string> { "imageUrls" }
            );

            instance = new TfvSubmissionInfo(
                businessAddress: businessAddress,
                businessContact: businessContact,
                messageVolume: 100,
                useCase: "test",
                useCaseSummary: "test",
                productionMessageContent: "test",
                optInWorkflow: optInWorkflow,
                additionalInformation: "test",
                isvReseller: "test"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TfvSubmissionInfo
        /// </summary>
        [Fact]
        public void TfvSubmissionInfoInstanceTest()
        {
            Assert.IsType<TfvSubmissionInfo>(instance);
        }

        /// <summary>
        /// Test the property 'BusinessAddress'
        /// </summary>
        [Fact]
        public void BusinessAddressTest()
        {
            Assert.IsType<Address>(instance.BusinessAddress);
            Assert.Equal(businessAddress, instance.BusinessAddress);
        }

        /// <summary>
        /// Test the property 'BusinessContact'
        /// </summary>
        [Fact]
        public void BusinessContactTest()
        {
            Assert.IsType<Contact>(instance.BusinessContact);
            Assert.Equal(businessContact, instance.BusinessContact);
        }

        /// <summary>
        /// Test the property 'MessageVolume'
        /// </summary>
        [Fact]
        public void MessageVolumeTest()
        {
            Assert.IsType<int>(instance.MessageVolume);
            Assert.Equal(100, instance.MessageVolume);
        }

        /// <summary>
        /// Test the property 'UseCase'
        /// </summary>
        [Fact]
        public void UseCaseTest()
        {
            Assert.IsType<string>(instance.UseCase);
            Assert.Equal("test", instance.UseCase);
        }

        /// <summary>
        /// Test the property 'UseCaseSummary'
        /// </summary>
        [Fact]
        public void UseCaseSummaryTest()
        {
            Assert.IsType<string>(instance.UseCaseSummary);
            Assert.Equal("test", instance.UseCaseSummary);
        }

        /// <summary>
        /// Test the property 'ProductionMessageContent'
        /// </summary>
        [Fact]
        public void ProductionMessageContentTest()
        {
            Assert.IsType<string>(instance.ProductionMessageContent);
            Assert.Equal("test", instance.ProductionMessageContent);
        }

        /// <summary>
        /// Test the property 'OptInWorkflow'
        /// </summary>
        [Fact]
        public void OptInWorkflowTest()
        {
            Assert.IsType<OptInWorkflow>(instance.OptInWorkflow);
            Assert.Equal(optInWorkflow, instance.OptInWorkflow);
        }

        /// <summary>
        /// Test the property 'AdditionalInformation'
        /// </summary>
        [Fact]
        public void AdditionalInformationTest()
        {
            Assert.IsType<string>(instance.AdditionalInformation);
            Assert.Equal("test", instance.AdditionalInformation);
        }

        /// <summary>
        /// Test the property 'IsvReseller'
        /// </summary>
        [Fact]
        public void IsvResellerTest()
        {
            Assert.IsType<string>(instance.IsvReseller);
            Assert.Equal("test", instance.IsvReseller);
        }
    }
}
