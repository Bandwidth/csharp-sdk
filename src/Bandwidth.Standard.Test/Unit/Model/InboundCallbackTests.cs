/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing InboundCallback
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class InboundCallbackTests : IDisposable
    {
        private InboundCallback instance;

        public InboundCallbackTests()
        {
            instance = new InboundCallback(
                time: DateTime.Now,
                type: InboundCallbackTypeEnum.MessageReceived,
                to: "1234567890",
                description: "Test Callback",
                message: new InboundCallbackMessage(
                    id: "1661365814859loidf7mcwd4qacn7",
                    owner: "+15553332222",
                    applicationId: "93de2206-9669-4e07-948d-329f4b722ee2",
                    time: DateTime.Now,
                    segmentCount: 1,
                    direction: MessageDirectionEnum.In,
                    to: new List<string> { "+15552223333" },
                    from: "+15553332222"
                ),
                carrierName: "Test Carrier"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of InboundCallback
        /// </summary>
        [Fact]
        public void InboundCallbackInstanceTest()
        {
            Assert.IsType<InboundCallback>(instance);
        }

        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Fact]
        public void TimeTest()
        {
            Assert.IsType<DateTime>(instance.Time);
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            Assert.IsType<InboundCallbackTypeEnum>(instance.Type);
            Assert.Equal(InboundCallbackTypeEnum.MessageReceived, instance.Type);
        }

        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            Assert.IsType<string>(instance.To);
            Assert.Equal("1234567890", instance.To);
        }

        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            Assert.IsType<string>(instance.Description);
            Assert.Equal("Test Callback", instance.Description);
        }

        /// <summary>
        /// Test the property 'Message'
        /// </summary>
        [Fact]
        public void MessageTest()
        {
            Assert.IsType<InboundCallbackMessage>(instance.Message);
        }

        /// <summary>
        /// Test the property 'CarrierName'
        /// </summary>
        [Fact]
        public void CarrierNameTest()
        {
            Assert.IsType<string>(instance.CarrierName);
            Assert.Equal("Test Carrier", instance.CarrierName);
        }
    }
}
