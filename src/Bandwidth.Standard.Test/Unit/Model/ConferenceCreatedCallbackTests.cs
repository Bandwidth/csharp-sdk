/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing ConferenceCreatedCallback
    /// </summary>
    public class ConferenceCreatedCallbackTests : IDisposable
    {
        private ConferenceCreatedCallback instance;

        public ConferenceCreatedCallbackTests()
        {
            instance = new ConferenceCreatedCallback();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConferenceCreatedCallback
        /// </summary>
        [Fact]
        public void ConferenceCreatedCallbackInstanceTest()
        {
            Assert.IsType<ConferenceCreatedCallback>(instance);
        }


        /// <summary>
        /// Test the property 'EventType'
        /// </summary>
        [Fact]
        public void EventTypeTest()
        {
            instance.EventType = "conferenceCreated";
            Assert.IsType<string>(instance.EventType);
            Assert.Equal("conferenceCreated", instance.EventType);
        }
        /// <summary>
        /// Test the property 'EventTime'
        /// </summary>
        [Fact]
        public void EventTimeTest()
        {
            instance.EventTime = new DateTime(2020, 1, 1);
            Assert.IsType<DateTime>(instance.EventTime);
            Assert.Equal(new DateTime(2020, 1, 1), instance.EventTime);
        }
        /// <summary>
        /// Test the property 'ConferenceId'
        /// </summary>
        [Fact]
        public void ConferenceIdTest()
        {
            instance.ConferenceId = "conf-123";
            Assert.IsType<string>(instance.ConferenceId);
            Assert.Equal("conf-123", instance.ConferenceId);
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            instance.Name = "my-conference-name";
            Assert.IsType<string>(instance.Name);
            Assert.Equal("my-conference-name", instance.Name);
        }
        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Fact]
        public void TagTest()
        {
            instance.Tag = "test";
            Assert.IsType<string>(instance.Tag);
            Assert.Equal("test", instance.Tag);
        }

    }

}
