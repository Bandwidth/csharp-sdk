/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing MultiChannelChannelListObjectContent
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MultiChannelChannelListObjectContentTests : IDisposable
    {
        private List<MultiChannelAction> suggestions;
        private MultiChannelChannelListObjectContent instanceRbmMessageContentText;
        private MultiChannelChannelListObjectContent instanceRbmMessageMedia;
        private MultiChannelChannelListObjectContent instanceRbmMessageContentRichCard;
        private MultiChannelChannelListObjectContent instanceSmsMessageContent;
        private MultiChannelChannelListObjectContent instanceMmsMessageContent;

        public MultiChannelChannelListObjectContentTests()
        {
            suggestions = new List<MultiChannelAction> {
                new MultiChannelAction(new RbmActionBase(
                    type: RbmActionTypeEnum.REPLY,
                    text: "Test",
                    postbackData: new byte[] { 1, 2, 3 }
                ))
            };

            instanceRbmMessageContentText = new MultiChannelChannelListObjectContent(new RbmMessageContentText(
                text: "Test message",
                suggestions: suggestions
            ));
            instanceRbmMessageMedia = new MultiChannelChannelListObjectContent(new RbmMessageMedia(
                media: new RbmMessageContentFile(
                    fileUrl: "https://test.url/",
                    thumbnailUrl: "https://test.url/"
                ),
                suggestions: suggestions
            ));
            instanceRbmMessageContentRichCard = new MultiChannelChannelListObjectContent(new RbmMessageContentRichCard(
                new RbmStandaloneCard(
                    orientation: StandaloneCardOrientationEnum.VERTICAL,
                    thumbnailImageAlignment: ThumbnailAlignmentEnum.LEFT,
                    cardContent: new RbmCardContent(
                        title: "TestTitle",
                        description: "TestDescription",
                        media: new RbmCardContentMedia(
                            fileUrl: "https://test.url/",
                            thumbnailUrl: "https://test.url/",
                            height: RbmMediaHeightEnum.MEDIUM
                        ),
                        suggestions: suggestions
                    ),
                    suggestions: suggestions
                )
            ));
            instanceSmsMessageContent = new MultiChannelChannelListObjectContent(new SmsMessageContent(
                text: "Test message"
            ));
            instanceMmsMessageContent = new MultiChannelChannelListObjectContent(new MmsMessageContent(
                text: "Test message",
                media: new List<MmsMessageContentFile>(){
                    new MmsMessageContentFile(fileUrl: "https://test.url/")
                }
            ));
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MultiChannelChannelListObjectContent
        /// </summary>
        [Fact]
        public void MultiChannelChannelListObjectContentInstanceTest()
        {
            Assert.IsType<MultiChannelChannelListObjectContent>(instanceRbmMessageContentText);
            Assert.IsType<RbmMessageContentText>(instanceRbmMessageContentText.ActualInstance);
            Assert.IsType<MultiChannelChannelListObjectContent>(instanceRbmMessageMedia);
            Assert.IsType<RbmMessageMedia>(instanceRbmMessageMedia.ActualInstance);
            Assert.IsType<MultiChannelChannelListObjectContent>(instanceRbmMessageContentRichCard);
            Assert.IsType<RbmMessageContentRichCard>(instanceRbmMessageContentRichCard.ActualInstance);
            Assert.IsType<MultiChannelChannelListObjectContent>(instanceSmsMessageContent);
            Assert.IsType<SmsMessageContent>(instanceSmsMessageContent.ActualInstance);
            Assert.IsType<MultiChannelChannelListObjectContent>(instanceMmsMessageContent);
            Assert.IsType<MmsMessageContent>(instanceMmsMessageContent.ActualInstance);
        }
    }
}
