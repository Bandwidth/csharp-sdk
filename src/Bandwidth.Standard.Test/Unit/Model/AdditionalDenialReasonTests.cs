/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing AdditionalDenialReason
    /// </summary>
    public class AdditionalDenialReasonTests : IDisposable
    {
        private AdditionalDenialReason instance;

        public AdditionalDenialReasonTests()
        {
            instance = new AdditionalDenialReason(
                statusCode: 1,
                reason: "reason",
                resubmitAllowed: true
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AdditionalDenialReason
        /// </summary>
        [Fact]
        public void AdditionalDenialReasonInstanceTest()
        {
            Assert.IsType<AdditionalDenialReason>(instance);
        }

        /// <summary>
        /// Test the property 'StatusCode'
        /// </summary>
        [Fact]
        public void StatusCodeTest()
        {
            Assert.IsType<int>(instance.StatusCode);
            Assert.Equal(1, instance.StatusCode);
        }

        /// <summary>
        /// Test the property 'Reason'
        /// </summary>
        [Fact]
        public void ReasonTest()
        {
            Assert.IsType<string>(instance.Reason);
            Assert.Equal("reason", instance.Reason);
        }

        /// <summary>
        /// Test the property 'ResubmitAllowed'
        /// </summary>
        [Fact]
        public void ResubmitAllowedTest()
        {
            Assert.IsType<bool>(instance.ResubmitAllowed);
            Assert.True(instance.ResubmitAllowed);
        }
    }
}
