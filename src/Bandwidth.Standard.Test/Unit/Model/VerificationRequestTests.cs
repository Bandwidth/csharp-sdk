/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing VerificationRequest
    /// </summary>
    public class VerificationRequestTests : IDisposable
    {
        private VerificationRequest instance;

        public VerificationRequestTests()
        {
            instance = new VerificationRequest(
                businessAddress: new Address(
                    name: "name",
                    addr1: "addr1",
                    addr2: "addr2",
                    city: "city",
                    state: "state",
                    zip: "zip",
                    url: "url"
                ),
                businessContact: new Contact(
                    firstName: "John",
                    lastName: "Doe",
                    email: "email@email.com",
                    phoneNumber: "+1234567890"
                ),
                messageVolume: 100,
                phoneNumbers: new List<string> { "+1234567890" },
                useCase: "test",
                useCaseSummary: "test",
                productionMessageContent: "test",
                optInWorkflow: new OptInWorkflow(
                    description: "description",
                    imageUrls: new List<string> { "imageUrls" }
                ),
                additionalInformation: "test",
                isvReseller: "test",
                privacyPolicyUrl: "test",
                termsAndConditionsUrl: "test",
                businessDBA: "test"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VerificationRequest
        /// </summary>
        [Fact]
        public void VerificationRequestInstanceTest()
        {
            Assert.IsType<VerificationRequest>(instance);
        }

        /// <summary>
        /// Test the property 'BusinessAddress'
        /// </summary>
        [Fact]
        public void BusinessAddressTest()
        {
            Assert.IsType<Address>(instance.BusinessAddress);
        }

        /// <summary>
        /// Test the property 'BusinessContact'
        /// </summary>
        [Fact]
        public void BusinessContactTest()
        {
            Assert.IsType<Contact>(instance.BusinessContact);
        }

        /// <summary>
        /// Test the property 'MessageVolume'
        /// </summary>
        [Fact]
        public void MessageVolumeTest()
        {
            Assert.IsType<int>(instance.MessageVolume);
            Assert.Equal(100, instance.MessageVolume);
        }

        /// <summary>
        /// Test the property 'PhoneNumbers'
        /// </summary>
        [Fact]
        public void PhoneNumbersTest()
        {
            Assert.IsType<List<string>>(instance.PhoneNumbers);
            Assert.Equal(new List<string> { "+1234567890" }, instance.PhoneNumbers);
        }

        /// <summary>
        /// Test the property 'UseCase'
        /// </summary>
        [Fact]
        public void UseCaseTest()
        {
            Assert.IsType<string>(instance.UseCase);
            Assert.Equal("test", instance.UseCase);
        }

        /// <summary>
        /// Test the property 'UseCaseSummary'
        /// </summary>
        [Fact]
        public void UseCaseSummaryTest()
        {
            Assert.IsType<string>(instance.UseCaseSummary);
            Assert.Equal("test", instance.UseCaseSummary);
        }

        /// <summary>
        /// Test the property 'ProductionMessageContent'
        /// </summary>
        [Fact]
        public void ProductionMessageContentTest()
        {
            Assert.IsType<string>(instance.ProductionMessageContent);
            Assert.Equal("test", instance.ProductionMessageContent);
        }

        /// <summary>
        /// Test the property 'OptInWorkflow'
        /// </summary>
        [Fact]
        public void OptInWorkflowTest()
        {
            Assert.IsType<OptInWorkflow>(instance.OptInWorkflow);
        }

        /// <summary>
        /// Test the property 'AdditionalInformation'
        /// </summary>
        [Fact]
        public void AdditionalInformationTest()
        {
            Assert.IsType<string>(instance.AdditionalInformation);
            Assert.Equal("test", instance.AdditionalInformation);
        }

        /// <summary>
        /// Test the property 'IsvReseller'
        /// </summary>
        [Fact]
        public void IsvResellerTest()
        {
            Assert.IsType<string>(instance.IsvReseller);
            Assert.Equal("test", instance.IsvReseller);
        }

        /// <summary>
        /// Test the property 'PrivacyPolicyUrl'
        /// </summary>
        [Fact]
        public void PrivacyPolicyUrlTest()
        {
            Assert.IsType<string>(instance.PrivacyPolicyUrl);
            Assert.Equal("test", instance.PrivacyPolicyUrl);
        }

        /// <summary>
        /// Test the property 'TermsAndConditionsUrl'
        /// </summary>
        [Fact]
        public void TermsAndConditionsUrlTest()
        {
            Assert.IsType<string>(instance.TermsAndConditionsUrl);
            Assert.Equal("test", instance.TermsAndConditionsUrl);
        }

        /// <summary>
        /// Test the property 'BusinessDBA'
        /// </summary>
        [Fact]
        public void BusinessDBATest()
        {
            Assert.IsType<string>(instance.BusinessDBA);
            Assert.Equal("test", instance.BusinessDBA);
        }
    }
}
