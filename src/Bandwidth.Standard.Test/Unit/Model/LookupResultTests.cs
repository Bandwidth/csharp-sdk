/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing LookupResult
    /// </summary>
    public class LookupResultTests : IDisposable
    {
        private LookupResult instance;

        public LookupResultTests()
        {
            instance = new LookupResult();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LookupResult
        /// </summary>
        [Fact]
        public void LookupResultInstanceTest()
        {
            Assert.IsType<LookupResult>(instance);
        }


        /// <summary>
        /// Test the property 'ResponseCode'
        /// </summary>
        [Fact]
        public void ResponseCodeTest()
        {
            instance.ResponseCode = 0;
            Assert.IsType<int>(instance.ResponseCode);
            Assert.Equal(0, instance.ResponseCode);
        }
        /// <summary>
        /// Test the property 'Message'
        /// </summary>
        [Fact]
        public void MessageTest()
        {
            instance.Message = "NOERROR";
            Assert.IsType<string>(instance.Message);
            Assert.Equal("NOERROR", instance.Message);
        }
        /// <summary>
        /// Test the property 'E164Format'
        /// </summary>
        [Fact]
        public void E164FormatTest()
        {
            instance.E164Format = "+15551234567";
            Assert.IsType<string>(instance.E164Format);
            Assert.Equal("+15551234567", instance.E164Format);
        }
        /// <summary>
        /// Test the property 'Formatted'
        /// </summary>
        [Fact]
        public void FormattedTest()
        {
            instance.Formatted = "(555) 1230-4567";
            Assert.IsType<string>(instance.Formatted);
            Assert.Equal("(555) 1230-4567", instance.Formatted);
        }
        /// <summary>
        /// Test the property 'Country'
        /// </summary>
        [Fact]
        public void CountryTest()
        {
            instance.Country = "US";
            Assert.IsType<string>(instance.Country);
            Assert.Equal("US", instance.Country);
        }
        /// <summary>
        /// Test the property 'LineType'
        /// </summary>
        [Fact]
        public void LineTypeTest()
        {
            instance.LineType = "mobile";
            Assert.IsType<string>(instance.LineType);
            Assert.Equal("mobile", instance.LineType);
        }
        /// <summary>
        /// Test the property 'LineProvider'
        /// </summary>
        [Fact]
        public void LineProviderTest()
        {
            instance.LineProvider = "Verizon Wireless";
            Assert.IsType<string>(instance.LineProvider);
            Assert.Equal("Verizon Wireless", instance.LineProvider);
        }
        /// <summary>
        /// Test the property 'MobileCountryCode'
        /// </summary>
        [Fact]
        public void MobileCountryCodeTest()
        {
            instance.MobileCountryCode = "310";
            Assert.IsType<string>(instance.MobileCountryCode);
            Assert.Equal("310", instance.MobileCountryCode);
        }
        /// <summary>
        /// Test the property 'MobileNetworkCode'
        /// </summary>
        [Fact]
        public void MobileNetworkCodeTest()
        {
            instance.MobileNetworkCode = "010";
            Assert.IsType<string>(instance.MobileNetworkCode);
            Assert.Equal("010", instance.MobileNetworkCode);
        }

    }

}
