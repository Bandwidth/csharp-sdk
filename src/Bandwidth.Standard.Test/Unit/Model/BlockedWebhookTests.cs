/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing BlockedWebhook
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class BlockedWebhookTests : IDisposable
    {
        private BlockedWebhook instance;
        private Guid guid = Guid.NewGuid();

        public BlockedWebhookTests()
        {
            instance = new BlockedWebhook(
                accountId: "accountId",
                phoneNumber: "phoneNumber",
                status: TfvCallbackStatusEnum.VERIFIED,
                internalTicketNumber: guid,
                blocked: true,
                blockedReason: "blockedReason"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BlockedWebhook
        /// </summary>
        [Fact]
        public void BlockedWebhookInstanceTest()
        {
            Assert.IsType<BlockedWebhook>(instance);
        }

        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            Assert.IsType<string>(instance.AccountId);
            Assert.Equal("accountId", instance.AccountId);
        }

        /// <summary>
        /// Test the property 'PhoneNumber'
        /// </summary>
        [Fact]
        public void PhoneNumberTest()
        {
            Assert.IsType<string>(instance.PhoneNumber);
            Assert.Equal("phoneNumber", instance.PhoneNumber);
        }

        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            Assert.IsType<TfvCallbackStatusEnum>(instance.Status);
            Assert.Equal(TfvCallbackStatusEnum.VERIFIED, instance.Status);
        }

        /// <summary>
        /// Test the property 'InternalTicketNumber'
        /// </summary>
        [Fact]
        public void InternalTicketNumberTest()
        {
            Assert.IsType<Guid>(instance.InternalTicketNumber);
            Assert.Equal(guid, instance.InternalTicketNumber);
        }

        /// <summary>
        /// Test the property 'Blocked'
        /// </summary>
        [Fact]
        public void BlockedTest()
        {
            Assert.IsType<bool>(instance.Blocked);
            Assert.True(instance.Blocked);
        }

        /// <summary>
        /// Test the property 'BlockedReason'
        /// </summary>
        [Fact]
        public void BlockedReasonTest()
        {
            Assert.IsType<string>(instance.BlockedReason);
            Assert.Equal("blockedReason", instance.BlockedReason);
        }
    }
}
