/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing MultiChannelMessageResponseData
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MultiChannelMessageResponseDataTests : IDisposable
    {
        private MultiChannelMessageResponseData instance;

        public MultiChannelMessageResponseDataTests()
        {
            instance = new MultiChannelMessageResponseData(
                messageId: "msg-1234567890",
                time: DateTime.Now,
                direction: MessageDirectionEnum.In,
                to: new List<string> { "+15551234567" },
                channelList: new List<MultiChannelMessageResponseDataChannelListInner>{},
                tag: "test-tag",
                priority: PriorityEnum.Default,
                expiration: DateTime.UtcNow.AddHours(1)
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MultiChannelMessageResponseData
        /// </summary>
        [Fact]
        public void MultiChannelMessageResponseDataInstanceTest()
        {
            Assert.IsType<MultiChannelMessageResponseData>(instance);
        }

        /// <summary>
        /// Test the property 'MessageId'
        /// </summary>
        [Fact]
        public void MessageIdTest()
        {
            Assert.IsType<string>(instance.MessageId);
            Assert.Equal("msg-1234567890", instance.MessageId);
        }

        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Fact]
        public void TimeTest()
        {
            Assert.IsType<DateTime>(instance.Time);
            Assert.NotEqual(DateTime.MinValue, instance.Time);
        }

        /// <summary>
        /// Test the property 'Direction'
        /// </summary>
        [Fact]
        public void DirectionTest()
        {
            Assert.IsType<MessageDirectionEnum>(instance.Direction);
            Assert.Equal(MessageDirectionEnum.In, instance.Direction);
        }

        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            Assert.IsType<List<string>>(instance.To);
            Assert.Equal(new List<string> { "+15551234567" }, instance.To);
        }

        /// <summary>
        /// Test the property 'ChannelList'
        /// </summary>
        [Fact]
        public void ChannelListTest()
        {
            Assert.IsType<List<MultiChannelMessageResponseDataChannelListInner>>(instance.ChannelList);
        }

        /// <summary>
        /// Test the property 'Tag'
        /// </summary>
        [Fact]
        public void TagTest()
        {
            Assert.IsType<string>(instance.Tag);
            Assert.Equal("test-tag", instance.Tag);
        }

        /// <summary>
        /// Test the property 'Priority'
        /// </summary>
        [Fact]
        public void PriorityTest()
        {
            Assert.IsType<PriorityEnum>(instance.Priority);
            Assert.Equal(PriorityEnum.Default, instance.Priority);
        }

        /// <summary>
        /// Test the property 'Expiration'
        /// </summary>
        [Fact]
        public void ExpirationTest()
        {
            Assert.IsType<DateTime>(instance.Expiration);
            Assert.True(instance.Expiration > DateTime.UtcNow);
        }
    }
}
