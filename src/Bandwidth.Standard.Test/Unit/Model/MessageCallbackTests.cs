/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Unit.Model
{
    /// <summary>
    ///  Class for testing MessageCallback
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MessageCallbackTests : IDisposable
    {
        private MessageCallback instance;
        private MessageCallbackMessage message;

        public MessageCallbackTests()
        {
            message = new MessageCallbackMessage(
                id: "test",
                owner: "test",
                applicationId: "test",
                time: new DateTime(2020, 1, 1),
                segmentCount: 1,
                direction: MessageDirectionEnum.In,
                to: new List<string> { "+15551234567" },
                from: "+15557654321",
                text: "Hello World",
                tag: "test",
                media: new List<string> { "https://test.url/" },
                priority: PriorityEnum.Default
            );

            instance = new MessageCallback(
                time: new DateTime(2020, 1, 1),
                type: CallbackTypeEnum.Received,
                to: "+19195551234",
                description: "test",
                message: message,
                errorCode: 123,
                carrierName: "test"
            );
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MessageCallback
        /// </summary>
        [Fact]
        public void MessageCallbackInstanceTest()
        {
            Assert.IsType<MessageCallback>(instance);
        }

        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Fact]
        public void TimeTest()
        {
            Assert.IsType<DateTime>(instance.Time);
            Assert.Equal(new DateTime(2020, 1, 1), instance.Time);
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            Assert.IsType<CallbackTypeEnum>(instance.Type);
            Assert.Equal(CallbackTypeEnum.Received, instance.Type);
        }

        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            Assert.IsType<string>(instance.To);
            Assert.Equal("+19195551234", instance.To);
        }

        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            Assert.IsType<string>(instance.Description);
            Assert.Equal("test", instance.Description);
        }

        /// <summary>
        /// Test the property 'Message'
        /// </summary>
        [Fact]
        public void MessageTest()
        {
            Assert.IsType<MessageCallbackMessage>(instance.Message);
            Assert.Equal(message, instance.Message);
        }

        /// <summary>
        /// Test the property 'ErrorCode'
        /// </summary>
        [Fact]
        public void ErrorCodeTest()
        {
            Assert.IsType<int>(instance.ErrorCode);
            Assert.Equal(123, instance.ErrorCode);
        }

        /// <summary>
        /// Test the property 'CarrierName'
        /// </summary>
        [Fact]
        public void CarrierNameTest()
        {
            Assert.IsType<string>(instance.CarrierName);
            Assert.Equal("test", instance.CarrierName);
        }
    }
}
