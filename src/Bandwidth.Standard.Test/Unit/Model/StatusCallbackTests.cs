/*
 * Bandwidth
 *
 * Bandwidth's Communication APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: letstalk@bandwidth.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Bandwidth.Standard.Model;
using Bandwidth.Standard.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Bandwidth.Standard.Test.Model
{
    /// <summary>
    ///  Class for testing StatusCallback
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class StatusCallbackTests : IDisposable
    {
        private StatusCallback instance;

        public StatusCallbackTests()
        {
            instance = new StatusCallback(
                time: DateTime.Now,
                eventTime: DateTime.Now,
                type: StatusCallbackTypeEnum.Sending,
                to: "1234567890",
                description: "Test Status Callback",
                message: new StatusCallbackMessage(
                    id: "1661365814859loidf7mcwd4qacn7", 
                    owner: "+15553332222", 
                    applicationId: "93de2206-9669-4e07-948d-329f4b722ee2", 
                    time: DateTime.Now,
                    segmentCount: 1, 
                    direction:  MessageDirectionEnum.In,
                    to: new List<string> { "+15552223333" },
                    from: "+15553332222", 
                    text: "Hello world", 
                    tag: "custom string", 
                    media: ["https://dev.bandwidth.com/images/bandwidth-logo.png"], 
                    priority: PriorityEnum.Default,
                    channel: MultiChannelMessageChannelEnum.SMS
                ),
                errorCode: 1234,
                carrierName: "Test Carrier");
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StatusCallback
        /// </summary>
        [Fact]
        public void StatusCallbackInstanceTest()
        {
            Assert.IsType<StatusCallback>(instance);
        }

        /// <summary>
        /// Test the property 'Time'
        /// </summary>
        [Fact]
        public void TimeTest()
        {
            Assert.IsType<DateTime>(instance.Time);
        }

        /// <summary>
        /// Test the property 'EventTime'
        /// </summary>
        [Fact]
        public void EventTimeTest()
        {
            Assert.IsType<DateTime>(instance.EventTime);
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            Assert.IsType<StatusCallbackTypeEnum>(instance.Type);
            Assert.Equal(StatusCallbackTypeEnum.Sending, instance.Type);
        }

        /// <summary>
        /// Test the property 'To'
        /// </summary>
        [Fact]
        public void ToTest()
        {
            Assert.IsType<string>(instance.To);
            Assert.Equal("1234567890", instance.To);
        }

        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            Assert.IsType<string>(instance.Description);
            Assert.Equal("Test Status Callback", instance.Description);
        }

        /// <summary>
        /// Test the property 'Message'
        /// </summary>
        [Fact]
        public void MessageTest()
        {
            Assert.IsType<StatusCallbackMessage>(instance.Message);
            Assert.NotNull(instance.Message);
            Assert.Equal("1661365814859loidf7mcwd4qacn7", instance.Message.Id);
            Assert.Equal("+15553332222", instance.Message.Owner);
            Assert.Equal("93de2206-9669-4e07-948d-329f4b722ee2", instance.Message.ApplicationId);
        }

        /// <summary>
        /// Test the property 'ErrorCode'
        /// </summary>
        [Fact]
        public void ErrorCodeTest()
        {
            Assert.IsType<int>(instance.ErrorCode);
            Assert.Equal(1234, instance.ErrorCode);
        }

        /// <summary>
        /// Test the property 'CarrierName'
        /// </summary>
        [Fact]
        public void CarrierNameTest()
        {
            Assert.IsType<string>(instance.CarrierName);
            Assert.Equal("Test Carrier", instance.CarrierName);
        }
    }
}
